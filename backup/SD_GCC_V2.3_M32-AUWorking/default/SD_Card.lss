
SD_Card.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004b50  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000005a  00800060  00004b50  00004be4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000023d  008000ba  008000ba  00004c3e  2**0
                  ALLOC
  3 .debug_aranges 000000c0  00000000  00000000  00004c3e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000005a9  00000000  00000000  00004cfe  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001f0d  00000000  00000000  000052a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000072d  00000000  00000000  000071b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000190f  00000000  00000000  000078e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000280  00000000  00000000  000091f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000008cc  00000000  00000000  00009470  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000015c3  00000000  00000000  00009d3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  0000b2ff  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b4 0f 	jmp	0x1f68	; 0x1f68 <__ctors_end>
       4:	0c 94 d1 0f 	jmp	0x1fa2	; 0x1fa2 <__bad_interrupt>
       8:	0c 94 d1 0f 	jmp	0x1fa2	; 0x1fa2 <__bad_interrupt>
       c:	0c 94 d1 0f 	jmp	0x1fa2	; 0x1fa2 <__bad_interrupt>
      10:	0c 94 d1 0f 	jmp	0x1fa2	; 0x1fa2 <__bad_interrupt>
      14:	0c 94 d1 0f 	jmp	0x1fa2	; 0x1fa2 <__bad_interrupt>
      18:	0c 94 d1 0f 	jmp	0x1fa2	; 0x1fa2 <__bad_interrupt>
      1c:	0c 94 d1 0f 	jmp	0x1fa2	; 0x1fa2 <__bad_interrupt>
      20:	0c 94 d1 0f 	jmp	0x1fa2	; 0x1fa2 <__bad_interrupt>
      24:	0c 94 d1 0f 	jmp	0x1fa2	; 0x1fa2 <__bad_interrupt>
      28:	0c 94 d1 0f 	jmp	0x1fa2	; 0x1fa2 <__bad_interrupt>
      2c:	0c 94 d1 0f 	jmp	0x1fa2	; 0x1fa2 <__bad_interrupt>
      30:	0c 94 d1 0f 	jmp	0x1fa2	; 0x1fa2 <__bad_interrupt>
      34:	0c 94 d1 0f 	jmp	0x1fa2	; 0x1fa2 <__bad_interrupt>
      38:	0c 94 d1 0f 	jmp	0x1fa2	; 0x1fa2 <__bad_interrupt>
      3c:	0c 94 d1 0f 	jmp	0x1fa2	; 0x1fa2 <__bad_interrupt>
      40:	0c 94 d1 0f 	jmp	0x1fa2	; 0x1fa2 <__bad_interrupt>
      44:	0c 94 d1 0f 	jmp	0x1fa2	; 0x1fa2 <__bad_interrupt>
      48:	0c 94 d1 0f 	jmp	0x1fa2	; 0x1fa2 <__bad_interrupt>
      4c:	0c 94 d1 0f 	jmp	0x1fa2	; 0x1fa2 <__bad_interrupt>
      50:	0c 94 d1 0f 	jmp	0x1fa2	; 0x1fa2 <__bad_interrupt>

00000054 <pcm_samples>:
      54:	74 61 90 1a 00 00 80 80 80 80 80 80 80 80 80 80     ta..............
      64:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
      74:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
      84:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
      94:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
      a4:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
      b4:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
      c4:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
      d4:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
      e4:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
      f4:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
     104:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
     114:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
     124:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
     134:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
     144:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
     154:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
     164:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
     174:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
     184:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
     194:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
     1a4:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
     1b4:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
     1c4:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
     1d4:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
     1e4:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
     1f4:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
     204:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
     214:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
     224:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
     234:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
     244:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
     254:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
     264:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
     274:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
     284:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
     294:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
     2a4:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
     2b4:	80 80 80 80 80 80 80 80 7f 80 80 7f 80 7f 7f 80     ................
     2c4:	7f 7f 80 7f 80 80 7f 80 7f 7f 7f 7f 7f 7f 7f 7f     ................
     2d4:	7f 7f 7f 7f 7f 80 7f 7f 80 7f 80 7f 7f 80 7f 80     ................
     2e4:	80 80 80 80 80 82 81 80 84 81 7f 85 7f 80 83 7f     ................
     2f4:	80 83 81 7f 84 82 80 84 81 82 83 89 8a 82 8c 87     ................
     304:	80 89 82 7e 82 7c 7d 7e 79 7c 7a 77 79 78 75 76     ...~.|}~y|zwyxuv
     314:	79 76 78 7b 7e 83 86 8d 90 92 95 94 94 92 8e 8b     yvx{~...........
     324:	88 83 7f 7b 73 66 59 4a 3e 38 5e 60 54 95 92 89     ...{sfYJ>8^`T...
     334:	b7 ac 99 a6 91 7b 7f 6c 65 6c 6b 73 79 87 96 9a     .....{.lelksy...
     344:	a7 ad a6 a9 9e 8e 87 7b 74 70 73 78 7b 87 8e 90     .......{tpsx{...
     354:	96 94 8d 88 7d 71 68 5c 57 52 50 59 5e 68 78 7e     ....}qh\WRPY^hx~
     364:	8a 9a 9f 9d a1 a0 91 8f 8b 81 80 82 80 85 8d 8c     ................
     374:	93 97 94 8e 89 73 54 56 32 21 42 45 44 6a 8e 8a     .....sTV2!BEDj..
     384:	ab bf b1 b5 ad 96 8c 87 74 70 77 73 76 85 8d 93     ........tpwsv...
     394:	a1 a8 a6 a4 a3 98 89 85 7b 70 6e 6a 5c 56 5c 4a     ........{pnj\V\J
     3a4:	43 52 5d 6b 6f 89 97 8e 9f a0 97 97 8f 88 88 7f     CR]ko...........
     3b4:	7e 83 7f 86 8b 8d 98 9d a3 a8 a5 a1 98 8c 7b 6b     ~.............{k
     3c4:	55 49 44 2a 28 39 4a 5d 6e 93 9f a6 b6 b4 ab a4     UID*(9J]n.......
     3d4:	96 86 82 74 70 76 76 7d 87 92 9f aa b2 b5 b1 aa     ...tpvv}........
     3e4:	9b 89 76 63 4e 44 3e 2b 25 2d 3d 5b 6b 81 a2 a7     ..vcND>+%-=[k...
     3f4:	ad ba b0 a6 9e 8d 83 78 70 70 72 79 83 8c 9c a9     .......xppry....
     404:	b2 bc b8 b4 aa 96 85 71 5b 4b 45 38 28 27 2d 3e     .......q[KE8('->
     414:	5e 6c 7f a4 a5 ab bb ae a7 9d 8c 84 76 6f 73 73     ^l..........voss
     424:	7c 88 92 a2 b1 ba be bc b4 a6 91 7d 68 51 48 3d     |..........}hQH=
     434:	28 22 21 2a 49 5a 6b 8f 9c a5 b6 b6 b2 aa 9c 92     ("!*IZk.........
     444:	84 77 75 73 77 7e 86 95 a2 ae b7 b9 b8 af a1 90     .wusw~..........
     454:	7b 67 54 4a 3e 2c 25 29 36 4d 58 71 93 8d 9f b5     {gTJ>,%)6MXq....
     464:	a9 ad ab a0 99 88 83 83 79 7d 84 85 8f 98 a3 a8     ........y}......
     474:	a6 ab a5 95 8b 7d 6c 5d 5a 57 4c 49 4a 52 5a 5b     .....}l]ZWLIJRZ[
     484:	66 72 75 79 85 8c 90 95 98 99 94 90 90 8e 8c 8b     fruy............
     494:	8e 90 8f 92 93 90 8d 8c 87 82 7f 7d 7b 78 79 7b     ...........}{xy{
     4a4:	79 76 74 73 73 72 70 70 6f 6e 6f 70 72 75 78 7c     yvtssrpponoprux|
     4b4:	80 82 85 87 88 89 8b 8d 8f 90 8f 8f 8e 8c 8b 8a     ................
     4c4:	88 87 86 85 84 84 83 83 82 81 80 7f 7e 7d 7b 7a     ............~}{z
     4d4:	78 75 73 72 70 6f 6f 70 72 73 75 78 7a 7c 7e 81     xusrpooprsuxz|~.
     4e4:	83 85 87 88 8a 8b 8b 8b 8b 8a 8a 89 88 87 86 85     ................
     4f4:	84 84 83 82 81 80 80 7f 7f 7e 7d 7d 7c 7b 7b 7a     .........~}}|{{z
     504:	7a 7a 7a 7a 7a 7a 7b 7c 7c 7d 7e 7f 80 80 81 82     zzzzzz{||}~.....
     514:	82 82 83 83 83 83 83 82 82 82 82 81 81 81 81 81     ................
     524:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
     534:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
     544:	81 81 81 81 81 81 81 81 80 80 80 80 80 80 80 80     ................
     554:	80 80 80 80 80 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f     ................
     564:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 81     ................
     574:	81 81 81 81 81 81 80 80 80 80 80 80 80 80 80 80     ................
     584:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
     594:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
     5a4:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
     5b4:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
     5c4:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
     5d4:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
     5e4:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
     5f4:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
     604:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
     614:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
     624:	80 80 80 80 80 80 80 80 81 80 7f 81 82 80 7f 80     ................
     634:	80 7f 7f 80 80 7f 80 80 80 80 80 80 80 80 80 80     ................
     644:	80 80 7f 80 80 80 80 80 7f 80 80 80 80 80 80 80     ................
     654:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
     664:	7f 80 80 80 80 80 80 80 80 80 80 81 80 80 80 80     ................
     674:	80 80 81 81 7f 80 80 7f 80 80 80 80 80 80 80 80     ................
     684:	80 80 80 80 80 7f 80 80 80 80 80 81 80 7f 80 80     ................
     694:	7f 81 80 81 81 80 80 7f 81 7f 80 7f 7f 80 80 81     ................
     6a4:	80 81 80 80 80 80 80 7f 80 80 80 80 80 82 80 81     ................
     6b4:	7f 80 80 7f 7f 80 81 7f 81 80 81 80 7f 80 80 7e     ...............~
     6c4:	82 81 7f 7f 80 80 80 7e 81 81 80 80 81 81 80 7f     .......~........
     6d4:	80 81 80 7e 80 80 81 7f 82 80 81 7d 81 7f 7f 81     ...~.......}....
     6e4:	7e 83 7d 83 80 82 7e 82 7e 7f 80 81 81 81 7e 80     ~.}...~.~.....~.
     6f4:	82 7d 81 7f 81 7e 80 7c 81 81 82 83 7d 7e 80 81     .}...~.|....}~..
     704:	7e 82 7f 82 81 7e 82 7f 7d 7d 82 80 7f 81 7f 83     ~....~..}}......
     714:	7d 7f 81 80 80 7f 80 7f 82 7e 7e 7d 7f 81 81 82     }........~~}....
     724:	80 82 7e 82 80 83 82 80 80 7d 81 7e 82 7f 82 82     ..~......}.~....
     734:	7f 80 80 82 7f 82 7e 82 82 7d 80 80 82 81 80 7d     ......~..}.....}
     744:	7f 82 7d 81 7f 81 84 80 7f 7e 82 7e 80 81 7f 82     ..}......~.~....
     754:	7f 80 7f 80 7e 7f 83 7e 81 7e 7c 83 80 7f 80 81     ....~..~.~|.....
     764:	7f 82 7f 7b 85 7f 81 84 7f 81 80 80 7c 81 7e 7f     ...{........|.~.
     774:	83 7b 81 83 82 82 80 81 81 81 79 80 82 7e 82 7e     .{........y..~.~
     784:	7f 84 82 7d 81 82 7d 81 7b 7c 84 80 7d 81 81 80     ...}..}.{|..}...
     794:	83 81 7c 81 81 7f 82 7f 80 84 81 7d 80 82 7f 7e     ..|........}...~
     7a4:	80 81 7f 7e 7f 80 81 7e 7f 82 82 81 7e 81 82 7f     ...~...~....~...
     7b4:	80 7f 80 81 80 80 82 82 7f 80 80 80 81 7f 7e 80     ..............~.
     7c4:	82 7f 80 81 81 81 7f 80 80 7f 7f 7f 81 80 81 81     ................
     7d4:	81 80 7e 80 7f 7e 81 81 80 81 81 80 80 80 7f 80     ..~..~..........
     7e4:	7f 80 80 7f 7f 80 81 80 80 7f 80 81 80 80 7f 7f     ................
     7f4:	80 81 80 80 80 80 81 80 80 80 81 81 80 80 80 7f     ................
     804:	7f 80 80 80 81 80 7f 80 81 80 80 7f 7f 81 81 80     ................
     814:	7f 7f 80 81 81 80 80 81 81 80 80 81 7f 80 80 80     ................
     824:	80 80 80 80 80 80 80 7f 7f 7f 80 80 7f 80 80 80     ................
     834:	7f 7e 80 80 81 80 80 80 81 80 81 81 80 81 81 80     .~..............
     844:	80 80 81 81 80 80 80 81 80 80 7f 80 80 81 80 7f     ................
     854:	7f 7f 7f 80 80 80 80 80 7f 80 80 80 80 80 7f 7f     ................
     864:	80 81 80 80 80 80 80 80 81 80 80 80 80 80 80 80     ................
     874:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
     884:	80 80 80 80 7f 7f 80 80 80 80 80 80 80 81 80 80     ................
     894:	80 80 81 80 80 80 80 80 80 80 81 80 80 80 80 80     ................
     8a4:	7f 7f 7f 80 80 80 80 80 7f 7f 80 81 81 80 80 80     ................
     8b4:	80 81 81 81 80 80 81 81 81 81 80 80 80 80 80 80     ................
     8c4:	80 80 80 7f 80 80 7f 7f 7f 7f 7f 7f 7f 80 80 80     ................
     8d4:	80 80 80 80 80 80 80 80 80 81 81 81 81 81 81 81     ................
     8e4:	81 81 81 81 80 80 80 81 81 80 80 80 7f 7f 80 80     ................
     8f4:	7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 80 80 80     ................
     904:	81 81 81 81 81 80 81 81 81 82 81 80 80 81 81 81     ................
     914:	81 81 80 80 80 80 80 80 7f 7f 7f 7f 7f 7f 7f 7f     ................
     924:	7f 7f 7f 7e 7e 7f 7f 7f 7f 80 80 80 80 81 82 82     ...~~...........
     934:	82 82 82 82 82 82 82 82 82 81 81 81 81 81 81 80     ................
     944:	7f 7d 7d 7d 7d 7c 7c 7c 7c 7d 7d 7d 7d 7d 7e 7f     .}}}}||||}}}}}~.
     954:	80 81 81 82 82 83 84 84 84 84 84 85 85 85 85 84     ................
     964:	83 83 83 83 82 81 80 7e 7c 7c 7c 7b 7a 79 77 76     .......~|||{zywv
     974:	77 79 79 79 7a 7c 7e 81 84 85 86 86 87 87 89 8a     wyyyz|~.........
     984:	8b 8b 8a 89 8a 8b 8b 8b 89 85 82 81 80 7f 7b 75     ..............{u
     994:	6f 6b 68 65 62 5d 59 5c 69 7b 8a 91 92 8f 8c 8d     okheb]Y\i{......
     9a4:	92 96 92 89 81 7d 7f 88 93 9a 9b 98 95 93 91 90     .....}..........
     9b4:	8d 85 7b 73 6e 6b 69 66 5f 54 4b 4b 58 6f 84 92     ..{snkif_TKKXo..
     9c4:	99 98 91 8c 8e 90 8d 88 83 7b 75 79 85 8f 97 9b     .........{uy....
     9d4:	9a 94 90 90 91 90 8b 83 78 70 6f 73 77 77 71 63     ........xposwwqc
     9e4:	55 4c 48 53 6d 87 94 98 95 91 8f 94 98 93 87 7b     ULHSm..........{
     9f4:	73 73 7e 8d 96 96 93 91 91 95 9a 99 8e 81 78 73     ss~...........xs
     a04:	75 7a 7c 78 70 68 5e 58 54 50 55 69 81 90 97 98     uz|xph^XTPUi....
     a14:	95 91 91 92 8c 81 77 73 75 7f 8c 94 94 91 91 93     ......wsu.......
     a24:	95 96 92 88 7d 78 79 7b 7d 7e 7b 76 72 6e 67 5e     ....}xy{}~{vrng^
     a34:	54 4a 51 6c 8a 99 9a 95 92 92 97 9a 8f 7c 6f 6f     TJQl.........|oo
     a44:	79 87 93 95 8e 8a 90 99 9c 98 8d 7f 76 77 7e 81     y...........vw~.
     a54:	7c 77 75 77 7a 79 6f 5e 52 48 4b 62 82 93 90 8b     |wuwzyo^RHKb....
     a64:	8e 97 9c 9c 8f 7a 6b 6e 7d 88 8c 8b 8a 8b 94 9f     .....zkn}.......
     a74:	a0 94 87 80 7e 80 82 80 7a 76 7b 83 85 80 76 6b     ....~...zv{...vk
     a84:	61 5b 52 4d 5a 77 8e 93 92 93 98 99 98 90 7e 6f     a[RMZw........~o
     a94:	6d 78 82 87 88 8a 8d 94 9b 9c 92 87 81 81 81 80     mx..............
     aa4:	7c 78 76 7c 84 86 81 79 72 6b 64 5a 4c 49 61 84     |xv|...yrkdZLIa.
     ab4:	96 93 8d 91 9a 9e 98 89 75 6a 71 80 88 86 85 8b     ........ujq.....
     ac4:	94 9c 9f 97 8a 82 83 86 81 79 75 76 7c 84 88 85     .........yuv|...
     ad4:	7d 78 76 72 66 59 4b 43 54 78 96 95 89 8a 9b a4     }xvrfYKCTx......
     ae4:	9c 89 74 6a 6d 7c 85 83 80 89 98 a1 9e 95 8d 87     ..tjm|..........
     af4:	86 87 82 78 73 79 83 87 86 84 84 83 82 7c 70 62     ...xsy.......|pb
     b04:	57 53 4d 52 6a 8b 98 92 8f 99 a2 9a 89 78 6e 6d     WSMRj........xnm
     b14:	74 7f 83 83 89 96 9f 9d 95 8e 89 85 80 7d 79 76     t............}yv
     b24:	79 80 86 86 85 85 86 82 7b 73 6a 62 5b 55 4d 50     y.......{sjb[UMP
     b34:	6a 8e 9e 95 8c 94 a1 9d 89 75 6c 6e 77 82 86 85     j........ulnw...
     b44:	8a 99 a4 a0 91 88 88 88 82 7b 78 79 7e 85 89 88     .........{xy~...
     b54:	84 84 86 84 7b 71 6a 66 63 5e 56 4e 56 76 98 9f     ....{qjfc^VNVv..
     b64:	8e 86 92 a0 96 7d 6c 6b 73 7c 83 86 88 90 9c a2     .....}lks|......
     b74:	99 8a 84 87 87 80 78 78 7e 85 89 89 88 86 88 88     ......xx~.......
     b84:	83 79 70 6e 6d 6a 63 5d 57 57 6b 8b 9e 94 85 89     .ypnmjc]WWk.....
     b94:	99 9c 85 6f 6c 76 7d 7e 82 88 8f 96 9b 98 8c 83     ...olv}~........
     ba4:	84 87 83 79 76 7e 86 88 85 85 88 88 85 80 7a 74     ...yv~........zt
     bb4:	70 70 6d 69 64 61 5c 5a 6d 8c 9f 93 84 88 9a 9c     ppmida\Zm.......
     bc4:	85 70 6f 7a 81 82 83 88 90 97 9a 94 89 83 86 88     .poz............
     bd4:	82 79 7a 83 89 86 83 84 88 87 82 7c 78 75 72 6f     .yz........|xuro
     be4:	6a 68 65 62 59 58 6f 92 9f 8d 7f 8b 9f 9b 7e 6c     jhebYXo.......~l
     bf4:	71 7f 83 7f 80 8a 93 99 98 91 88 86 8a 89 80 77     q..............w
     c04:	7c 86 8b 86 84 87 8b 89 81 7b 78 76 74 70 6b 66     |........{xvtpkf
     c14:	64 62 5b 5a 71 92 9c 8a 7f 8d 9f 97 7b 6c 74 80     db[Zq.......{lt.
     c24:	80 7d 7f 88 92 97 95 8d 85 86 8b 87 7d 78 80 88     .}..........}x..
     c34:	88 82 82 88 8a 86 80 7c 79 76 72 6e 6a 67 64 5f     .......|yvrnjgd_
     c44:	57 5e 7b 97 97 85 83 97 a2 90 77 71 7c 83 7f 7c     W^{.......wq|..|
     c54:	81 8b 94 96 92 8b 89 8d 8c 83 7b 7d 84 85 81 80     ..........{}....
     c64:	85 89 88 84 81 7d 79 75 70 6b 67 64 60 57 54 68     .....}yupkgd`WTh
     c74:	88 97 8a 81 8f a3 9c 82 75 7b 83 80 79 7a 83 8e     ........u{..yz..
     c84:	95 93 8c 8b 92 93 8a 7e 7e 84 86 81 7e 81 86 89     .......~~...~...
     c94:	87 83 7e 7d 7b 76 6d 68 67 64 5b 53 5d 7a 90 8b     ..~}{vmhgd[S]z..
     ca4:	80 89 9d a0 8d 7d 7c 83 82 7b 76 7a 86 8f 8f 8a     .....}|..{vz....
     cb4:	8a 92 95 8e 83 81 85 85 80 7d 7e 83 86 85 82 7f     .........}~.....
     cc4:	7f 7f 7b 73 6d 6c 69 62 59 5a 6d 83 86 7f 82 93     ..{smlibYZm.....
     cd4:	9e 95 87 83 87 88 82 7a 78 80 89 8a 86 86 8e 93     .......zx.......
     ce4:	90 89 86 87 86 83 7f 7d 7e 81 83 81 7e 7f 81 7e     .......}~...~..~
     cf4:	78 74 73 71 6c 67 63 67 73 7d 7d 7b 82 8e 92 8c     xtsqlgcgs}}{....
     d04:	88 89 8c 89 82 7e 7f 82 84 83 81 84 89 8b 89 86     .....~..........
     d14:	87 87 86 82 80 7f 7f 80 80 7e 7e 7f 80 7e 7c 7c     .........~~..~||
     d24:	7c 7b 79 78 78 78 78 79 7a 7c 7d 7e 7e 80 81 81     |{yxxxxyz|}~~...
     d34:	81 81 82 82 81 81 81 81 81 81 81 81 82 82 82 82     ................
     d44:	82 82 82 82 82 82 82 82 81 81 80 80 80 7f 7f 7f     ................
     d54:	7f 7f 7f 7f 7f 7f 7f 7f 7f 80 80 80 80 80 80 80     ................
     d64:	81 81 81 81 81 81 81 81 81 81 81 81 81 81 81 81     ................
     d74:	81 81 80 80 80 80 80 80 80 7f 7f 7f 7f 7f 7f 7f     ................
     d84:	7f 7f 7f 7f 7f 7f 7f 7f 7f 80 80 80 80 80 80 80     ................
     d94:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
     da4:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
     db4:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
     dc4:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
     dd4:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
     de4:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
     df4:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
     e04:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
     e14:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
     e24:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
     e34:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
     e44:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
     e54:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
     e64:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
     e74:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
     e84:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
     e94:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 83 84     ................
     ea4:	81 7e 7e 7f 7f 7f 7f 7f 80 80 81 81 81 80 81 81     .~~.............
     eb4:	81 8c 7c 72 85 83 77 80 85 7c 7b 7f 8f 82 75 8f     ..|r..w..|{...u.
     ec4:	85 74 84 86 76 7c 83 7f 82 7f 7d 82 83 7e 80 83     .t..v|....}..~..
     ed4:	7d 7e 82 7e 7d 81 80 7d 81 80 7e 80 80 7f 7f 81     }~.~}..}..~.....
     ee4:	81 81 7f 7f 80 82 84 7f 7f 81 7e 7f 82 7f 7e 81     ..........~...~.
     ef4:	80 7f 81 81 7f 81 80 83 87 80 80 82 7f 7e 7f 7e     .............~.~
     f04:	7d 7f 7f 7f 80 80 80 81 81 7f 80 80 7f 7f 7e 7f     }.............~.
     f14:	7f 7f 80 7f 80 80 81 81 81 81 81 81 81 82 81 82     ................
     f24:	82 81 81 81 81 81 81 81 81 80 80 80 7f 7f 7f 7e     ...............~
     f34:	7e 7e 7d 7e 7d 7c 7d 7b 7b 7d 7b 7c 7e 7c 7f 80     ~~}~}|}{{}{|~|..
     f44:	80 82 82 83 85 84 85 86 85 86 86 85 86 86 85 86     ................
     f54:	85 85 85 83 83 83 80 81 7f 7d 7d 7a 79 78 75 75     .........}}zyxuu
     f64:	73 70 71 70 6f 72 71 74 79 79 7f 84 86 8c 8e 8f     spqporqtyy......
     f74:	93 92 92 92 90 8f 8e 8b 8c 8b 8a 8b 8b 8a 8b 88     ................
     f84:	87 85 81 7d 78 72 6c 66 5f 5b 55 54 57 58 62 69     ...}xrlf_[UTWXbi
     f94:	70 7f 85 8e 99 98 9d 9d 97 97 90 8b 89 84 83 85     p...............
     fa4:	86 8b 91 93 98 9a 99 99 94 8f 8a 83 7d 77 73 6f     ............}wso
     fb4:	6c 6c 6a 68 67 61 5e 5d 5d 5e 63 69 6d 78 7f 87     lljhga^]]^cimx..
     fc4:	93 96 9a 9e 99 98 95 8d 8b 86 81 83 83 84 8a 8c     ................
     fd4:	90 94 94 94 94 8f 8b 89 81 7f 7c 77 77 74 72 73     ..........|wwtrs
     fe4:	71 6f 6c 66 61 5e 5c 5b 60 65 6c 76 7e 88 92 96     qolfa^\[`elv~...
     ff4:	9c 9c 9a 98 92 8d 88 83 81 80 82 85 89 8e 92 95     ................
    1004:	98 96 96 92 8d 8a 83 7f 7c 76 76 73 71 73 71 6f     ........|vvsqsqo
    1014:	6d 67 62 5f 5b 5b 5e 61 6a 71 7b 85 8d 95 99 9b     mgb_[[^ajq{.....
    1024:	9b 97 95 8f 8b 88 84 84 85 87 8c 8f 93 96 97 97     ................
    1034:	95 92 8d 88 83 7e 7a 76 73 71 70 6f 6e 6d 6a 66     .....~zvsqponmjf
    1044:	60 5d 5b 5b 60 64 6b 75 7c 87 8f 95 9a 9b 99 97     `][[`dku|.......
    1054:	93 8f 8b 87 86 86 87 8a 8d 90 94 96 96 96 93 8f     ................
    1064:	8c 86 81 7f 7a 78 77 73 74 73 6f 71 6d 68 66 5f     ....zxwstsoqmhf_
    1074:	5d 5d 5d 63 69 70 79 81 8a 8f 94 97 95 96 92 8d     ]]]cipy.........
    1084:	8d 87 86 87 85 8a 8c 8e 93 94 94 95 93 91 8e 8a     ................
    1094:	85 82 7f 7b 7b 79 77 78 74 73 74 6d 6b 68 5e 5f     ...{{ywxtstmkh^_
    10a4:	5b 5a 62 64 6e 77 7d 88 8d 91 96 94 93 92 8d 8b     [Zbdnw}.........
    10b4:	88 86 87 86 89 8d 8f 93 95 96 97 94 92 8f 8a 87     ................
    10c4:	83 7f 7e 7b 7a 7a 79 78 76 74 72 6e 6a 65 60 5e     ..~{zzyxvtrnje`^
    10d4:	5b 5e 62 66 70 77 7f 88 8c 90 93 92 92 90 8c 8b     [^bfpw..........
    10e4:	88 87 88 88 8a 8d 8f 93 95 96 96 94 92 8f 8a 87     ................
    10f4:	83 7f 7e 7c 7b 7b 79 79 78 75 73 6f 6b 66 61 5e     ..~|{{yyxusokfa^
    1104:	5b 5b 5f 65 6b 75 7c 83 8b 8e 91 93 90 90 8e 8a     [[_eku|.........
    1114:	8a 87 87 89 8a 8d 91 92 95 97 96 96 93 8f 8c 88     ................
    1124:	84 81 7e 7d 7b 7a 7b 79 79 79 76 73 70 6a 65 61     ..~}{z{yyyvspjea
    1134:	5c 5c 5c 60 68 6d 77 7f 84 8d 8f 91 93 8f 8e 8c     \\\`hmw.........
    1144:	88 88 87 86 89 8a 8d 91 93 96 97 96 95 92 8f 8c     ................
    1154:	87 84 81 7e 7d 7c 7b 7c 7b 7a 79 78 74 71 6c 66     ...~}|{|{zyxtqlf
    1164:	64 5f 5e 5f 60 67 6c 73 7b 80 87 8b 8d 90 8e 8e     d_^_`gls{.......
    1174:	8c 8a 89 87 88 89 89 8d 8e 91 94 94 95 94 91 90     ................
    1184:	8c 89 87 82 81 7f 7d 7f 7d 7c 7c 7a 79 78 74 72     ......}.}||zyxtr
    1194:	6e 69 67 63 62 62 63 67 6c 71 78 7e 82 88 8a 8b     nigcbbcglqx~....
    11a4:	8d 8b 8b 8a 87 88 88 87 8b 8b 8d 91 91 94 94 93     ................
    11b4:	93 90 8e 8c 88 86 83 81 80 7f 7e 7d 7c 7b 7a 79     ..........~}|{zy
    11c4:	77 75 72 6e 6a 66 63 62 62 64 68 6c 72 78 7d 82     wurnjfcbbdhlrx}.
    11d4:	86 89 8b 8c 8b 8b 8a 89 89 88 89 8a 8c 8e 90 92     ................
    11e4:	93 93 93 92 90 8e 8b 88 85 83 81 80 7f 7f 7e 7d     ..............~}
    11f4:	7c 7b 7a 78 76 73 6f 6c 69 65 64 64 64 68 6b 70     |{zxvsoliedddhkp
    1204:	76 7a 80 84 86 89 8a 8a 8b 89 89 89 88 89 8a 8b     vz..............
    1214:	8e 8f 90 92 92 93 92 90 8f 8c 89 87 84 82 81 80     ................
    1224:	7f 7e 7e 7d 7b 7a 79 77 75 72 6e 6b 68 66 64 64     .~~}{zywurnkhfdd
    1234:	66 6a 6d 72 77 7b 80 83 86 89 89 8a 89 89 89 88     fjmrw{..........
    1244:	89 8a 8a 8d 8d 8f 91 91 92 91 90 90 8d 8b 89 87     ................
    1254:	85 83 82 81 80 80 7f 7d 7c 7b 79 78 75 73 70 6c     .......}|{yxuspl
    1264:	6a 67 66 66 67 69 6c 70 74 78 7d 80 84 86 88 89     jgffgilptx}.....
    1274:	8a 8a 8a 8a 8a 8b 8b 8c 8d 8e 8f 90 90 90 90 8f     ................
    1284:	8e 8c 8a 88 86 84 83 82 81 80 7f 7e 7d 7b 7a 78     ...........~}{zx
    1294:	76 74 72 6f 6c 69 68 67 67 68 6b 6e 72 76 7a 7e     vtrolihgghknrvz~
    12a4:	82 85 87 89 8a 8a 8a 8a 8a 8b 8b 8c 8c 8d 8f 8f     ................
    12b4:	90 90 90 8f 8e 8d 8b 89 87 85 83 82 81 80 80 7f     ................
    12c4:	7e 7c 7b 7a 78 76 73 70 6d 6b 68 67 66 67 6a 6d     ~|{zxvspmkhgfgjm
    12d4:	70 74 79 7d 81 84 86 88 89 89 89 89 89 8a 8a 8b     pty}............
    12e4:	8c 8d 8e 8f 8f 90 90 8f 8e 8d 8b 89 87 86 84 82     ................
    12f4:	81 81 80 80 7f 7e 7d 7b 7a 77 75 73 6f 6d 6b 68     .....~}{zwusomkh
    1304:	67 67 68 6b 6e 72 76 7a 7e 82 84 86 88 88 89 89     gghknrvz~.......
    1314:	89 89 89 8a 8b 8c 8d 8e 8f 8f 90 90 8f 8e 8c 8a     ................
    1324:	89 87 85 83 82 81 81 80 80 7f 7e 7d 7b 79 77 75     ..........~}{ywu
    1334:	72 70 6d 6b 6a 6a 69 6a 6c 70 73 76 7a 7d 80 83     rpmkjjijlpsvz}..
    1344:	85 86 87 88 88 89 89 89 8a 8b 8c 8c 8d 8e 8e 8f     ................
    1354:	8e 8e 8d 8b 8a 88 87 85 84 83 82 81 80 80 7f 7e     ...............~
    1364:	7d 7b 7a 78 76 74 72 70 6e 6c 6b 6a 6b 6c 6e 71     }{zxvtrpnlkjklnq
    1374:	75 78 7c 80 83 85 86 87 88 89 89 89 89 89 8a 8b     ux|.............
    1384:	8b 8c 8d 8e 8e 8e 8e 8d 8c 8a 89 87 86 84 83 82     ................
    1394:	81 81 80 80 7f 7e 7c 7b 79 78 75 73 71 6f 6d 6c     .....~|{yxusqoml
    13a4:	6b 6b 6c 6e 70 73 77 7a 7d 80 83 85 86 87 88 88     kklnpswz}.......
    13b4:	88 89 89 89 8a 8b 8c 8d 8e 8e 8e 8e 8d 8d 8b 8a     ................
    13c4:	88 87 85 84 82 81 81 80 7f 7e 7d 7c 7b 79 77 75     .........~}|{ywu
    13d4:	73 71 6f 6d 6c 6c 6c 6d 6e 71 74 77 7b 7e 81 83     sqomlllmnqtw{~..
    13e4:	85 86 87 88 88 88 88 89 89 8a 8b 8c 8d 8e 8e 8e     ................
    13f4:	8e 8d 8c 8b 89 88 86 84 83 81 80 80 7f 7e 7d 7c     .............~}|
    1404:	7b 7a 79 77 75 72 71 6f 6e 6d 6d 6d 6e 6f 72 76     {zywurqonmmmnorv
    1414:	79 7c 7f 82 84 86 87 87 88 89 89 89 89 8a 8a 8b     y|..............
    1424:	8c 8d 8e 8e 8e 8d 8c 8b 89 88 86 84 83 81 80 7f     ................
    1434:	7f 7e 7d 7c 7b 7a 79 78 76 74 73 71 70 70 6f 6f     .~}|{zyxvtsqppoo
    1444:	70 71 72 74 77 7a 7d 80 82 84 86 87 88 89 8a 8a     pqrtwz}.........
    1454:	8a 8b 8b 8c 8c 8d 8d 8d 8d 8c 8c 8b 89 88 86 84     ................
    1464:	82 81 7f 7e 7d 7c 7b 7a 79 78 77 76 74 73 72 71     ...~}|{zyxwvtsrq
    1474:	71 70 71 71 72 74 76 78 7b 7d 80 82 84 86 87 88     qpqqrtvx{}......
    1484:	89 8a 8a 8b 8b 8b 8b 8c 8c 8c 8c 8c 8b 8b 89 88     ................
    1494:	87 85 83 81 80 7f 7e 7d 7c 7b 7b 7b 7a 79 77 76     ......~}|{{{zywv
    14a4:	75 74 72 72 72 72 72 73 74 75 78 7a 7c 7e 80 82     utrrrrrstuxz|~..
    14b4:	84 85 87 87 88 89 8a 8a 8b 8b 8c 8c 8c 8c 8c 8c     ................
    14c4:	8b 8a 89 87 85 84 82 81 7f 7e 7d 7c 7b 7a 79 78     .........~}|{zyx
    14d4:	78 77 76 75 74 74 73 73 73 73 74 75 77 79 7b 7e     xwvuttsssstuwy{~
    14e4:	80 82 84 85 86 87 88 88 89 89 89 89 89 8a 8a 8a     ................
    14f4:	8a 8a 8a 89 88 87 86 84 83 81 80 7f 7e 7d 7c 7c     ............~}||
    1504:	7b 7b 7a 79 79 78 77 77 76 76 76 76 76 77 77 78     {{zyyxwwvvvvvwwx
    1514:	7a 7b 7d 7e 80 81 82 83 84 85 86 86 87 87 88 88     z{}~............
    1524:	88 89 89 89 89 88 88 88 87 86 85 84 83 82 81 80     ................
    1534:	7f 7e 7d 7c 7b 7b 7b 7a 79 79 78 78 77 77 77 77     .~}|{{{zyyxxwwww
    1544:	78 78 78 78 7a 7b 7c 7e 7f 81 82 83 84 84 85 86     xxxxz{|~........
    1554:	86 86 87 87 87 88 88 88 88 88 87 87 86 85 85 83     ................
    1564:	82 81 80 7f 7f 7e 7d 7d 7d 7c 7c 7c 7c 7c 7c 7b     .....~}}}||||||{
    1574:	7a 7a 79 79 79 79 79 7a 7a 7b 7d 7e 7f 80 81 82     zzyyyyyzz{}~....
    1584:	82 82 83 83 83 83 84 84 84 85 85 85 85 86 85 85     ................
    1594:	85 84 83 83 82 82 81 80 80 80 7f 7f 7f 7f 7e 7e     ..............~~
    15a4:	7e 7e 7e 7d 7d 7c 7c 7b 7b 7b 7b 7b 7b 7c 7c 7d     ~~~}}||{{{{{{||}
    15b4:	7e 7f 80 80 80 80 81 81 81 81 82 82 82 83 83 84     ~...............
    15c4:	84 85 85 85 85 84 84 83 82 82 81 81 80 80 80 80     ................
    15d4:	80 80 80 80 80 7f 7f 7e 7e 7d 7d 7d 7d 7d 7d 7d     .......~~}}}}}}}
    15e4:	7d 7d 7e 7e 7f 7f 80 80 80 80 80 80 80 80 80 80     }}~~............
    15f4:	80 81 81 81 81 81 82 82 82 82 82 82 81 81 81 81     ................
    1604:	80 80 81 81 81 81 81 81 81 80 80 80 80 80 80 7f     ................
    1614:	7f 7e 7e 7e 7e 7e 7f 7f 7f 7f 7f 7f 7f 7f 7f 80     .~~~~~..........
    1624:	80 80 80 80 80 80 80 81 81 81 81 81 81 81 81 81     ................
    1634:	80 80 80 80 80 80 80 80 80 81 81 81 80 80 80 80     ................
    1644:	80 7f 80 80 80 80 80 80 80 80 7f 7f 80 80 80 80     ................
    1654:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    1664:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    1674:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    1684:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    1694:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    16a4:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    16b4:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    16c4:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    16d4:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    16e4:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    16f4:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    1704:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    1714:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    1724:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    1734:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    1744:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    1754:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    1764:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    1774:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    1784:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    1794:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    17a4:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    17b4:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    17c4:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    17d4:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    17e4:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    17f4:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    1804:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    1814:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    1824:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    1834:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    1844:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    1854:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    1864:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    1874:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    1884:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    1894:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    18a4:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    18b4:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    18c4:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    18d4:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    18e4:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    18f4:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    1904:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    1914:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    1924:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    1934:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    1944:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    1954:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    1964:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    1974:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    1984:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    1994:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    19a4:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    19b4:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    19c4:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    19d4:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    19e4:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    19f4:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    1a04:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    1a14:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    1a24:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    1a34:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    1a44:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    1a54:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    1a64:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    1a74:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    1a84:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    1a94:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    1aa4:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    1ab4:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    1ac4:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
    1ad4:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................

00001ae4 <__c.2072>:
    1ae4:	20 46 72 65 65 20 4d 65 6d 6f 72 79 3a 20 00         Free Memory: .

00001af3 <__c.2065>:
    1af3:	54 6f 74 61 6c 20 4d 65 6d 6f 72 79 3a 20 00        Total Memory: .

00001b02 <__c.1962>:
    1b02:	45 72 72 6f 72 20 69 6e 20 67 65 74 74 69 6e 67     Error in getting
    1b12:	20 63 6c 75 73 74 65 72 00                           cluster.

00001b1b <__c.1960>:
    1b1b:	45 6e 64 20 6f 66 20 43 6c 75 73 74 65 72 20 43     End of Cluster C
    1b2b:	68 61 69 6e 00                                      hain.

00001b30 <__c.1952>:
    1b30:	20 46 69 6c 65 20 43 72 65 61 74 65 64 21 00         File Created!.

00001b3f <__c.1947>:
    1b3f:	20 46 69 6c 65 20 61 70 70 65 6e 64 65 64 21 00      File appended!.

00001b4f <__c.1944>:
    1b4f:	20 4e 6f 20 66 72 65 65 20 63 6c 75 73 74 65 72      No free cluster
    1b5f:	21 00                                               !.

00001b61 <__c.1935>:
    1b61:	20 45 6e 74 65 72 20 74 65 78 74 20 28 65 6e 64      Enter text (end
    1b71:	20 77 69 74 68 20 7e 29 3a 00                        with ~):.

00001b7b <__c.1933>:
    1b7b:	20 4e 6f 20 66 72 65 65 20 63 6c 75 73 74 65 72      No free cluster
    1b8b:	21 00                                               !.

00001b8d <__c.1931>:
    1b8d:	20 43 72 65 61 74 69 6e 67 20 46 69 6c 65 2e 2e      Creating File..
	...

00001b9e <__c.1927>:
    1b9e:	20 20 46 69 6c 65 20 61 6c 72 65 61 64 79 20 65       File already e
    1bae:	78 69 73 74 69 6e 67 2c 20 61 70 70 65 6e 64 69     xisting, appendi
    1bbe:	6e 67 20 64 61 74 61 2e 2e 00                       ng data...

00001bc8 <__c.1874>:
    1bc8:	49 6e 76 61 6c 69 64 20 66 69 6c 65 4e 61 6d 65     Invalid fileName
    1bd8:	2e 2e 00                                            ...

00001bdb <__c.1844>:
    1bdb:	45 72 72 6f 72 20 69 6e 20 67 65 74 74 69 6e 67     Error in getting
    1beb:	20 63 6c 75 73 74 65 72 00                           cluster.

00001bf4 <__c.1794>:
    1bf4:	45 72 72 6f 72 20 69 6e 20 67 65 74 74 69 6e 67     Error in getting
    1c04:	20 63 6c 75 73 74 65 72 00                           cluster.

00001c0d <__c.1786>:
    1c0d:	52 4f 4f 54 00                                      ROOT.

00001c12 <__c.1784>:
    1c12:	44 49 52 00                                         DIR.

00001c16 <__c.1782>:
    1c16:	20 20 20 00                                            .

00001c1a <__c.1780>:
    1c1a:	46 49 4c 45 00                                      FILE.

00001c1f <__c.1778>:
    1c1f:	20 20 20 00                                            .

00001c23 <__c.1772>:
    1c23:	46 69 6c 65 20 64 65 6c 65 74 65 64 21 00           File deleted!.

00001c31 <__c.1770>:
    1c31:	44 65 6c 65 74 69 6e 67 2e 2e 00                    Deleting...

00001c3c <__c.1765>:
    1c3c:	46 69 6c 65 20 64 6f 65 73 20 6e 6f 74 20 65 78     File does not ex
    1c4c:	69 73 74 21 00                                      ist!.

00001c51 <__c.1791>:
    1c51:	20 49 6e 76 61 6c 69 64 20 6f 70 74 69 6f 6e 21      Invalid option!
	...

00001c62 <__c.1786>:
    1c62:	20 66 69 6c 65 20 6e 61 6d 65 20 74 6f 6f 20 6c      file name too l
    1c72:	6f 6e 67 2e 2e 00                                   ong...

00001c78 <__c.1779>:
    1c78:	45 6e 74 65 72 20 66 69 6c 65 20 6e 61 6d 65 3a     Enter file name:
    1c88:	20 00                                                .

00001c8a <__c.1773>:
    1c8a:	52 65 61 64 20 73 75 63 63 65 73 73 66 75 6c 21     Read successful!
	...

00001c9b <__c.1768>:
    1c9b:	52 65 61 64 20 66 61 69 6c 65 64 2e 2e 00           Read failed...

00001ca9 <__c.1765>:
    1ca9:	57 72 69 74 65 20 73 75 63 63 65 73 73 66 75 6c     Write successful
    1cb9:	21 00                                               !.

00001cbb <__c.1763>:
    1cbb:	57 72 69 74 65 20 66 61 69 6c 65 64 2e 2e 00        Write failed...

00001cca <__c.1759>:
    1cca:	20 45 6e 74 65 72 20 74 65 78 74 20 28 45 6e 64      Enter text (End
    1cda:	20 77 69 74 68 20 7e 29 3a 00                        with ~):.

00001ce4 <__c.1755>:
    1ce4:	45 72 61 73 65 64 21 00                             Erased!.

00001cec <__c.1753>:
    1cec:	45 72 61 73 65 20 66 61 69 6c 65 64 2e 2e 00        Erase failed...

00001cfb <__c.1750>:
    1cfb:	45 6e 74 65 72 20 74 68 65 20 42 6c 6f 63 6b 20     Enter the Block 
    1d0b:	6e 75 6d 62 65 72 20 28 30 30 30 30 2d 39 39 39     number (0000-999
    1d1b:	39 29 3a 00                                         9):.

00001d1f <__c.1747>:
    1d1f:	46 41 54 33 32 20 6f 70 74 69 6f 6e 73 20 64 69     FAT32 options di
    1d2f:	73 61 62 6c 65 64 21 00                             sabled!.

00001d37 <__c.1745>:
    1d37:	3e 20 53 65 6c 65 63 74 20 4f 70 74 69 6f 6e 20     > Select Option 
    1d47:	28 30 2d 39 29 3a 20 00                             (0-9): .

00001d4f <__c.1743>:
    1d4f:	3e 20 39 20 3a 20 52 65 61 64 20 53 44 20 4d 65     > 9 : Read SD Me
    1d5f:	6d 6f 72 79 20 43 61 70 61 63 69 74 79 20 28 54     mory Capacity (T
    1d6f:	6f 74 61 6c 2f 46 72 65 65 29 00                    otal/Free).

00001d7a <__c.1741>:
    1d7a:	3e 20 38 20 3a 20 44 65 6c 65 74 65 20 46 69 6c     > 8 : Delete Fil
    1d8a:	65 00                                               e.

00001d8c <__c.1739>:
    1d8c:	3e 20 37 20 3a 20 57 72 69 74 65 20 46 69 6c 65     > 7 : Write File
	...

00001d9d <__c.1737>:
    1d9d:	3e 20 36 20 3a 20 52 65 61 64 20 46 69 6c 65 00     > 6 : Read File.

00001dad <__c.1735>:
    1dad:	3e 20 35 20 3a 20 47 65 74 20 66 69 6c 65 20 6c     > 5 : Get file l
    1dbd:	69 73 74 00                                         ist.

00001dc1 <__c.1733>:
    1dc1:	3e 20 32 20 3a 20 52 65 61 64 20 73 69 6e 67 6c     > 2 : Read singl
    1dd1:	65 20 42 6c 6f 63 6b 00                             e Block.

00001dd9 <__c.1731>:
    1dd9:	3e 20 31 20 3a 20 57 72 69 74 65 20 73 69 6e 67     > 1 : Write sing
    1de9:	6c 65 20 42 6c 6f 63 6b 00                          le Block.

00001df2 <__c.1729>:
    1df2:	3e 20 30 20 3a 20 45 72 61 73 65 20 42 6c 6f 63     > 0 : Erase Bloc
    1e02:	6b 73 00                                            ks.

00001e05 <__c.1727>:
    1e05:	50 72 65 73 73 20 61 6e 79 20 6b 65 79 2e 2e 2e     Press any key...
	...

00001e16 <__c.1725>:
    1e16:	46 41 54 33 32 20 6e 6f 74 20 66 6f 75 6e 64 21     FAT32 not found!
	...

00001e27 <__c.1723>:
    1e27:	55 6e 6b 6e 6f 77 6e 20 53 44 20 43 61 72 64 20     Unknown SD Card 
    1e37:	44 65 74 65 63 74 65 64 21 00                       Detected!.

00001e41 <__c.1720>:
    1e41:	53 74 61 6e 64 61 72 64 20 43 61 70 61 63 69 74     Standard Capacit
    1e51:	79 20 43 61 72 64 20 28 56 65 72 20 32 2e 78 29     y Card (Ver 2.x)
    1e61:	20 44 65 74 65 63 74 65 64 21 00                     Detected!.

00001e6c <__c.1717>:
    1e6c:	48 69 67 68 20 43 61 70 61 63 69 74 79 20 43 61     High Capacity Ca
    1e7c:	72 64 20 44 65 74 65 63 74 65 64 21 00              rd Detected!.

00001e89 <__c.1713>:
    1e89:	53 74 61 6e 64 61 72 64 20 43 61 70 61 63 69 74     Standard Capacit
    1e99:	79 20 43 61 72 64 20 28 56 65 72 20 31 2e 78 29     y Card (Ver 1.x)
    1ea9:	20 44 65 74 65 63 74 65 64 21 00                     Detected!.

00001eb4 <__c.1709>:
    1eb4:	43 61 72 64 20 49 6e 69 74 69 61 6c 69 7a 61 74     Card Initializat
    1ec4:	69 6f 6e 20 66 61 69 6c 65 64 2e 2e 00              ion failed...

00001ed1 <__c.1707>:
    1ed1:	53 44 20 63 61 72 64 20 6e 6f 74 20 64 65 74 65     SD card not dete
    1ee1:	63 74 65 64 2e 2e 00                                cted...

00001ee8 <__c.1702>:
    1ee8:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    1ef8:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    1f08:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 00           *************.

00001f16 <__c.1700>:
    1f16:	20 20 20 20 53 61 6d 65 65 72 20 6d 69 63 72 6f         Sameer micro
    1f26:	53 44 20 43 61 72 64 20 54 65 73 74 69 6e 67 2e     SD Card Testing.
    1f36:	2e 20 20 00                                         .  .

00001f3a <__c.1698>:
    1f3a:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    1f4a:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    1f5a:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 00           *************.

00001f68 <__ctors_end>:
    1f68:	11 24       	eor	r1, r1
    1f6a:	1f be       	out	0x3f, r1	; 63
    1f6c:	cf e5       	ldi	r28, 0x5F	; 95
    1f6e:	d8 e0       	ldi	r29, 0x08	; 8
    1f70:	de bf       	out	0x3e, r29	; 62
    1f72:	cd bf       	out	0x3d, r28	; 61

00001f74 <__do_copy_data>:
    1f74:	10 e0       	ldi	r17, 0x00	; 0
    1f76:	a0 e6       	ldi	r26, 0x60	; 96
    1f78:	b0 e0       	ldi	r27, 0x00	; 0
    1f7a:	e0 e5       	ldi	r30, 0x50	; 80
    1f7c:	fb e4       	ldi	r31, 0x4B	; 75
    1f7e:	02 c0       	rjmp	.+4      	; 0x1f84 <.do_copy_data_start>

00001f80 <.do_copy_data_loop>:
    1f80:	05 90       	lpm	r0, Z+
    1f82:	0d 92       	st	X+, r0

00001f84 <.do_copy_data_start>:
    1f84:	aa 3b       	cpi	r26, 0xBA	; 186
    1f86:	b1 07       	cpc	r27, r17
    1f88:	d9 f7       	brne	.-10     	; 0x1f80 <.do_copy_data_loop>

00001f8a <__do_clear_bss>:
    1f8a:	12 e0       	ldi	r17, 0x02	; 2
    1f8c:	aa eb       	ldi	r26, 0xBA	; 186
    1f8e:	b0 e0       	ldi	r27, 0x00	; 0
    1f90:	01 c0       	rjmp	.+2      	; 0x1f94 <.do_clear_bss_start>

00001f92 <.do_clear_bss_loop>:
    1f92:	1d 92       	st	X+, r1

00001f94 <.do_clear_bss_start>:
    1f94:	a7 3f       	cpi	r26, 0xF7	; 247
    1f96:	b1 07       	cpc	r27, r17
    1f98:	e1 f7       	brne	.-8      	; 0x1f92 <.do_clear_bss_loop>
    1f9a:	0e 94 8f 1b 	call	0x371e	; 0x371e <main>
    1f9e:	0c 94 a6 25 	jmp	0x4b4c	; 0x4b4c <_exit>

00001fa2 <__bad_interrupt>:
    1fa2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00001fa6 <getFirstSector>:
//Function: to calculate first sector address of any given cluster
//Arguments: cluster number for which first sector is to be found
//return: first sector address
//***************************************************************************
unsigned long getFirstSector(unsigned long clusterNumber)
{
    1fa6:	ef 92       	push	r14
    1fa8:	ff 92       	push	r15
    1faa:	0f 93       	push	r16
    1fac:	1f 93       	push	r17
  return (((clusterNumber - 2) * sectorPerCluster) + firstDataSector);
    1fae:	20 91 d6 02 	lds	r18, 0x02D6
    1fb2:	30 91 d7 02 	lds	r19, 0x02D7
    1fb6:	e0 90 be 00 	lds	r14, 0x00BE
    1fba:	f0 90 bf 00 	lds	r15, 0x00BF
    1fbe:	00 91 c0 00 	lds	r16, 0x00C0
    1fc2:	10 91 c1 00 	lds	r17, 0x00C1
    1fc6:	62 50       	subi	r22, 0x02	; 2
    1fc8:	70 40       	sbci	r23, 0x00	; 0
    1fca:	80 40       	sbci	r24, 0x00	; 0
    1fcc:	90 40       	sbci	r25, 0x00	; 0
    1fce:	40 e0       	ldi	r20, 0x00	; 0
    1fd0:	50 e0       	ldi	r21, 0x00	; 0
    1fd2:	0e 94 28 21 	call	0x4250	; 0x4250 <__mulsi3>
    1fd6:	9b 01       	movw	r18, r22
    1fd8:	ac 01       	movw	r20, r24
    1fda:	2e 0d       	add	r18, r14
    1fdc:	3f 1d       	adc	r19, r15
    1fde:	40 1f       	adc	r20, r16
    1fe0:	51 1f       	adc	r21, r17
}
    1fe2:	b9 01       	movw	r22, r18
    1fe4:	ca 01       	movw	r24, r20
    1fe6:	1f 91       	pop	r17
    1fe8:	0f 91       	pop	r16
    1fea:	ff 90       	pop	r15
    1fec:	ef 90       	pop	r14
    1fee:	08 95       	ret

00001ff0 <displayMemory>:
//Arguments: 1. unsigned char flag. If flag is HIGH, memory will be displayed in KBytes, else in Bytes. 
//			 2. unsigned long memory value
//return: none
//************************************************************
void displayMemory (unsigned char flag, unsigned long memory)
{
    1ff0:	8f 92       	push	r8
    1ff2:	9f 92       	push	r9
    1ff4:	af 92       	push	r10
    1ff6:	bf 92       	push	r11
    1ff8:	cf 92       	push	r12
    1ffa:	df 92       	push	r13
    1ffc:	ef 92       	push	r14
    1ffe:	ff 92       	push	r15
    2000:	0f 93       	push	r16
    2002:	df 93       	push	r29
    2004:	cf 93       	push	r28
    2006:	cd b7       	in	r28, 0x3d	; 61
    2008:	de b7       	in	r29, 0x3e	; 62
    200a:	64 97       	sbiw	r28, 0x14	; 20
    200c:	0f b6       	in	r0, 0x3f	; 63
    200e:	f8 94       	cli
    2010:	de bf       	out	0x3e, r29	; 62
    2012:	0f be       	out	0x3f, r0	; 63
    2014:	cd bf       	out	0x3d, r28	; 61
    2016:	98 2e       	mov	r9, r24
    2018:	6a 01       	movw	r12, r20
    201a:	7b 01       	movw	r14, r22
  unsigned char memoryString[] = "              Bytes"; //19 character long string for memory display
    201c:	de 01       	movw	r26, r28
    201e:	11 96       	adiw	r26, 0x01	; 1
    2020:	e0 e6       	ldi	r30, 0x60	; 96
    2022:	f0 e0       	ldi	r31, 0x00	; 0
    2024:	84 e1       	ldi	r24, 0x14	; 20
    2026:	01 90       	ld	r0, Z+
    2028:	0d 92       	st	X+, r0
    202a:	81 50       	subi	r24, 0x01	; 1
    202c:	e1 f7       	brne	.-8      	; 0x2026 <displayMemory+0x36>
    202e:	0c e0       	ldi	r16, 0x0C	; 12
  unsigned char i;
  for(i=12; i>0; i--) //converting freeMemory into ASCII string
  {
    if(i==5 || i==9) 
	{
	   memoryString[i-1] = ',';  
    2030:	8c e2       	ldi	r24, 0x2C	; 44
    2032:	88 2e       	mov	r8, r24
{
  unsigned char memoryString[] = "              Bytes"; //19 character long string for memory display
  unsigned char i;
  for(i=12; i>0; i--) //converting freeMemory into ASCII string
  {
    if(i==5 || i==9) 
    2034:	05 30       	cpi	r16, 0x05	; 5
    2036:	11 f0       	breq	.+4      	; 0x203c <displayMemory+0x4c>
    2038:	09 30       	cpi	r16, 0x09	; 9
    203a:	29 f4       	brne	.+10     	; 0x2046 <displayMemory+0x56>
	{
	   memoryString[i-1] = ',';  
    203c:	fe 01       	movw	r30, r28
    203e:	e0 0f       	add	r30, r16
    2040:	f1 1d       	adc	r31, r1
    2042:	80 82       	st	Z, r8
	   i--;
    2044:	01 50       	subi	r16, 0x01	; 1
	}
    memoryString[i-1] = (memory % 10) | 0x30;
    2046:	5e 01       	movw	r10, r28
    2048:	a0 0e       	add	r10, r16
    204a:	b1 1c       	adc	r11, r1
    204c:	c7 01       	movw	r24, r14
    204e:	b6 01       	movw	r22, r12
    2050:	2a e0       	ldi	r18, 0x0A	; 10
    2052:	30 e0       	ldi	r19, 0x00	; 0
    2054:	40 e0       	ldi	r20, 0x00	; 0
    2056:	50 e0       	ldi	r21, 0x00	; 0
    2058:	0e 94 47 21 	call	0x428e	; 0x428e <__udivmodsi4>
    205c:	60 63       	ori	r22, 0x30	; 48
    205e:	f5 01       	movw	r30, r10
    2060:	60 83       	st	Z, r22
    memory /= 10;
    2062:	c7 01       	movw	r24, r14
    2064:	b6 01       	movw	r22, r12
    2066:	2a e0       	ldi	r18, 0x0A	; 10
    2068:	30 e0       	ldi	r19, 0x00	; 0
    206a:	40 e0       	ldi	r20, 0x00	; 0
    206c:	50 e0       	ldi	r21, 0x00	; 0
    206e:	0e 94 47 21 	call	0x428e	; 0x428e <__udivmodsi4>
    2072:	c9 01       	movw	r24, r18
    2074:	da 01       	movw	r26, r20
    2076:	6c 01       	movw	r12, r24
    2078:	7d 01       	movw	r14, r26
	if(memory == 0) break;
    207a:	c1 14       	cp	r12, r1
    207c:	d1 04       	cpc	r13, r1
    207e:	e1 04       	cpc	r14, r1
    2080:	f1 04       	cpc	r15, r1
    2082:	11 f0       	breq	.+4      	; 0x2088 <displayMemory+0x98>
//************************************************************
void displayMemory (unsigned char flag, unsigned long memory)
{
  unsigned char memoryString[] = "              Bytes"; //19 character long string for memory display
  unsigned char i;
  for(i=12; i>0; i--) //converting freeMemory into ASCII string
    2084:	01 50       	subi	r16, 0x01	; 1
    2086:	b1 f6       	brne	.-84     	; 0x2034 <displayMemory+0x44>
	}
    memoryString[i-1] = (memory % 10) | 0x30;
    memory /= 10;
	if(memory == 0) break;
  }
  if(flag == HIGH)  memoryString[13] = 'K';
    2088:	f1 e0       	ldi	r31, 0x01	; 1
    208a:	9f 16       	cp	r9, r31
    208c:	11 f4       	brne	.+4      	; 0x2092 <displayMemory+0xa2>
    208e:	8b e4       	ldi	r24, 0x4B	; 75
    2090:	8e 87       	std	Y+14, r24	; 0x0e
  transmitString(memoryString);
    2092:	ce 01       	movw	r24, r28
    2094:	01 96       	adiw	r24, 0x01	; 1
    2096:	0e 94 b2 20 	call	0x4164	; 0x4164 <transmitString>
}
    209a:	64 96       	adiw	r28, 0x14	; 20
    209c:	0f b6       	in	r0, 0x3f	; 63
    209e:	f8 94       	cli
    20a0:	de bf       	out	0x3e, r29	; 62
    20a2:	0f be       	out	0x3f, r0	; 63
    20a4:	cd bf       	out	0x3d, r28	; 61
    20a6:	cf 91       	pop	r28
    20a8:	df 91       	pop	r29
    20aa:	0f 91       	pop	r16
    20ac:	ff 90       	pop	r15
    20ae:	ef 90       	pop	r14
    20b0:	df 90       	pop	r13
    20b2:	cf 90       	pop	r12
    20b4:	bf 90       	pop	r11
    20b6:	af 90       	pop	r10
    20b8:	9f 90       	pop	r9
    20ba:	8f 90       	pop	r8
    20bc:	08 95       	ret

000020be <convertFileName>:
//Function: to convert normal short file name into FAT format
//Arguments: pointer to the file name
//return: 0, if successful else 1.
//***************************************************************************
unsigned char convertFileName (unsigned char *fileName)
{
    20be:	0f 93       	push	r16
    20c0:	1f 93       	push	r17
    20c2:	df 93       	push	r29
    20c4:	cf 93       	push	r28
    20c6:	cd b7       	in	r28, 0x3d	; 61
    20c8:	de b7       	in	r29, 0x3e	; 62
    20ca:	2b 97       	sbiw	r28, 0x0b	; 11
    20cc:	0f b6       	in	r0, 0x3f	; 63
    20ce:	f8 94       	cli
    20d0:	de bf       	out	0x3e, r29	; 62
    20d2:	0f be       	out	0x3f, r0	; 63
    20d4:	cd bf       	out	0x3d, r28	; 61
    20d6:	8c 01       	movw	r16, r24
    20d8:	58 2f       	mov	r21, r24
    20da:	a1 2f       	mov	r26, r17
    20dc:	fc 01       	movw	r30, r24
    20de:	40 e0       	ldi	r20, 0x00	; 0
unsigned char fileNameFAT[11];
unsigned char j, k;

for(j=0; j<12; j++)
if(fileName[j] == '.') break;
    20e0:	80 81       	ld	r24, Z
    20e2:	8e 32       	cpi	r24, 0x2E	; 46
    20e4:	19 f4       	brne	.+6      	; 0x20ec <convertFileName+0x2e>

if(j>8) {transmitString_F(PSTR("Invalid fileName..")); return 1;}
    20e6:	49 30       	cpi	r20, 0x09	; 9
    20e8:	30 f0       	brcs	.+12     	; 0x20f6 <convertFileName+0x38>
    20ea:	0e c0       	rjmp	.+28     	; 0x2108 <convertFileName+0x4a>
unsigned char convertFileName (unsigned char *fileName)
{
unsigned char fileNameFAT[11];
unsigned char j, k;

for(j=0; j<12; j++)
    20ec:	4f 5f       	subi	r20, 0xFF	; 255
    20ee:	31 96       	adiw	r30, 0x01	; 1
    20f0:	4c 30       	cpi	r20, 0x0C	; 12
    20f2:	b1 f7       	brne	.-20     	; 0x20e0 <convertFileName+0x22>
    20f4:	09 c0       	rjmp	.+18     	; 0x2108 <convertFileName+0x4a>
    20f6:	be 01       	movw	r22, r28
    20f8:	6f 5f       	subi	r22, 0xFF	; 255
    20fa:	7f 4f       	sbci	r23, 0xFF	; 255
    20fc:	85 2f       	mov	r24, r21
    20fe:	9a 2f       	mov	r25, r26
    2100:	9c 01       	movw	r18, r24
    2102:	f9 01       	movw	r30, r18
    2104:	db 01       	movw	r26, r22
    2106:	08 c0       	rjmp	.+16     	; 0x2118 <convertFileName+0x5a>
if(fileName[j] == '.') break;

if(j>8) {transmitString_F(PSTR("Invalid fileName..")); return 1;}
    2108:	88 ec       	ldi	r24, 0xC8	; 200
    210a:	9b e1       	ldi	r25, 0x1B	; 27
    210c:	0e 94 a8 20 	call	0x4150	; 0x4150 <transmitString_F>
    2110:	81 e0       	ldi	r24, 0x01	; 1
    2112:	52 c0       	rjmp	.+164    	; 0x21b8 <convertFileName+0xfa>

for(k=0; k<j; k++) //setting file name
  fileNameFAT[k] = fileName[k];
    2114:	81 91       	ld	r24, Z+
    2116:	8d 93       	st	X+, r24
for(j=0; j<12; j++)
if(fileName[j] == '.') break;

if(j>8) {transmitString_F(PSTR("Invalid fileName..")); return 1;}

for(k=0; k<j; k++) //setting file name
    2118:	8e 2f       	mov	r24, r30
    211a:	85 1b       	sub	r24, r21
    211c:	84 17       	cp	r24, r20
    211e:	d0 f3       	brcs	.-12     	; 0x2114 <convertFileName+0x56>
    2120:	84 2f       	mov	r24, r20
  fileNameFAT[k] = fileName[k];

for(k=j; k<=7; k++) //filling file name trail with blanks
  fileNameFAT[k] = ' ';
    2122:	9e 01       	movw	r18, r28
    2124:	2f 5f       	subi	r18, 0xFF	; 255
    2126:	3f 4f       	sbci	r19, 0xFF	; 255
    2128:	90 e2       	ldi	r25, 0x20	; 32
    212a:	05 c0       	rjmp	.+10     	; 0x2136 <convertFileName+0x78>
    212c:	f9 01       	movw	r30, r18
    212e:	e8 0f       	add	r30, r24
    2130:	f1 1d       	adc	r31, r1
    2132:	90 83       	st	Z, r25
if(j>8) {transmitString_F(PSTR("Invalid fileName..")); return 1;}

for(k=0; k<j; k++) //setting file name
  fileNameFAT[k] = fileName[k];

for(k=j; k<=7; k++) //filling file name trail with blanks
    2134:	8f 5f       	subi	r24, 0xFF	; 255
    2136:	88 30       	cpi	r24, 0x08	; 8
    2138:	c9 f7       	brne	.-14     	; 0x212c <convertFileName+0x6e>
  fileNameFAT[k] = ' ';

j++;
    213a:	24 2f       	mov	r18, r20
    213c:	2f 5f       	subi	r18, 0xFF	; 255
{
  if(fileName[j] != 0)
    fileNameFAT[k] = fileName[j++];
  else //filling extension trail with blanks
    while(k<11)
      fileNameFAT[k++] = ' ';
    213e:	ae 01       	movw	r20, r28
    2140:	4f 5f       	subi	r20, 0xFF	; 255
    2142:	5f 4f       	sbci	r21, 0xFF	; 255
    2144:	30 e2       	ldi	r19, 0x20	; 32
  fileNameFAT[k] = ' ';

j++;
for(k=8; k<11; k++) //setting file extention
{
  if(fileName[j] != 0)
    2146:	f8 01       	movw	r30, r16
    2148:	e2 0f       	add	r30, r18
    214a:	f1 1d       	adc	r31, r1
    214c:	90 81       	ld	r25, Z
    214e:	99 23       	and	r25, r25
    2150:	59 f0       	breq	.+22     	; 0x2168 <convertFileName+0xaa>
    fileNameFAT[k] = fileName[j++];
    2152:	fa 01       	movw	r30, r20
    2154:	e8 0f       	add	r30, r24
    2156:	f1 1d       	adc	r31, r1
    2158:	90 83       	st	Z, r25
    215a:	2f 5f       	subi	r18, 0xFF	; 255
    215c:	07 c0       	rjmp	.+14     	; 0x216c <convertFileName+0xae>
  else //filling extension trail with blanks
    while(k<11)
      fileNameFAT[k++] = ' ';
    215e:	fa 01       	movw	r30, r20
    2160:	e8 0f       	add	r30, r24
    2162:	f1 1d       	adc	r31, r1
    2164:	30 83       	st	Z, r19
    2166:	8f 5f       	subi	r24, 0xFF	; 255
for(k=8; k<11; k++) //setting file extention
{
  if(fileName[j] != 0)
    fileNameFAT[k] = fileName[j++];
  else //filling extension trail with blanks
    while(k<11)
    2168:	8b 30       	cpi	r24, 0x0B	; 11
    216a:	c8 f3       	brcs	.-14     	; 0x215e <convertFileName+0xa0>

for(k=j; k<=7; k++) //filling file name trail with blanks
  fileNameFAT[k] = ' ';

j++;
for(k=8; k<11; k++) //setting file extention
    216c:	8f 5f       	subi	r24, 0xFF	; 255
    216e:	8b 30       	cpi	r24, 0x0B	; 11
    2170:	50 f3       	brcs	.-44     	; 0x2146 <convertFileName+0x88>
  else //filling extension trail with blanks
    while(k<11)
      fileNameFAT[k++] = ' ';
}

for(j=0; j<11; j++) //converting small letters to caps
    2172:	9e 01       	movw	r18, r28
    2174:	24 5f       	subi	r18, 0xF4	; 244
    2176:	3f 4f       	sbci	r19, 0xFF	; 255
  if((fileNameFAT[j] >= 0x61) && (fileNameFAT[j] <= 0x7a))
    2178:	fb 01       	movw	r30, r22
    217a:	90 81       	ld	r25, Z
    217c:	89 2f       	mov	r24, r25
    217e:	81 56       	subi	r24, 0x61	; 97
    2180:	8a 31       	cpi	r24, 0x1A	; 26
    2182:	10 f4       	brcc	.+4      	; 0x2188 <convertFileName+0xca>
    fileNameFAT[j] -= 0x20;
    2184:	90 52       	subi	r25, 0x20	; 32
    2186:	90 83       	st	Z, r25
    2188:	6f 5f       	subi	r22, 0xFF	; 255
    218a:	7f 4f       	sbci	r23, 0xFF	; 255
  else //filling extension trail with blanks
    while(k<11)
      fileNameFAT[k++] = ' ';
}

for(j=0; j<11; j++) //converting small letters to caps
    218c:	62 17       	cp	r22, r18
    218e:	73 07       	cpc	r23, r19
    2190:	99 f7       	brne	.-26     	; 0x2178 <convertFileName+0xba>
    2192:	20 e0       	ldi	r18, 0x00	; 0
    2194:	30 e0       	ldi	r19, 0x00	; 0
  if((fileNameFAT[j] >= 0x61) && (fileNameFAT[j] <= 0x7a))
    fileNameFAT[j] -= 0x20;

for(j=0; j<11; j++)
  fileName[j] = fileNameFAT[j];
    2196:	ae 01       	movw	r20, r28
    2198:	4f 5f       	subi	r20, 0xFF	; 255
    219a:	5f 4f       	sbci	r21, 0xFF	; 255
    219c:	f8 01       	movw	r30, r16
    219e:	e2 0f       	add	r30, r18
    21a0:	f3 1f       	adc	r31, r19
    21a2:	da 01       	movw	r26, r20
    21a4:	a2 0f       	add	r26, r18
    21a6:	b3 1f       	adc	r27, r19
    21a8:	8c 91       	ld	r24, X
    21aa:	80 83       	st	Z, r24
    21ac:	2f 5f       	subi	r18, 0xFF	; 255
    21ae:	3f 4f       	sbci	r19, 0xFF	; 255

for(j=0; j<11; j++) //converting small letters to caps
  if((fileNameFAT[j] >= 0x61) && (fileNameFAT[j] <= 0x7a))
    fileNameFAT[j] -= 0x20;

for(j=0; j<11; j++)
    21b0:	2b 30       	cpi	r18, 0x0B	; 11
    21b2:	31 05       	cpc	r19, r1
    21b4:	99 f7       	brne	.-26     	; 0x219c <convertFileName+0xde>
    21b6:	80 e0       	ldi	r24, 0x00	; 0
  fileName[j] = fileNameFAT[j];

return 0;
}
    21b8:	2b 96       	adiw	r28, 0x0b	; 11
    21ba:	0f b6       	in	r0, 0x3f	; 63
    21bc:	f8 94       	cli
    21be:	de bf       	out	0x3e, r29	; 62
    21c0:	0f be       	out	0x3f, r0	; 63
    21c2:	cd bf       	out	0x3d, r28	; 61
    21c4:	cf 91       	pop	r28
    21c6:	df 91       	pop	r29
    21c8:	1f 91       	pop	r17
    21ca:	0f 91       	pop	r16
    21cc:	08 95       	ret

000021ce <searchNextFreeCluster>:
//          starting from a specified cluster
//Arguments: Starting cluster
//return: the next free cluster
//****************************************************************
unsigned long searchNextFreeCluster (unsigned long startCluster)
{
    21ce:	6f 92       	push	r6
    21d0:	7f 92       	push	r7
    21d2:	8f 92       	push	r8
    21d4:	9f 92       	push	r9
    21d6:	af 92       	push	r10
    21d8:	bf 92       	push	r11
    21da:	cf 92       	push	r12
    21dc:	df 92       	push	r13
    21de:	ef 92       	push	r14
    21e0:	ff 92       	push	r15
    21e2:	0f 93       	push	r16
    21e4:	1f 93       	push	r17
  unsigned long cluster, *value, sector;
  unsigned char i;
    
	startCluster -=  (startCluster % 128);   //to start with the first file in a FAT sector
    21e6:	60 78       	andi	r22, 0x80	; 128
    21e8:	3b 01       	movw	r6, r22
    21ea:	4c 01       	movw	r8, r24
    21ec:	22 e0       	ldi	r18, 0x02	; 2
    21ee:	66 0c       	add	r6, r6
    21f0:	77 1c       	adc	r7, r7
    21f2:	88 1c       	adc	r8, r8
    21f4:	99 1c       	adc	r9, r9
    21f6:	2a 95       	dec	r18
    21f8:	d1 f7       	brne	.-12     	; 0x21ee <searchNextFreeCluster+0x20>
    21fa:	5b 01       	movw	r10, r22
    21fc:	6c 01       	movw	r12, r24
    21fe:	50 c0       	rjmp	.+160    	; 0x22a0 <searchNextFreeCluster+0xd2>
    for(cluster =startCluster; cluster <totalClusters; cluster+=128) 
    {
      sector = unusedSectors + reservedSectorCount + ((cluster * 4) / bytesPerSector);
    2200:	e0 90 e1 02 	lds	r14, 0x02E1
    2204:	f0 90 e2 02 	lds	r15, 0x02E2
    2208:	20 91 c6 00 	lds	r18, 0x00C6
    220c:	30 91 c7 00 	lds	r19, 0x00C7
      SD_readSingleBlock(sector);
    2210:	00 e0       	ldi	r16, 0x00	; 0
    2212:	10 e0       	ldi	r17, 0x00	; 0
    2214:	80 91 d8 02 	lds	r24, 0x02D8
    2218:	90 91 d9 02 	lds	r25, 0x02D9
    221c:	a0 91 da 02 	lds	r26, 0x02DA
    2220:	b0 91 db 02 	lds	r27, 0x02DB
    2224:	e8 0e       	add	r14, r24
    2226:	f9 1e       	adc	r15, r25
    2228:	0a 1f       	adc	r16, r26
    222a:	1b 1f       	adc	r17, r27
    222c:	40 e0       	ldi	r20, 0x00	; 0
    222e:	50 e0       	ldi	r21, 0x00	; 0
    2230:	c4 01       	movw	r24, r8
    2232:	b3 01       	movw	r22, r6
    2234:	0e 94 47 21 	call	0x428e	; 0x428e <__udivmodsi4>
    2238:	e2 0e       	add	r14, r18
    223a:	f3 1e       	adc	r15, r19
    223c:	04 1f       	adc	r16, r20
    223e:	15 1f       	adc	r17, r21
    2240:	c8 01       	movw	r24, r16
    2242:	b7 01       	movw	r22, r14
    2244:	0e 94 97 1f 	call	0x3f2e	; 0x3f2e <SD_readSingleBlock>
    2248:	60 e0       	ldi	r22, 0x00	; 0
      for(i=0; i<128; i++)
      {
       	 value = (unsigned long *) &buffer[i*4];
         if(((*value) & 0x0fffffff) == 0)
    224a:	e6 2f       	mov	r30, r22
    224c:	f0 e0       	ldi	r31, 0x00	; 0
    224e:	ee 0f       	add	r30, r30
    2250:	ff 1f       	adc	r31, r31
    2252:	ee 0f       	add	r30, r30
    2254:	ff 1f       	adc	r31, r31
    2256:	ea 52       	subi	r30, 0x2A	; 42
    2258:	ff 4f       	sbci	r31, 0xFF	; 255
    225a:	80 81       	ld	r24, Z
    225c:	91 81       	ldd	r25, Z+1	; 0x01
    225e:	a2 81       	ldd	r26, Z+2	; 0x02
    2260:	b3 81       	ldd	r27, Z+3	; 0x03
    2262:	bf 70       	andi	r27, 0x0F	; 15
    2264:	00 97       	sbiw	r24, 0x00	; 0
    2266:	a1 05       	cpc	r26, r1
    2268:	b1 05       	cpc	r27, r1
    226a:	39 f4       	brne	.+14     	; 0x227a <searchNextFreeCluster+0xac>
            return(cluster+i);
    226c:	a6 01       	movw	r20, r12
    226e:	95 01       	movw	r18, r10
    2270:	26 0f       	add	r18, r22
    2272:	31 1d       	adc	r19, r1
    2274:	41 1d       	adc	r20, r1
    2276:	51 1d       	adc	r21, r1
    2278:	25 c0       	rjmp	.+74     	; 0x22c4 <searchNextFreeCluster+0xf6>
	startCluster -=  (startCluster % 128);   //to start with the first file in a FAT sector
    for(cluster =startCluster; cluster <totalClusters; cluster+=128) 
    {
      sector = unusedSectors + reservedSectorCount + ((cluster * 4) / bytesPerSector);
      SD_readSingleBlock(sector);
      for(i=0; i<128; i++)
    227a:	6f 5f       	subi	r22, 0xFF	; 255
    227c:	60 38       	cpi	r22, 0x80	; 128
    227e:	29 f7       	brne	.-54     	; 0x224a <searchNextFreeCluster+0x7c>
{
  unsigned long cluster, *value, sector;
  unsigned char i;
    
	startCluster -=  (startCluster % 128);   //to start with the first file in a FAT sector
    for(cluster =startCluster; cluster <totalClusters; cluster+=128) 
    2280:	80 e8       	ldi	r24, 0x80	; 128
    2282:	90 e0       	ldi	r25, 0x00	; 0
    2284:	a0 e0       	ldi	r26, 0x00	; 0
    2286:	b0 e0       	ldi	r27, 0x00	; 0
    2288:	a8 0e       	add	r10, r24
    228a:	b9 1e       	adc	r11, r25
    228c:	ca 1e       	adc	r12, r26
    228e:	db 1e       	adc	r13, r27
    2290:	80 e0       	ldi	r24, 0x00	; 0
    2292:	92 e0       	ldi	r25, 0x02	; 2
    2294:	a0 e0       	ldi	r26, 0x00	; 0
    2296:	b0 e0       	ldi	r27, 0x00	; 0
    2298:	68 0e       	add	r6, r24
    229a:	79 1e       	adc	r7, r25
    229c:	8a 1e       	adc	r8, r26
    229e:	9b 1e       	adc	r9, r27
    22a0:	80 91 c8 00 	lds	r24, 0x00C8
    22a4:	90 91 c9 00 	lds	r25, 0x00C9
    22a8:	a0 91 ca 00 	lds	r26, 0x00CA
    22ac:	b0 91 cb 00 	lds	r27, 0x00CB
    22b0:	a8 16       	cp	r10, r24
    22b2:	b9 06       	cpc	r11, r25
    22b4:	ca 06       	cpc	r12, r26
    22b6:	db 06       	cpc	r13, r27
    22b8:	08 f4       	brcc	.+2      	; 0x22bc <searchNextFreeCluster+0xee>
    22ba:	a2 cf       	rjmp	.-188    	; 0x2200 <searchNextFreeCluster+0x32>
    22bc:	20 e0       	ldi	r18, 0x00	; 0
    22be:	30 e0       	ldi	r19, 0x00	; 0
    22c0:	40 e0       	ldi	r20, 0x00	; 0
    22c2:	50 e0       	ldi	r21, 0x00	; 0
            return(cluster+i);
      }  
    } 

 return 0;
}
    22c4:	b9 01       	movw	r22, r18
    22c6:	ca 01       	movw	r24, r20
    22c8:	1f 91       	pop	r17
    22ca:	0f 91       	pop	r16
    22cc:	ff 90       	pop	r15
    22ce:	ef 90       	pop	r14
    22d0:	df 90       	pop	r13
    22d2:	cf 90       	pop	r12
    22d4:	bf 90       	pop	r11
    22d6:	af 90       	pop	r10
    22d8:	9f 90       	pop	r9
    22da:	8f 90       	pop	r8
    22dc:	7f 90       	pop	r7
    22de:	6f 90       	pop	r6
    22e0:	08 95       	ret

000022e2 <getSetFreeCluster>:
//return: next free cluster, if arg1 is NEXT_FREE & arg2 is GET
//        total number of free clusters, if arg1 is TOTAL_FREE & arg2 is GET
//		  0xffffffff, if any error or if arg2 is SET
//********************************************************************************************
unsigned long getSetFreeCluster(unsigned char totOrNext, unsigned char get_set, unsigned long FSEntry)
{
    22e2:	cf 92       	push	r12
    22e4:	df 92       	push	r13
    22e6:	ef 92       	push	r14
    22e8:	ff 92       	push	r15
    22ea:	0f 93       	push	r16
    22ec:	1f 93       	push	r17
    22ee:	d8 2e       	mov	r13, r24
    22f0:	c6 2e       	mov	r12, r22
    22f2:	79 01       	movw	r14, r18
    22f4:	8a 01       	movw	r16, r20
struct FSInfo_Structure *FS = (struct FSInfo_Structure *) &buffer;
unsigned char error;

SD_readSingleBlock(unusedSectors + 1);
    22f6:	60 91 d8 02 	lds	r22, 0x02D8
    22fa:	70 91 d9 02 	lds	r23, 0x02D9
    22fe:	80 91 da 02 	lds	r24, 0x02DA
    2302:	90 91 db 02 	lds	r25, 0x02DB
    2306:	6f 5f       	subi	r22, 0xFF	; 255
    2308:	7f 4f       	sbci	r23, 0xFF	; 255
    230a:	8f 4f       	sbci	r24, 0xFF	; 255
    230c:	9f 4f       	sbci	r25, 0xFF	; 255
    230e:	0e 94 97 1f 	call	0x3f2e	; 0x3f2e <SD_readSingleBlock>

if((FS->leadSignature != 0x41615252) || (FS->structureSignature != 0x61417272) || (FS->trailSignature !=0xaa550000))
    2312:	80 91 d6 00 	lds	r24, 0x00D6
    2316:	90 91 d7 00 	lds	r25, 0x00D7
    231a:	a0 91 d8 00 	lds	r26, 0x00D8
    231e:	b0 91 d9 00 	lds	r27, 0x00D9
    2322:	82 55       	subi	r24, 0x52	; 82
    2324:	92 45       	sbci	r25, 0x52	; 82
    2326:	a1 46       	sbci	r26, 0x61	; 97
    2328:	b1 44       	sbci	r27, 0x41	; 65
    232a:	09 f0       	breq	.+2      	; 0x232e <getSetFreeCluster+0x4c>
    232c:	54 c0       	rjmp	.+168    	; 0x23d6 <getSetFreeCluster+0xf4>
    232e:	80 91 ba 02 	lds	r24, 0x02BA
    2332:	90 91 bb 02 	lds	r25, 0x02BB
    2336:	a0 91 bc 02 	lds	r26, 0x02BC
    233a:	b0 91 bd 02 	lds	r27, 0x02BD
    233e:	82 57       	subi	r24, 0x72	; 114
    2340:	92 47       	sbci	r25, 0x72	; 114
    2342:	a1 44       	sbci	r26, 0x41	; 65
    2344:	b1 46       	sbci	r27, 0x61	; 97
    2346:	09 f0       	breq	.+2      	; 0x234a <getSetFreeCluster+0x68>
    2348:	46 c0       	rjmp	.+140    	; 0x23d6 <getSetFreeCluster+0xf4>
    234a:	80 91 d2 02 	lds	r24, 0x02D2
    234e:	90 91 d3 02 	lds	r25, 0x02D3
    2352:	a0 91 d4 02 	lds	r26, 0x02D4
    2356:	b0 91 d5 02 	lds	r27, 0x02D5
    235a:	80 50       	subi	r24, 0x00	; 0
    235c:	90 40       	sbci	r25, 0x00	; 0
    235e:	a5 45       	sbci	r26, 0x55	; 85
    2360:	ba 4a       	sbci	r27, 0xAA	; 170
    2362:	c9 f5       	brne	.+114    	; 0x23d6 <getSetFreeCluster+0xf4>
  return 0xffffffff;

 if(get_set == GET)
    2364:	cc 20       	and	r12, r12
    2366:	a9 f4       	brne	.+42     	; 0x2392 <getSetFreeCluster+0xb0>
 {
   if(totOrNext == TOTAL_FREE)
    2368:	81 e0       	ldi	r24, 0x01	; 1
    236a:	d8 16       	cp	r13, r24
    236c:	49 f4       	brne	.+18     	; 0x2380 <getSetFreeCluster+0x9e>
      return(FS->freeClusterCount);
    236e:	20 91 be 02 	lds	r18, 0x02BE
    2372:	30 91 bf 02 	lds	r19, 0x02BF
    2376:	40 91 c0 02 	lds	r20, 0x02C0
    237a:	50 91 c1 02 	lds	r21, 0x02C1
    237e:	2f c0       	rjmp	.+94     	; 0x23de <getSetFreeCluster+0xfc>
   else // when totOrNext = NEXT_FREE
      return(FS->nextFreeCluster);
    2380:	20 91 c2 02 	lds	r18, 0x02C2
    2384:	30 91 c3 02 	lds	r19, 0x02C3
    2388:	40 91 c4 02 	lds	r20, 0x02C4
    238c:	50 91 c5 02 	lds	r21, 0x02C5
    2390:	26 c0       	rjmp	.+76     	; 0x23de <getSetFreeCluster+0xfc>
 }
 else
 {
   if(totOrNext == TOTAL_FREE)
    2392:	21 e0       	ldi	r18, 0x01	; 1
    2394:	d2 16       	cp	r13, r18
    2396:	49 f4       	brne	.+18     	; 0x23aa <getSetFreeCluster+0xc8>
      FS->freeClusterCount = FSEntry;
    2398:	e0 92 be 02 	sts	0x02BE, r14
    239c:	f0 92 bf 02 	sts	0x02BF, r15
    23a0:	00 93 c0 02 	sts	0x02C0, r16
    23a4:	10 93 c1 02 	sts	0x02C1, r17
    23a8:	08 c0       	rjmp	.+16     	; 0x23ba <getSetFreeCluster+0xd8>
   else // when totOrNext = NEXT_FREE
	  FS->nextFreeCluster = FSEntry;
    23aa:	e0 92 c2 02 	sts	0x02C2, r14
    23ae:	f0 92 c3 02 	sts	0x02C3, r15
    23b2:	00 93 c4 02 	sts	0x02C4, r16
    23b6:	10 93 c5 02 	sts	0x02C5, r17
 
   error = SD_writeSingleBlock(unusedSectors + 1);	//update FSinfo
    23ba:	60 91 d8 02 	lds	r22, 0x02D8
    23be:	70 91 d9 02 	lds	r23, 0x02D9
    23c2:	80 91 da 02 	lds	r24, 0x02DA
    23c6:	90 91 db 02 	lds	r25, 0x02DB
    23ca:	6f 5f       	subi	r22, 0xFF	; 255
    23cc:	7f 4f       	sbci	r23, 0xFF	; 255
    23ce:	8f 4f       	sbci	r24, 0xFF	; 255
    23d0:	9f 4f       	sbci	r25, 0xFF	; 255
    23d2:	0e 94 49 1f 	call	0x3e92	; 0x3e92 <SD_writeSingleBlock>
 }
 return 0xffffffff;
    23d6:	2f ef       	ldi	r18, 0xFF	; 255
    23d8:	3f ef       	ldi	r19, 0xFF	; 255
    23da:	4f ef       	ldi	r20, 0xFF	; 255
    23dc:	5f ef       	ldi	r21, 0xFF	; 255
}
    23de:	b9 01       	movw	r22, r18
    23e0:	ca 01       	movw	r24, r20
    23e2:	1f 91       	pop	r17
    23e4:	0f 91       	pop	r16
    23e6:	ff 90       	pop	r15
    23e8:	ef 90       	pop	r14
    23ea:	df 90       	pop	r13
    23ec:	cf 90       	pop	r12
    23ee:	08 95       	ret

000023f0 <freeMemoryUpdate>:
//			to ADD or REMOVE clusters occupied by the file
//Arguments: #1.flag ADD or REMOVE #2.file size in Bytes
//return: none
//********************************************************************
void freeMemoryUpdate (unsigned char flag, unsigned long size)
{
    23f0:	df 92       	push	r13
    23f2:	ef 92       	push	r14
    23f4:	ff 92       	push	r15
    23f6:	0f 93       	push	r16
    23f8:	1f 93       	push	r17
    23fa:	d8 2e       	mov	r13, r24
    23fc:	db 01       	movw	r26, r22
    23fe:	ca 01       	movw	r24, r20
    2400:	e9 e0       	ldi	r30, 0x09	; 9
    2402:	b6 95       	lsr	r27
    2404:	a7 95       	ror	r26
    2406:	97 95       	ror	r25
    2408:	87 95       	ror	r24
    240a:	ea 95       	dec	r30
    240c:	d1 f7       	brne	.-12     	; 0x2402 <freeMemoryUpdate+0x12>
  unsigned long freeClusters;
  //convert file size into number of clusters occupied
  if((size % 512) == 0) size = size / 512;
    240e:	51 70       	andi	r21, 0x01	; 1
    2410:	60 70       	andi	r22, 0x00	; 0
    2412:	70 70       	andi	r23, 0x00	; 0
    2414:	41 15       	cp	r20, r1
    2416:	51 05       	cpc	r21, r1
    2418:	61 05       	cpc	r22, r1
    241a:	71 05       	cpc	r23, r1
    241c:	19 f4       	brne	.+6      	; 0x2424 <freeMemoryUpdate+0x34>
    241e:	ac 01       	movw	r20, r24
    2420:	bd 01       	movw	r22, r26
    2422:	06 c0       	rjmp	.+12     	; 0x2430 <freeMemoryUpdate+0x40>
  else size = (size / 512) +1;
    2424:	ac 01       	movw	r20, r24
    2426:	bd 01       	movw	r22, r26
    2428:	4f 5f       	subi	r20, 0xFF	; 255
    242a:	5f 4f       	sbci	r21, 0xFF	; 255
    242c:	6f 4f       	sbci	r22, 0xFF	; 255
    242e:	7f 4f       	sbci	r23, 0xFF	; 255
    2430:	db 01       	movw	r26, r22
    2432:	ca 01       	movw	r24, r20
    2434:	33 e0       	ldi	r19, 0x03	; 3
    2436:	b6 95       	lsr	r27
    2438:	a7 95       	ror	r26
    243a:	97 95       	ror	r25
    243c:	87 95       	ror	r24
    243e:	3a 95       	dec	r19
    2440:	d1 f7       	brne	.-12     	; 0x2436 <freeMemoryUpdate+0x46>
  if((size % 8) == 0) size = size / 8;
    2442:	47 70       	andi	r20, 0x07	; 7
    2444:	50 70       	andi	r21, 0x00	; 0
    2446:	60 70       	andi	r22, 0x00	; 0
    2448:	70 70       	andi	r23, 0x00	; 0
    244a:	41 15       	cp	r20, r1
    244c:	51 05       	cpc	r21, r1
    244e:	61 05       	cpc	r22, r1
    2450:	71 05       	cpc	r23, r1
    2452:	19 f4       	brne	.+6      	; 0x245a <freeMemoryUpdate+0x6a>
    2454:	7c 01       	movw	r14, r24
    2456:	8d 01       	movw	r16, r26
    2458:	07 c0       	rjmp	.+14     	; 0x2468 <freeMemoryUpdate+0x78>
  else size = (size / 8) +1;
    245a:	7c 01       	movw	r14, r24
    245c:	8d 01       	movw	r16, r26
    245e:	08 94       	sec
    2460:	e1 1c       	adc	r14, r1
    2462:	f1 1c       	adc	r15, r1
    2464:	01 1d       	adc	r16, r1
    2466:	11 1d       	adc	r17, r1

  if(freeClusterCountUpdated)
    2468:	80 91 e8 02 	lds	r24, 0x02E8
    246c:	88 23       	and	r24, r24
    246e:	d9 f0       	breq	.+54     	; 0x24a6 <freeMemoryUpdate+0xb6>
  {
	freeClusters = getSetFreeCluster (TOTAL_FREE, GET, 0);
    2470:	81 e0       	ldi	r24, 0x01	; 1
    2472:	60 e0       	ldi	r22, 0x00	; 0
    2474:	20 e0       	ldi	r18, 0x00	; 0
    2476:	30 e0       	ldi	r19, 0x00	; 0
    2478:	40 e0       	ldi	r20, 0x00	; 0
    247a:	50 e0       	ldi	r21, 0x00	; 0
    247c:	0e 94 71 11 	call	0x22e2	; 0x22e2 <getSetFreeCluster>
	if(flag == ADD)
    2480:	dd 20       	and	r13, r13
    2482:	39 f4       	brne	.+14     	; 0x2492 <freeMemoryUpdate+0xa2>
  	   freeClusters = freeClusters + size;
    2484:	9b 01       	movw	r18, r22
    2486:	ac 01       	movw	r20, r24
    2488:	2e 0d       	add	r18, r14
    248a:	3f 1d       	adc	r19, r15
    248c:	40 1f       	adc	r20, r16
    248e:	51 1f       	adc	r21, r17
    2490:	06 c0       	rjmp	.+12     	; 0x249e <freeMemoryUpdate+0xae>
	else  //when flag = REMOVE
	   freeClusters = freeClusters - size;
    2492:	9b 01       	movw	r18, r22
    2494:	ac 01       	movw	r20, r24
    2496:	2e 19       	sub	r18, r14
    2498:	3f 09       	sbc	r19, r15
    249a:	40 0b       	sbc	r20, r16
    249c:	51 0b       	sbc	r21, r17
	getSetFreeCluster (TOTAL_FREE, SET, freeClusters);
    249e:	81 e0       	ldi	r24, 0x01	; 1
    24a0:	61 e0       	ldi	r22, 0x01	; 1
    24a2:	0e 94 71 11 	call	0x22e2	; 0x22e2 <getSetFreeCluster>
  }
}
    24a6:	1f 91       	pop	r17
    24a8:	0f 91       	pop	r16
    24aa:	ff 90       	pop	r15
    24ac:	ef 90       	pop	r14
    24ae:	df 90       	pop	r13
    24b0:	08 95       	ret

000024b2 <memoryStatistics>:
//it tries to read from SD whether a free cluster count is stored, if it is stored
//then it will return immediately. Otherwise it will count the total number of
//free clusters, which takes time
//****************************************************************************
void memoryStatistics (void)
{
    24b2:	2f 92       	push	r2
    24b4:	3f 92       	push	r3
    24b6:	4f 92       	push	r4
    24b8:	5f 92       	push	r5
    24ba:	6f 92       	push	r6
    24bc:	7f 92       	push	r7
    24be:	8f 92       	push	r8
    24c0:	9f 92       	push	r9
    24c2:	af 92       	push	r10
    24c4:	bf 92       	push	r11
    24c6:	cf 92       	push	r12
    24c8:	df 92       	push	r13
    24ca:	ef 92       	push	r14
    24cc:	ff 92       	push	r15
    24ce:	0f 93       	push	r16
    24d0:	1f 93       	push	r17
unsigned long totalMemory, freeMemory;
unsigned long sector, *value;
unsigned int i;


totalMemory = totalClusters * sectorPerCluster / 1024;
    24d2:	20 91 c8 00 	lds	r18, 0x00C8
    24d6:	30 91 c9 00 	lds	r19, 0x00C9
    24da:	40 91 ca 00 	lds	r20, 0x00CA
    24de:	50 91 cb 00 	lds	r21, 0x00CB
    24e2:	60 91 d6 02 	lds	r22, 0x02D6
    24e6:	70 91 d7 02 	lds	r23, 0x02D7
    24ea:	80 e0       	ldi	r24, 0x00	; 0
    24ec:	90 e0       	ldi	r25, 0x00	; 0
    24ee:	0e 94 28 21 	call	0x4250	; 0x4250 <__mulsi3>
    24f2:	5b 01       	movw	r10, r22
    24f4:	6c 01       	movw	r12, r24
    24f6:	1a e0       	ldi	r17, 0x0A	; 10
    24f8:	d6 94       	lsr	r13
    24fa:	c7 94       	ror	r12
    24fc:	b7 94       	ror	r11
    24fe:	a7 94       	ror	r10
    2500:	1a 95       	dec	r17
    2502:	d1 f7       	brne	.-12     	; 0x24f8 <memoryStatistics+0x46>
totalMemory *= bytesPerSector;
    2504:	e0 90 c6 00 	lds	r14, 0x00C6
    2508:	f0 90 c7 00 	lds	r15, 0x00C7

TX_NEWLINE;
    250c:	8d e0       	ldi	r24, 0x0D	; 13
    250e:	0e 94 a4 20 	call	0x4148	; 0x4148 <transmitByte>
    2512:	8a e0       	ldi	r24, 0x0A	; 10
    2514:	0e 94 a4 20 	call	0x4148	; 0x4148 <transmitByte>
TX_NEWLINE;
    2518:	8d e0       	ldi	r24, 0x0D	; 13
    251a:	0e 94 a4 20 	call	0x4148	; 0x4148 <transmitByte>
    251e:	8a e0       	ldi	r24, 0x0A	; 10
    2520:	0e 94 a4 20 	call	0x4148	; 0x4148 <transmitByte>
transmitString_F(PSTR("Total Memory: "));
    2524:	83 ef       	ldi	r24, 0xF3	; 243
    2526:	9a e1       	ldi	r25, 0x1A	; 26
    2528:	0e 94 a8 20 	call	0x4150	; 0x4150 <transmitString_F>

displayMemory (HIGH, totalMemory);
    252c:	00 e0       	ldi	r16, 0x00	; 0
    252e:	10 e0       	ldi	r17, 0x00	; 0
    2530:	c6 01       	movw	r24, r12
    2532:	b5 01       	movw	r22, r10
    2534:	a8 01       	movw	r20, r16
    2536:	97 01       	movw	r18, r14
    2538:	0e 94 28 21 	call	0x4250	; 0x4250 <__mulsi3>
    253c:	ab 01       	movw	r20, r22
    253e:	bc 01       	movw	r22, r24
    2540:	81 e0       	ldi	r24, 0x01	; 1
    2542:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <displayMemory>

freeClusters = getSetFreeCluster (TOTAL_FREE, GET, 0);
    2546:	81 e0       	ldi	r24, 0x01	; 1
    2548:	60 e0       	ldi	r22, 0x00	; 0
    254a:	20 e0       	ldi	r18, 0x00	; 0
    254c:	30 e0       	ldi	r19, 0x00	; 0
    254e:	40 e0       	ldi	r20, 0x00	; 0
    2550:	50 e0       	ldi	r21, 0x00	; 0
    2552:	0e 94 71 11 	call	0x22e2	; 0x22e2 <getSetFreeCluster>
    2556:	3b 01       	movw	r6, r22
    2558:	4c 01       	movw	r8, r24
//freeClusters = 0xffffffff;    

if(freeClusters > totalClusters)
    255a:	80 91 c8 00 	lds	r24, 0x00C8
    255e:	90 91 c9 00 	lds	r25, 0x00C9
    2562:	a0 91 ca 00 	lds	r26, 0x00CA
    2566:	b0 91 cb 00 	lds	r27, 0x00CB
    256a:	86 15       	cp	r24, r6
    256c:	97 05       	cpc	r25, r7
    256e:	a8 05       	cpc	r26, r8
    2570:	b9 05       	cpc	r27, r9
    2572:	08 f0       	brcs	.+2      	; 0x2576 <memoryStatistics+0xc4>
    2574:	7c c0       	rjmp	.+248    	; 0x266e <memoryStatistics+0x1bc>
{
   freeClusterCountUpdated = 0;
    2576:	10 92 e8 02 	sts	0x02E8, r1
   freeClusters = 0;
   totalClusterCount = 0;
   cluster = rootCluster;    
    257a:	a0 90 cc 00 	lds	r10, 0x00CC
    257e:	b0 90 cd 00 	lds	r11, 0x00CD
    2582:	c0 90 ce 00 	lds	r12, 0x00CE
    2586:	d0 90 cf 00 	lds	r13, 0x00CF
    258a:	b2 e0       	ldi	r27, 0x02	; 2
    258c:	aa 0c       	add	r10, r10
    258e:	bb 1c       	adc	r11, r11
    2590:	cc 1c       	adc	r12, r12
    2592:	dd 1c       	adc	r13, r13
    2594:	ba 95       	dec	r27
    2596:	d1 f7       	brne	.-12     	; 0x258c <memoryStatistics+0xda>
    2598:	66 24       	eor	r6, r6
    259a:	77 24       	eor	r7, r7
    259c:	43 01       	movw	r8, r6
    259e:	22 24       	eor	r2, r2
    25a0:	33 24       	eor	r3, r3
    25a2:	21 01       	movw	r4, r2
    while(1)
    {
      sector = unusedSectors + reservedSectorCount + ((cluster * 4) / bytesPerSector) ;
    25a4:	e0 90 e1 02 	lds	r14, 0x02E1
    25a8:	f0 90 e2 02 	lds	r15, 0x02E2
    25ac:	20 91 c6 00 	lds	r18, 0x00C6
    25b0:	30 91 c7 00 	lds	r19, 0x00C7
      SD_readSingleBlock(sector);
    25b4:	00 e0       	ldi	r16, 0x00	; 0
    25b6:	10 e0       	ldi	r17, 0x00	; 0
    25b8:	80 91 d8 02 	lds	r24, 0x02D8
    25bc:	90 91 d9 02 	lds	r25, 0x02D9
    25c0:	a0 91 da 02 	lds	r26, 0x02DA
    25c4:	b0 91 db 02 	lds	r27, 0x02DB
    25c8:	e8 0e       	add	r14, r24
    25ca:	f9 1e       	adc	r15, r25
    25cc:	0a 1f       	adc	r16, r26
    25ce:	1b 1f       	adc	r17, r27
    25d0:	40 e0       	ldi	r20, 0x00	; 0
    25d2:	50 e0       	ldi	r21, 0x00	; 0
    25d4:	c6 01       	movw	r24, r12
    25d6:	b5 01       	movw	r22, r10
    25d8:	0e 94 47 21 	call	0x428e	; 0x428e <__udivmodsi4>
    25dc:	e2 0e       	add	r14, r18
    25de:	f3 1e       	adc	r15, r19
    25e0:	04 1f       	adc	r16, r20
    25e2:	15 1f       	adc	r17, r21
    25e4:	c8 01       	movw	r24, r16
    25e6:	b7 01       	movw	r22, r14
    25e8:	0e 94 97 1f 	call	0x3f2e	; 0x3f2e <SD_readSingleBlock>
    25ec:	a2 01       	movw	r20, r4
    25ee:	91 01       	movw	r18, r2
    25f0:	60 e0       	ldi	r22, 0x00	; 0
    25f2:	70 e0       	ldi	r23, 0x00	; 0
      for(i=0; i<128; i++)
      {
           value = (unsigned long *) &buffer[i*4];
         if(((*value)& 0x0fffffff) == 0)
    25f4:	fb 01       	movw	r30, r22
    25f6:	ea 52       	subi	r30, 0x2A	; 42
    25f8:	ff 4f       	sbci	r31, 0xFF	; 255
    25fa:	80 81       	ld	r24, Z
    25fc:	91 81       	ldd	r25, Z+1	; 0x01
    25fe:	a2 81       	ldd	r26, Z+2	; 0x02
    2600:	b3 81       	ldd	r27, Z+3	; 0x03
    2602:	bf 70       	andi	r27, 0x0F	; 15
    2604:	00 97       	sbiw	r24, 0x00	; 0
    2606:	a1 05       	cpc	r26, r1
    2608:	b1 05       	cpc	r27, r1
    260a:	29 f4       	brne	.+10     	; 0x2616 <memoryStatistics+0x164>
            freeClusters++;;
    260c:	08 94       	sec
    260e:	61 1c       	adc	r6, r1
    2610:	71 1c       	adc	r7, r1
    2612:	81 1c       	adc	r8, r1
    2614:	91 1c       	adc	r9, r1
        
         totalClusterCount++;
    2616:	2f 5f       	subi	r18, 0xFF	; 255
    2618:	3f 4f       	sbci	r19, 0xFF	; 255
    261a:	4f 4f       	sbci	r20, 0xFF	; 255
    261c:	5f 4f       	sbci	r21, 0xFF	; 255
         if(totalClusterCount == (totalClusters+2)) break;
    261e:	80 91 c8 00 	lds	r24, 0x00C8
    2622:	90 91 c9 00 	lds	r25, 0x00C9
    2626:	a0 91 ca 00 	lds	r26, 0x00CA
    262a:	b0 91 cb 00 	lds	r27, 0x00CB
    262e:	02 96       	adiw	r24, 0x02	; 2
    2630:	a1 1d       	adc	r26, r1
    2632:	b1 1d       	adc	r27, r1
    2634:	28 17       	cp	r18, r24
    2636:	39 07       	cpc	r19, r25
    2638:	4a 07       	cpc	r20, r26
    263a:	5b 07       	cpc	r21, r27
    263c:	c1 f0       	breq	.+48     	; 0x266e <memoryStatistics+0x1bc>
    263e:	c9 01       	movw	r24, r18
    2640:	82 19       	sub	r24, r2
    2642:	93 09       	sbc	r25, r3
    2644:	6c 5f       	subi	r22, 0xFC	; 252
    2646:	7f 4f       	sbci	r23, 0xFF	; 255
   cluster = rootCluster;    
    while(1)
    {
      sector = unusedSectors + reservedSectorCount + ((cluster * 4) / bytesPerSector) ;
      SD_readSingleBlock(sector);
      for(i=0; i<128; i++)
    2648:	02 e0       	ldi	r16, 0x02	; 2
    264a:	60 30       	cpi	r22, 0x00	; 0
    264c:	70 07       	cpc	r23, r16
    264e:	91 f6       	brne	.-92     	; 0x25f4 <memoryStatistics+0x142>
    2650:	e1 2c       	mov	r14, r1
    2652:	a2 e0       	ldi	r26, 0x02	; 2
    2654:	fa 2e       	mov	r15, r26
    2656:	01 2d       	mov	r16, r1
    2658:	11 2d       	mov	r17, r1
    265a:	ae 0c       	add	r10, r14
    265c:	bf 1c       	adc	r11, r15
    265e:	c0 1e       	adc	r12, r16
    2660:	d1 1e       	adc	r13, r17
            freeClusters++;;
        
         totalClusterCount++;
         if(totalClusterCount == (totalClusters+2)) break;
      }  
      if(i < 128) break;
    2662:	80 38       	cpi	r24, 0x80	; 128
    2664:	91 05       	cpc	r25, r1
    2666:	18 f0       	brcs	.+6      	; 0x266e <memoryStatistics+0x1bc>
    2668:	19 01       	movw	r2, r18
    266a:	2a 01       	movw	r4, r20
    266c:	9b cf       	rjmp	.-202    	; 0x25a4 <memoryStatistics+0xf2>
      cluster+=128;
    } 
}

if(!freeClusterCountUpdated)
    266e:	80 91 e8 02 	lds	r24, 0x02E8
    2672:	88 23       	and	r24, r24
    2674:	31 f4       	brne	.+12     	; 0x2682 <memoryStatistics+0x1d0>
  getSetFreeCluster (TOTAL_FREE, SET, freeClusters); //update FSinfo next free cluster entry
    2676:	81 e0       	ldi	r24, 0x01	; 1
    2678:	61 e0       	ldi	r22, 0x01	; 1
    267a:	a4 01       	movw	r20, r8
    267c:	93 01       	movw	r18, r6
    267e:	0e 94 71 11 	call	0x22e2	; 0x22e2 <getSetFreeCluster>
freeClusterCountUpdated = 1;  //set flag
    2682:	81 e0       	ldi	r24, 0x01	; 1
    2684:	80 93 e8 02 	sts	0x02E8, r24
freeMemory = freeClusters * sectorPerCluster / 1024;
    2688:	20 91 d6 02 	lds	r18, 0x02D6
    268c:	30 91 d7 02 	lds	r19, 0x02D7
    2690:	40 e0       	ldi	r20, 0x00	; 0
    2692:	50 e0       	ldi	r21, 0x00	; 0
    2694:	c4 01       	movw	r24, r8
    2696:	b3 01       	movw	r22, r6
    2698:	0e 94 28 21 	call	0x4250	; 0x4250 <__mulsi3>
    269c:	5b 01       	movw	r10, r22
    269e:	6c 01       	movw	r12, r24
    26a0:	fa e0       	ldi	r31, 0x0A	; 10
    26a2:	d6 94       	lsr	r13
    26a4:	c7 94       	ror	r12
    26a6:	b7 94       	ror	r11
    26a8:	a7 94       	ror	r10
    26aa:	fa 95       	dec	r31
    26ac:	d1 f7       	brne	.-12     	; 0x26a2 <memoryStatistics+0x1f0>
freeMemory *= bytesPerSector ;
    26ae:	e0 90 c6 00 	lds	r14, 0x00C6
    26b2:	f0 90 c7 00 	lds	r15, 0x00C7
TX_NEWLINE;
    26b6:	8d e0       	ldi	r24, 0x0D	; 13
    26b8:	0e 94 a4 20 	call	0x4148	; 0x4148 <transmitByte>
    26bc:	8a e0       	ldi	r24, 0x0A	; 10
    26be:	0e 94 a4 20 	call	0x4148	; 0x4148 <transmitByte>
transmitString_F(PSTR(" Free Memory: "));
    26c2:	84 ee       	ldi	r24, 0xE4	; 228
    26c4:	9a e1       	ldi	r25, 0x1A	; 26
    26c6:	0e 94 a8 20 	call	0x4150	; 0x4150 <transmitString_F>
displayMemory (HIGH, freeMemory);
    26ca:	00 e0       	ldi	r16, 0x00	; 0
    26cc:	10 e0       	ldi	r17, 0x00	; 0
    26ce:	c6 01       	movw	r24, r12
    26d0:	b5 01       	movw	r22, r10
    26d2:	a8 01       	movw	r20, r16
    26d4:	97 01       	movw	r18, r14
    26d6:	0e 94 28 21 	call	0x4250	; 0x4250 <__mulsi3>
    26da:	ab 01       	movw	r20, r22
    26dc:	bc 01       	movw	r22, r24
    26de:	81 e0       	ldi	r24, 0x01	; 1
    26e0:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <displayMemory>
TX_NEWLINE; 
    26e4:	8d e0       	ldi	r24, 0x0D	; 13
    26e6:	0e 94 a4 20 	call	0x4148	; 0x4148 <transmitByte>
    26ea:	8a e0       	ldi	r24, 0x0A	; 10
    26ec:	0e 94 a4 20 	call	0x4148	; 0x4148 <transmitByte>
}
    26f0:	1f 91       	pop	r17
    26f2:	0f 91       	pop	r16
    26f4:	ff 90       	pop	r15
    26f6:	ef 90       	pop	r14
    26f8:	df 90       	pop	r13
    26fa:	cf 90       	pop	r12
    26fc:	bf 90       	pop	r11
    26fe:	af 90       	pop	r10
    2700:	9f 90       	pop	r9
    2702:	8f 90       	pop	r8
    2704:	7f 90       	pop	r7
    2706:	6f 90       	pop	r6
    2708:	5f 90       	pop	r5
    270a:	4f 90       	pop	r4
    270c:	3f 90       	pop	r3
    270e:	2f 90       	pop	r2
    2710:	08 95       	ret

00002712 <getBootSectorData>:
//parameters like bytesPerSector, sectorsPerCluster etc.
//Arguments: none
//return: none
//***************************************************************************
unsigned char getBootSectorData (void)
{
    2712:	6f 92       	push	r6
    2714:	7f 92       	push	r7
    2716:	8f 92       	push	r8
    2718:	9f 92       	push	r9
    271a:	af 92       	push	r10
    271c:	bf 92       	push	r11
    271e:	cf 92       	push	r12
    2720:	df 92       	push	r13
    2722:	ef 92       	push	r14
    2724:	ff 92       	push	r15
    2726:	0f 93       	push	r16
    2728:	1f 93       	push	r17
struct BS_Structure *bpb; //mapping the buffer onto the structure
struct MBRinfo_Structure *mbr;
struct partitionInfo_Structure *partition;
unsigned long dataSectors;

unusedSectors = 0;
    272a:	10 92 d8 02 	sts	0x02D8, r1
    272e:	10 92 d9 02 	sts	0x02D9, r1
    2732:	10 92 da 02 	sts	0x02DA, r1
    2736:	10 92 db 02 	sts	0x02DB, r1

SD_readSingleBlock(0);
    273a:	60 e0       	ldi	r22, 0x00	; 0
    273c:	70 e0       	ldi	r23, 0x00	; 0
    273e:	80 e0       	ldi	r24, 0x00	; 0
    2740:	90 e0       	ldi	r25, 0x00	; 0
    2742:	0e 94 97 1f 	call	0x3f2e	; 0x3f2e <SD_readSingleBlock>
bpb = (struct BS_Structure *)buffer;

if(bpb->jumpBoot[0]!=0xE9 && bpb->jumpBoot[0]!=0xEB)   //check if it is boot sector
    2746:	80 91 d6 00 	lds	r24, 0x00D6
    274a:	89 3e       	cpi	r24, 0xE9	; 233
    274c:	19 f1       	breq	.+70     	; 0x2794 <getBootSectorData+0x82>
    274e:	8b 3e       	cpi	r24, 0xEB	; 235
    2750:	09 f1       	breq	.+66     	; 0x2794 <getBootSectorData+0x82>
{
  mbr = (struct MBRinfo_Structure *) buffer;       //if it is not boot sector, it must be MBR
  
  if(mbr->signature != 0xaa55) return 1;       //if it is not even MBR then it's not FAT32
    2752:	80 91 d4 02 	lds	r24, 0x02D4
    2756:	90 91 d5 02 	lds	r25, 0x02D5
    275a:	85 55       	subi	r24, 0x55	; 85
    275c:	9a 4a       	sbci	r25, 0xAA	; 170
    275e:	09 f0       	breq	.+2      	; 0x2762 <getBootSectorData+0x50>
    2760:	b0 c0       	rjmp	.+352    	; 0x28c2 <getBootSectorData+0x1b0>
  	
  partition = (struct partitionInfo_Structure *)(mbr->partitionData);//first partition
  unusedSectors = partition->firstSector; //the unused sectors, hidden to the FAT
    2762:	60 91 9c 02 	lds	r22, 0x029C
    2766:	70 91 9d 02 	lds	r23, 0x029D
    276a:	80 91 9e 02 	lds	r24, 0x029E
    276e:	90 91 9f 02 	lds	r25, 0x029F
    2772:	60 93 d8 02 	sts	0x02D8, r22
    2776:	70 93 d9 02 	sts	0x02D9, r23
    277a:	80 93 da 02 	sts	0x02DA, r24
    277e:	90 93 db 02 	sts	0x02DB, r25
  
  SD_readSingleBlock(partition->firstSector);//read the bpb sector
    2782:	0e 94 97 1f 	call	0x3f2e	; 0x3f2e <SD_readSingleBlock>
  bpb = (struct BS_Structure *)buffer;
  if(bpb->jumpBoot[0]!=0xE9 && bpb->jumpBoot[0]!=0xEB) return 1; 
    2786:	80 91 d6 00 	lds	r24, 0x00D6
    278a:	89 3e       	cpi	r24, 0xE9	; 233
    278c:	19 f0       	breq	.+6      	; 0x2794 <getBootSectorData+0x82>
    278e:	8b 3e       	cpi	r24, 0xEB	; 235
    2790:	09 f0       	breq	.+2      	; 0x2794 <getBootSectorData+0x82>
    2792:	97 c0       	rjmp	.+302    	; 0x28c2 <getBootSectorData+0x1b0>
}

bytesPerSector = bpb->bytesPerSector;
    2794:	80 91 e1 00 	lds	r24, 0x00E1
    2798:	90 91 e2 00 	lds	r25, 0x00E2
    279c:	90 93 c7 00 	sts	0x00C7, r25
    27a0:	80 93 c6 00 	sts	0x00C6, r24
//transmitHex(INT, bytesPerSector); transmitByte(' ');
sectorPerCluster = bpb->sectorPerCluster;
    27a4:	80 91 e3 00 	lds	r24, 0x00E3
    27a8:	90 e0       	ldi	r25, 0x00	; 0
    27aa:	90 93 d7 02 	sts	0x02D7, r25
    27ae:	80 93 d6 02 	sts	0x02D6, r24
//transmitHex(INT, sectorPerCluster); transmitByte(' ');
reservedSectorCount = bpb->reservedSectorCount;
    27b2:	a0 90 e4 00 	lds	r10, 0x00E4
    27b6:	b0 90 e5 00 	lds	r11, 0x00E5
    27ba:	b0 92 e2 02 	sts	0x02E2, r11
    27be:	a0 92 e1 02 	sts	0x02E1, r10
rootCluster = bpb->rootCluster;// + (sector / sectorPerCluster) +1;
    27c2:	80 91 02 01 	lds	r24, 0x0102
    27c6:	90 91 03 01 	lds	r25, 0x0103
    27ca:	a0 91 04 01 	lds	r26, 0x0104
    27ce:	b0 91 05 01 	lds	r27, 0x0105
    27d2:	80 93 cc 00 	sts	0x00CC, r24
    27d6:	90 93 cd 00 	sts	0x00CD, r25
    27da:	a0 93 ce 00 	sts	0x00CE, r26
    27de:	b0 93 cf 00 	sts	0x00CF, r27
firstDataSector = bpb->hiddenSectors + reservedSectorCount + (bpb->numberofFATs * bpb->FATsize_F32);
    27e2:	e0 90 e1 02 	lds	r14, 0x02E1
    27e6:	f0 90 e2 02 	lds	r15, 0x02E2
    27ea:	60 91 e6 00 	lds	r22, 0x00E6
    27ee:	70 e0       	ldi	r23, 0x00	; 0
    27f0:	80 e0       	ldi	r24, 0x00	; 0
    27f2:	90 e0       	ldi	r25, 0x00	; 0
    27f4:	20 91 fa 00 	lds	r18, 0x00FA
    27f8:	30 91 fb 00 	lds	r19, 0x00FB
    27fc:	40 91 fc 00 	lds	r20, 0x00FC
    2800:	50 91 fd 00 	lds	r21, 0x00FD
    2804:	0e 94 28 21 	call	0x4250	; 0x4250 <__mulsi3>
    2808:	3b 01       	movw	r6, r22
    280a:	4c 01       	movw	r8, r24
    280c:	00 e0       	ldi	r16, 0x00	; 0
    280e:	10 e0       	ldi	r17, 0x00	; 0
    2810:	80 91 f2 00 	lds	r24, 0x00F2
    2814:	90 91 f3 00 	lds	r25, 0x00F3
    2818:	a0 91 f4 00 	lds	r26, 0x00F4
    281c:	b0 91 f5 00 	lds	r27, 0x00F5
    2820:	e8 0e       	add	r14, r24
    2822:	f9 1e       	adc	r15, r25
    2824:	0a 1f       	adc	r16, r26
    2826:	1b 1f       	adc	r17, r27
    2828:	e6 0c       	add	r14, r6
    282a:	f7 1c       	adc	r15, r7
    282c:	08 1d       	adc	r16, r8
    282e:	19 1d       	adc	r17, r9
    2830:	e0 92 be 00 	sts	0x00BE, r14
    2834:	f0 92 bf 00 	sts	0x00BF, r15
    2838:	00 93 c0 00 	sts	0x00C0, r16
    283c:	10 93 c1 00 	sts	0x00C1, r17

dataSectors = bpb->totalSectors_F32
              - bpb->reservedSectorCount
              - ( bpb->numberofFATs * bpb->FATsize_F32);
totalClusters = dataSectors / sectorPerCluster;
    2840:	20 91 d6 02 	lds	r18, 0x02D6
    2844:	30 91 d7 02 	lds	r19, 0x02D7
    2848:	cc 24       	eor	r12, r12
    284a:	dd 24       	eor	r13, r13
    284c:	60 91 f6 00 	lds	r22, 0x00F6
    2850:	70 91 f7 00 	lds	r23, 0x00F7
    2854:	80 91 f8 00 	lds	r24, 0x00F8
    2858:	90 91 f9 00 	lds	r25, 0x00F9
    285c:	6a 19       	sub	r22, r10
    285e:	7b 09       	sbc	r23, r11
    2860:	8c 09       	sbc	r24, r12
    2862:	9d 09       	sbc	r25, r13
    2864:	66 19       	sub	r22, r6
    2866:	77 09       	sbc	r23, r7
    2868:	88 09       	sbc	r24, r8
    286a:	99 09       	sbc	r25, r9
    286c:	40 e0       	ldi	r20, 0x00	; 0
    286e:	50 e0       	ldi	r21, 0x00	; 0
    2870:	0e 94 47 21 	call	0x428e	; 0x428e <__udivmodsi4>
    2874:	c9 01       	movw	r24, r18
    2876:	da 01       	movw	r26, r20
    2878:	80 93 c8 00 	sts	0x00C8, r24
    287c:	90 93 c9 00 	sts	0x00C9, r25
    2880:	a0 93 ca 00 	sts	0x00CA, r26
    2884:	b0 93 cb 00 	sts	0x00CB, r27
//transmitHex(LONG, totalClusters); transmitByte(' ');

if((getSetFreeCluster (TOTAL_FREE, GET, 0)) > totalClusters)  //check if FSinfo free clusters count is valid
    2888:	81 e0       	ldi	r24, 0x01	; 1
    288a:	60 e0       	ldi	r22, 0x00	; 0
    288c:	20 e0       	ldi	r18, 0x00	; 0
    288e:	30 e0       	ldi	r19, 0x00	; 0
    2890:	40 e0       	ldi	r20, 0x00	; 0
    2892:	50 e0       	ldi	r21, 0x00	; 0
    2894:	0e 94 71 11 	call	0x22e2	; 0x22e2 <getSetFreeCluster>
    2898:	20 91 c8 00 	lds	r18, 0x00C8
    289c:	30 91 c9 00 	lds	r19, 0x00C9
    28a0:	40 91 ca 00 	lds	r20, 0x00CA
    28a4:	50 91 cb 00 	lds	r21, 0x00CB
    28a8:	26 17       	cp	r18, r22
    28aa:	37 07       	cpc	r19, r23
    28ac:	48 07       	cpc	r20, r24
    28ae:	59 07       	cpc	r21, r25
    28b0:	18 f4       	brcc	.+6      	; 0x28b8 <getBootSectorData+0x1a6>
     freeClusterCountUpdated = 0;
    28b2:	10 92 e8 02 	sts	0x02E8, r1
    28b6:	03 c0       	rjmp	.+6      	; 0x28be <getBootSectorData+0x1ac>
else
	 freeClusterCountUpdated = 1;
    28b8:	81 e0       	ldi	r24, 0x01	; 1
    28ba:	80 93 e8 02 	sts	0x02E8, r24
    28be:	80 e0       	ldi	r24, 0x00	; 0
    28c0:	01 c0       	rjmp	.+2      	; 0x28c4 <getBootSectorData+0x1b2>
    28c2:	81 e0       	ldi	r24, 0x01	; 1
return 0;
}
    28c4:	1f 91       	pop	r17
    28c6:	0f 91       	pop	r16
    28c8:	ff 90       	pop	r15
    28ca:	ef 90       	pop	r14
    28cc:	df 90       	pop	r13
    28ce:	cf 90       	pop	r12
    28d0:	bf 90       	pop	r11
    28d2:	af 90       	pop	r10
    28d4:	9f 90       	pop	r9
    28d6:	8f 90       	pop	r8
    28d8:	7f 90       	pop	r7
    28da:	6f 90       	pop	r6
    28dc:	08 95       	ret

000028de <getSetNextCluster>:
//return: next cluster number, if if argument#2 = GET, else 0
//****************************************************************************
unsigned long getSetNextCluster (unsigned long clusterNumber,
                                 unsigned char get_set,
                                 unsigned long clusterEntry)
{
    28de:	4f 92       	push	r4
    28e0:	5f 92       	push	r5
    28e2:	6f 92       	push	r6
    28e4:	7f 92       	push	r7
    28e6:	8f 92       	push	r8
    28e8:	9f 92       	push	r9
    28ea:	af 92       	push	r10
    28ec:	bf 92       	push	r11
    28ee:	cf 92       	push	r12
    28f0:	df 92       	push	r13
    28f2:	ef 92       	push	r14
    28f4:	ff 92       	push	r15
    28f6:	0f 93       	push	r16
    28f8:	1f 93       	push	r17
    28fa:	cf 93       	push	r28
    28fc:	df 93       	push	r29
    28fe:	5b 01       	movw	r10, r22
    2900:	6c 01       	movw	r12, r24
    2902:	84 2e       	mov	r8, r20
    2904:	28 01       	movw	r4, r16
    2906:	39 01       	movw	r6, r18
unsigned long *FATEntryValue;
unsigned long FATEntrySector;
unsigned char retry = 0;

//get sector number of the cluster entry in the FAT
FATEntrySector = unusedSectors + reservedSectorCount + ((clusterNumber * 4) / bytesPerSector) ;
    2908:	80 91 e1 02 	lds	r24, 0x02E1
    290c:	90 91 e2 02 	lds	r25, 0x02E2
    2910:	02 e0       	ldi	r16, 0x02	; 2
    2912:	aa 0c       	add	r10, r10
    2914:	bb 1c       	adc	r11, r11
    2916:	cc 1c       	adc	r12, r12
    2918:	dd 1c       	adc	r13, r13
    291a:	0a 95       	dec	r16
    291c:	d1 f7       	brne	.-12     	; 0x2912 <getSetNextCluster+0x34>
    291e:	20 91 c6 00 	lds	r18, 0x00C6
    2922:	30 91 c7 00 	lds	r19, 0x00C7
    2926:	7c 01       	movw	r14, r24
    2928:	00 e0       	ldi	r16, 0x00	; 0
    292a:	10 e0       	ldi	r17, 0x00	; 0
    292c:	80 91 d8 02 	lds	r24, 0x02D8
    2930:	90 91 d9 02 	lds	r25, 0x02D9
    2934:	a0 91 da 02 	lds	r26, 0x02DA
    2938:	b0 91 db 02 	lds	r27, 0x02DB
    293c:	e8 0e       	add	r14, r24
    293e:	f9 1e       	adc	r15, r25
    2940:	0a 1f       	adc	r16, r26
    2942:	1b 1f       	adc	r17, r27
    2944:	40 e0       	ldi	r20, 0x00	; 0
    2946:	50 e0       	ldi	r21, 0x00	; 0
    2948:	c6 01       	movw	r24, r12
    294a:	b5 01       	movw	r22, r10
    294c:	0e 94 47 21 	call	0x428e	; 0x428e <__udivmodsi4>
    2950:	e2 0e       	add	r14, r18
    2952:	f3 1e       	adc	r15, r19
    2954:	04 1f       	adc	r16, r20
    2956:	15 1f       	adc	r17, r21

//get the offset address in that sector number
FATEntryOffset = (unsigned int) ((clusterNumber * 4) % bytesPerSector);
    2958:	c0 91 c6 00 	lds	r28, 0x00C6
    295c:	d0 91 c7 00 	lds	r29, 0x00C7
    2960:	99 24       	eor	r9, r9

//read the sector into a buffer
while(retry <10)
{ if(!SD_readSingleBlock(FATEntrySector)) break; retry++;}
    2962:	c8 01       	movw	r24, r16
    2964:	b7 01       	movw	r22, r14
    2966:	0e 94 97 1f 	call	0x3f2e	; 0x3f2e <SD_readSingleBlock>
    296a:	88 23       	and	r24, r24
    296c:	21 f0       	breq	.+8      	; 0x2976 <getSetNextCluster+0x98>
    296e:	93 94       	inc	r9

//get the offset address in that sector number
FATEntryOffset = (unsigned int) ((clusterNumber * 4) % bytesPerSector);

//read the sector into a buffer
while(retry <10)
    2970:	8a e0       	ldi	r24, 0x0A	; 10
    2972:	98 16       	cp	r9, r24
    2974:	b1 f7       	brne	.-20     	; 0x2962 <getSetNextCluster+0x84>
{ if(!SD_readSingleBlock(FATEntrySector)) break; retry++;}

//get the cluster address from the buffer
FATEntryValue = (unsigned long *) &buffer[FATEntryOffset];
    2976:	9e 01       	movw	r18, r28
    2978:	40 e0       	ldi	r20, 0x00	; 0
    297a:	50 e0       	ldi	r21, 0x00	; 0
    297c:	c6 01       	movw	r24, r12
    297e:	b5 01       	movw	r22, r10
    2980:	0e 94 47 21 	call	0x428e	; 0x428e <__udivmodsi4>
    2984:	fb 01       	movw	r30, r22
    2986:	ea 52       	subi	r30, 0x2A	; 42
    2988:	ff 4f       	sbci	r31, 0xFF	; 255

if(get_set == GET)
    298a:	88 20       	and	r8, r8
    298c:	31 f4       	brne	.+12     	; 0x299a <getSetNextCluster+0xbc>
  return ((*FATEntryValue) & 0x0fffffff);
    298e:	20 81       	ld	r18, Z
    2990:	31 81       	ldd	r19, Z+1	; 0x01
    2992:	42 81       	ldd	r20, Z+2	; 0x02
    2994:	53 81       	ldd	r21, Z+3	; 0x03
    2996:	5f 70       	andi	r21, 0x0F	; 15
    2998:	0c c0       	rjmp	.+24     	; 0x29b2 <getSetNextCluster+0xd4>


*FATEntryValue = clusterEntry;   //for setting new value in cluster entry in FAT
    299a:	40 82       	st	Z, r4
    299c:	51 82       	std	Z+1, r5	; 0x01
    299e:	62 82       	std	Z+2, r6	; 0x02
    29a0:	73 82       	std	Z+3, r7	; 0x03

SD_writeSingleBlock(FATEntrySector);
    29a2:	c8 01       	movw	r24, r16
    29a4:	b7 01       	movw	r22, r14
    29a6:	0e 94 49 1f 	call	0x3e92	; 0x3e92 <SD_writeSingleBlock>
    29aa:	20 e0       	ldi	r18, 0x00	; 0
    29ac:	30 e0       	ldi	r19, 0x00	; 0
    29ae:	40 e0       	ldi	r20, 0x00	; 0
    29b0:	50 e0       	ldi	r21, 0x00	; 0

return (0);
}
    29b2:	b9 01       	movw	r22, r18
    29b4:	ca 01       	movw	r24, r20
    29b6:	df 91       	pop	r29
    29b8:	cf 91       	pop	r28
    29ba:	1f 91       	pop	r17
    29bc:	0f 91       	pop	r16
    29be:	ff 90       	pop	r15
    29c0:	ef 90       	pop	r14
    29c2:	df 90       	pop	r13
    29c4:	cf 90       	pop	r12
    29c6:	bf 90       	pop	r11
    29c8:	af 90       	pop	r10
    29ca:	9f 90       	pop	r9
    29cc:	8f 90       	pop	r8
    29ce:	7f 90       	pop	r7
    29d0:	6f 90       	pop	r6
    29d2:	5f 90       	pop	r5
    29d4:	4f 90       	pop	r4
    29d6:	08 95       	ret

000029d8 <findFiles>:
//return: first cluster of the file, if flag = GET_FILE
//        print file/dir list of the root directory, if flag = GET_LIST
//		  Delete the file mentioned in arg#2, if flag = DELETE
//****************************************************************************
struct dir_Structure* findFiles (unsigned char flag, unsigned char *fileName)
{
    29d8:	2f 92       	push	r2
    29da:	3f 92       	push	r3
    29dc:	4f 92       	push	r4
    29de:	5f 92       	push	r5
    29e0:	6f 92       	push	r6
    29e2:	7f 92       	push	r7
    29e4:	8f 92       	push	r8
    29e6:	9f 92       	push	r9
    29e8:	af 92       	push	r10
    29ea:	bf 92       	push	r11
    29ec:	cf 92       	push	r12
    29ee:	df 92       	push	r13
    29f0:	ef 92       	push	r14
    29f2:	ff 92       	push	r15
    29f4:	0f 93       	push	r16
    29f6:	1f 93       	push	r17
    29f8:	df 93       	push	r29
    29fa:	cf 93       	push	r28
    29fc:	cd b7       	in	r28, 0x3d	; 61
    29fe:	de b7       	in	r29, 0x3e	; 62
    2a00:	2a 97       	sbiw	r28, 0x0a	; 10
    2a02:	0f b6       	in	r0, 0x3f	; 63
    2a04:	f8 94       	cli
    2a06:	de bf       	out	0x3e, r29	; 62
    2a08:	0f be       	out	0x3f, r0	; 63
    2a0a:	cd bf       	out	0x3d, r28	; 61
    2a0c:	8d 83       	std	Y+5, r24	; 0x05
    2a0e:	7f 83       	std	Y+7, r23	; 0x07
    2a10:	6e 83       	std	Y+6, r22	; 0x06
unsigned long cluster, sector, firstSector, firstCluster, nextCluster;
struct dir_Structure *dir;
unsigned int i;
unsigned char j;

cluster = rootCluster; //root cluster
    2a12:	a0 90 cc 00 	lds	r10, 0x00CC
    2a16:	b0 90 cd 00 	lds	r11, 0x00CD
    2a1a:	c0 90 ce 00 	lds	r12, 0x00CE
    2a1e:	d0 90 cf 00 	lds	r13, 0x00CF
		      transmitString_F(PSTR("File does not exist!"));
		  return 0;   
		}
		if((dir->name[0] != DELETED) && (dir->attrib != ATTR_LONG_NAME))
        {
          if((flag == GET_FILE) || (flag == DELETE))
    2a22:	81 50       	subi	r24, 0x01	; 1
    2a24:	88 87       	std	Y+8, r24	; 0x08
//Arguments: cluster number for which first sector is to be found
//return: first sector address
//***************************************************************************
unsigned long getFirstSector(unsigned long clusterNumber)
{
  return (((clusterNumber - 2) * sectorPerCluster) + firstDataSector);
    2a26:	20 91 d6 02 	lds	r18, 0x02D6
    2a2a:	30 91 d7 02 	lds	r19, 0x02D7
    2a2e:	e0 90 be 00 	lds	r14, 0x00BE
    2a32:	f0 90 bf 00 	lds	r15, 0x00BF
    2a36:	00 91 c0 00 	lds	r16, 0x00C0
    2a3a:	10 91 c1 00 	lds	r17, 0x00C1
    2a3e:	c6 01       	movw	r24, r12
    2a40:	b5 01       	movw	r22, r10
    2a42:	62 50       	subi	r22, 0x02	; 2
    2a44:	70 40       	sbci	r23, 0x00	; 0
    2a46:	80 40       	sbci	r24, 0x00	; 0
    2a48:	90 40       	sbci	r25, 0x00	; 0
    2a4a:	40 e0       	ldi	r20, 0x00	; 0
    2a4c:	50 e0       	ldi	r21, 0x00	; 0
    2a4e:	0e 94 28 21 	call	0x4250	; 0x4250 <__mulsi3>
    2a52:	1b 01       	movw	r2, r22
    2a54:	2c 01       	movw	r4, r24
    2a56:	2e 0c       	add	r2, r14
    2a58:	3f 1c       	adc	r3, r15
    2a5a:	40 1e       	adc	r4, r16
    2a5c:	51 1e       	adc	r5, r17
    2a5e:	66 24       	eor	r6, r6
    2a60:	77 24       	eor	r7, r7
    2a62:	43 01       	movw	r8, r6
    2a64:	60 c1       	rjmp	.+704    	; 0x2d26 <findFiles+0x34e>

while(1)
{
   firstSector = getFirstSector (cluster);

   for(sector = 0; sector < sectorPerCluster; sector++)
    2a66:	d4 01       	movw	r26, r8
    2a68:	c3 01       	movw	r24, r6
    2a6a:	82 0d       	add	r24, r2
    2a6c:	93 1d       	adc	r25, r3
    2a6e:	a4 1d       	adc	r26, r4
    2a70:	b5 1d       	adc	r27, r5
    2a72:	89 83       	std	Y+1, r24	; 0x01
    2a74:	9a 83       	std	Y+2, r25	; 0x02
    2a76:	ab 83       	std	Y+3, r26	; 0x03
    2a78:	bc 83       	std	Y+4, r27	; 0x04
   {
     SD_readSingleBlock (firstSector + sector);
    2a7a:	bc 01       	movw	r22, r24
    2a7c:	cd 01       	movw	r24, r26
    2a7e:	0e 94 97 1f 	call	0x3f2e	; 0x3f2e <SD_readSingleBlock>
    2a82:	40 e2       	ldi	r20, 0x20	; 32
    2a84:	e4 2e       	mov	r14, r20
    2a86:	f1 2c       	mov	r15, r1
    2a88:	3e c1       	rjmp	.+636    	; 0x2d06 <findFiles+0x32e>
	

     for(i=0; i<bytesPerSector; i+=32)
    2a8a:	8a 01       	movw	r16, r20
    2a8c:	0a 52       	subi	r16, 0x2A	; 42
    2a8e:	1f 4f       	sbci	r17, 0xFF	; 255
     {
	    dir = (struct dir_Structure *) &buffer[i];

        if(dir->name[0] == EMPTY) //indicates end of the file list of the directory
    2a90:	f7 01       	movw	r30, r14
    2a92:	ea 52       	subi	r30, 0x2A	; 42
    2a94:	ff 4f       	sbci	r31, 0xFF	; 255
    2a96:	b0 97       	sbiw	r30, 0x20	; 32
    2a98:	80 81       	ld	r24, Z
    2a9a:	b0 96       	adiw	r30, 0x20	; 32
    2a9c:	88 23       	and	r24, r24
    2a9e:	41 f4       	brne	.+16     	; 0x2ab0 <findFiles+0xd8>
		{
		  if((flag == GET_FILE) || (flag == DELETE))
    2aa0:	9d 81       	ldd	r25, Y+5	; 0x05
    2aa2:	91 50       	subi	r25, 0x01	; 1
    2aa4:	92 30       	cpi	r25, 0x02	; 2
    2aa6:	08 f0       	brcs	.+2      	; 0x2aaa <findFiles+0xd2>
    2aa8:	68 c1       	rjmp	.+720    	; 0x2d7a <findFiles+0x3a2>
		      transmitString_F(PSTR("File does not exist!"));
    2aaa:	8c e3       	ldi	r24, 0x3C	; 60
    2aac:	9c e1       	ldi	r25, 0x1C	; 28
    2aae:	63 c1       	rjmp	.+710    	; 0x2d76 <findFiles+0x39e>
		  return 0;   
		}
		if((dir->name[0] != DELETED) && (dir->attrib != ATTR_LONG_NAME))
    2ab0:	85 3e       	cpi	r24, 0xE5	; 229
    2ab2:	09 f4       	brne	.+2      	; 0x2ab6 <findFiles+0xde>
    2ab4:	24 c1       	rjmp	.+584    	; 0x2cfe <findFiles+0x326>
    2ab6:	75 97       	sbiw	r30, 0x15	; 21
    2ab8:	80 81       	ld	r24, Z
    2aba:	8f 30       	cpi	r24, 0x0F	; 15
    2abc:	09 f4       	brne	.+2      	; 0x2ac0 <findFiles+0xe8>
    2abe:	1f c1       	rjmp	.+574    	; 0x2cfe <findFiles+0x326>
        {
          if((flag == GET_FILE) || (flag == DELETE))
    2ac0:	a8 85       	ldd	r26, Y+8	; 0x08
    2ac2:	a2 30       	cpi	r26, 0x02	; 2
    2ac4:	08 f0       	brcs	.+2      	; 0x2ac8 <findFiles+0xf0>
    2ac6:	d2 c0       	rjmp	.+420    	; 0x2c6c <findFiles+0x294>
    2ac8:	20 e0       	ldi	r18, 0x00	; 0
    2aca:	30 e0       	ldi	r19, 0x00	; 0
          {
            for(j=0; j<11; j++)
            if(dir->name[j] != fileName[j]) break;
    2acc:	c8 01       	movw	r24, r16
    2ace:	82 0f       	add	r24, r18
    2ad0:	93 1f       	adc	r25, r19
    2ad2:	ae 81       	ldd	r26, Y+6	; 0x06
    2ad4:	bf 81       	ldd	r27, Y+7	; 0x07
    2ad6:	a2 0f       	add	r26, r18
    2ad8:	b3 1f       	adc	r27, r19
    2ada:	fc 01       	movw	r30, r24
    2adc:	90 81       	ld	r25, Z
    2ade:	8c 91       	ld	r24, X
    2ae0:	98 17       	cp	r25, r24
    2ae2:	09 f0       	breq	.+2      	; 0x2ae6 <findFiles+0x10e>
    2ae4:	0c c1       	rjmp	.+536    	; 0x2cfe <findFiles+0x326>
    2ae6:	82 2f       	mov	r24, r18
    2ae8:	8f 5f       	subi	r24, 0xFF	; 255
    2aea:	2f 5f       	subi	r18, 0xFF	; 255
    2aec:	3f 4f       	sbci	r19, 0xFF	; 255
		}
		if((dir->name[0] != DELETED) && (dir->attrib != ATTR_LONG_NAME))
        {
          if((flag == GET_FILE) || (flag == DELETE))
          {
            for(j=0; j<11; j++)
    2aee:	2b 30       	cpi	r18, 0x0B	; 11
    2af0:	31 05       	cpc	r19, r1
    2af2:	61 f7       	brne	.-40     	; 0x2acc <findFiles+0xf4>
            if(dir->name[j] != fileName[j]) break;
            if(j == 11)
    2af4:	8b 30       	cpi	r24, 0x0B	; 11
    2af6:	09 f0       	breq	.+2      	; 0x2afa <findFiles+0x122>
    2af8:	02 c1       	rjmp	.+516    	; 0x2cfe <findFiles+0x326>
			{
			  if(flag == GET_FILE)
    2afa:	fd 81       	ldd	r31, Y+5	; 0x05
    2afc:	f1 30       	cpi	r31, 0x01	; 1
    2afe:	09 f0       	breq	.+2      	; 0x2b02 <findFiles+0x12a>
    2b00:	3f c0       	rjmp	.+126    	; 0x2b80 <findFiles+0x1a8>
              {
			    appendFileSector = firstSector + sector;
    2b02:	89 81       	ldd	r24, Y+1	; 0x01
    2b04:	9a 81       	ldd	r25, Y+2	; 0x02
    2b06:	ab 81       	ldd	r26, Y+3	; 0x03
    2b08:	bc 81       	ldd	r27, Y+4	; 0x04
    2b0a:	80 93 e9 02 	sts	0x02E9, r24
    2b0e:	90 93 ea 02 	sts	0x02EA, r25
    2b12:	a0 93 eb 02 	sts	0x02EB, r26
    2b16:	b0 93 ec 02 	sts	0x02EC, r27
				appendFileLocation = i;
    2b1a:	ca 01       	movw	r24, r20
    2b1c:	a0 e0       	ldi	r26, 0x00	; 0
    2b1e:	b0 e0       	ldi	r27, 0x00	; 0
    2b20:	80 93 ba 00 	sts	0x00BA, r24
    2b24:	90 93 bb 00 	sts	0x00BB, r25
    2b28:	a0 93 bc 00 	sts	0x00BC, r26
    2b2c:	b0 93 bd 00 	sts	0x00BD, r27
				appendStartCluster = (((unsigned long) dir->firstClusterHI) << 16) | dir->firstClusterLO;
    2b30:	d8 01       	movw	r26, r16
    2b32:	54 96       	adiw	r26, 0x14	; 20
    2b34:	8d 91       	ld	r24, X+
    2b36:	9c 91       	ld	r25, X
    2b38:	55 97       	sbiw	r26, 0x15	; 21
    2b3a:	a0 e0       	ldi	r26, 0x00	; 0
    2b3c:	b0 e0       	ldi	r27, 0x00	; 0
    2b3e:	dc 01       	movw	r26, r24
    2b40:	99 27       	eor	r25, r25
    2b42:	88 27       	eor	r24, r24
    2b44:	f8 01       	movw	r30, r16
    2b46:	22 8d       	ldd	r18, Z+26	; 0x1a
    2b48:	33 8d       	ldd	r19, Z+27	; 0x1b
    2b4a:	40 e0       	ldi	r20, 0x00	; 0
    2b4c:	50 e0       	ldi	r21, 0x00	; 0
    2b4e:	82 2b       	or	r24, r18
    2b50:	93 2b       	or	r25, r19
    2b52:	a4 2b       	or	r26, r20
    2b54:	b5 2b       	or	r27, r21
    2b56:	80 93 e3 02 	sts	0x02E3, r24
    2b5a:	90 93 e4 02 	sts	0x02E4, r25
    2b5e:	a0 93 e5 02 	sts	0x02E5, r26
    2b62:	b0 93 e6 02 	sts	0x02E6, r27
				fileSize = dir->fileSize;
    2b66:	84 8d       	ldd	r24, Z+28	; 0x1c
    2b68:	95 8d       	ldd	r25, Z+29	; 0x1d
    2b6a:	a6 8d       	ldd	r26, Z+30	; 0x1e
    2b6c:	b7 8d       	ldd	r27, Z+31	; 0x1f
    2b6e:	80 93 c2 00 	sts	0x00C2, r24
    2b72:	90 93 c3 00 	sts	0x00C3, r25
    2b76:	a0 93 c4 00 	sts	0x00C4, r26
    2b7a:	b0 93 c5 00 	sts	0x00C5, r27
    2b7e:	ff c0       	rjmp	.+510    	; 0x2d7e <findFiles+0x3a6>
			    return (dir);
			  }	
			  else    //when flag = DELETE
			  {
			     TX_NEWLINE;
    2b80:	8d e0       	ldi	r24, 0x0D	; 13
    2b82:	0e 94 a4 20 	call	0x4148	; 0x4148 <transmitByte>
    2b86:	8a e0       	ldi	r24, 0x0A	; 10
    2b88:	0e 94 a4 20 	call	0x4148	; 0x4148 <transmitByte>
				 transmitString_F(PSTR("Deleting.."));
    2b8c:	81 e3       	ldi	r24, 0x31	; 49
    2b8e:	9c e1       	ldi	r25, 0x1C	; 28
    2b90:	0e 94 a8 20 	call	0x4150	; 0x4150 <transmitString_F>
				 TX_NEWLINE;
    2b94:	8d e0       	ldi	r24, 0x0D	; 13
    2b96:	0e 94 a4 20 	call	0x4148	; 0x4148 <transmitByte>
    2b9a:	8a e0       	ldi	r24, 0x0A	; 10
    2b9c:	0e 94 a4 20 	call	0x4148	; 0x4148 <transmitByte>
				 TX_NEWLINE;
    2ba0:	8d e0       	ldi	r24, 0x0D	; 13
    2ba2:	0e 94 a4 20 	call	0x4148	; 0x4148 <transmitByte>
    2ba6:	8a e0       	ldi	r24, 0x0A	; 10
    2ba8:	0e 94 a4 20 	call	0x4148	; 0x4148 <transmitByte>
				 firstCluster = (((unsigned long) dir->firstClusterHI) << 16) | dir->firstClusterLO;
    2bac:	d8 01       	movw	r26, r16
    2bae:	54 96       	adiw	r26, 0x14	; 20
    2bb0:	8d 91       	ld	r24, X+
    2bb2:	9c 91       	ld	r25, X
    2bb4:	55 97       	sbiw	r26, 0x15	; 21
    2bb6:	a0 e0       	ldi	r26, 0x00	; 0
    2bb8:	b0 e0       	ldi	r27, 0x00	; 0
    2bba:	5c 01       	movw	r10, r24
    2bbc:	99 24       	eor	r9, r9
    2bbe:	88 24       	eor	r8, r8
    2bc0:	f8 01       	movw	r30, r16
    2bc2:	82 8d       	ldd	r24, Z+26	; 0x1a
    2bc4:	93 8d       	ldd	r25, Z+27	; 0x1b
    2bc6:	a0 e0       	ldi	r26, 0x00	; 0
    2bc8:	b0 e0       	ldi	r27, 0x00	; 0
    2bca:	88 2a       	or	r8, r24
    2bcc:	99 2a       	or	r9, r25
    2bce:	aa 2a       	or	r10, r26
    2bd0:	bb 2a       	or	r11, r27
                
				 //mark file as 'deleted' in FAT table
				 dir->name[0] = DELETED;    
    2bd2:	85 ee       	ldi	r24, 0xE5	; 229
    2bd4:	80 83       	st	Z, r24
				 SD_writeSingleBlock (firstSector+sector);
    2bd6:	69 81       	ldd	r22, Y+1	; 0x01
    2bd8:	7a 81       	ldd	r23, Y+2	; 0x02
    2bda:	8b 81       	ldd	r24, Y+3	; 0x03
    2bdc:	9c 81       	ldd	r25, Y+4	; 0x04
    2bde:	0e 94 49 1f 	call	0x3e92	; 0x3e92 <SD_writeSingleBlock>
				 			 
				 freeMemoryUpdate (ADD, dir->fileSize);
    2be2:	d8 01       	movw	r26, r16
    2be4:	5c 96       	adiw	r26, 0x1c	; 28
    2be6:	4d 91       	ld	r20, X+
    2be8:	5d 91       	ld	r21, X+
    2bea:	6d 91       	ld	r22, X+
    2bec:	7c 91       	ld	r23, X
    2bee:	5f 97       	sbiw	r26, 0x1f	; 31
    2bf0:	80 e0       	ldi	r24, 0x00	; 0
    2bf2:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <freeMemoryUpdate>

				 //update next free cluster entry in FSinfo sector
				 cluster = getSetFreeCluster (NEXT_FREE, GET, 0); 
    2bf6:	82 e0       	ldi	r24, 0x02	; 2
    2bf8:	60 e0       	ldi	r22, 0x00	; 0
    2bfa:	20 e0       	ldi	r18, 0x00	; 0
    2bfc:	30 e0       	ldi	r19, 0x00	; 0
    2bfe:	40 e0       	ldi	r20, 0x00	; 0
    2c00:	50 e0       	ldi	r21, 0x00	; 0
    2c02:	0e 94 71 11 	call	0x22e2	; 0x22e2 <getSetFreeCluster>
				 if(firstCluster < cluster)
    2c06:	86 16       	cp	r8, r22
    2c08:	97 06       	cpc	r9, r23
    2c0a:	a8 06       	cpc	r10, r24
    2c0c:	b9 06       	cpc	r11, r25
    2c0e:	30 f4       	brcc	.+12     	; 0x2c1c <findFiles+0x244>
				     getSetFreeCluster (NEXT_FREE, SET, firstCluster);
    2c10:	82 e0       	ldi	r24, 0x02	; 2
    2c12:	61 e0       	ldi	r22, 0x01	; 1
    2c14:	a5 01       	movw	r20, r10
    2c16:	94 01       	movw	r18, r8
    2c18:	0e 94 71 11 	call	0x22e2	; 0x22e2 <getSetFreeCluster>

				 //mark all the clusters allocated to the file as 'free'
			     while(1)  
			     {
			        nextCluster = getSetNextCluster (firstCluster, GET, 0);
    2c1c:	c5 01       	movw	r24, r10
    2c1e:	b4 01       	movw	r22, r8
    2c20:	40 e0       	ldi	r20, 0x00	; 0
    2c22:	00 e0       	ldi	r16, 0x00	; 0
    2c24:	10 e0       	ldi	r17, 0x00	; 0
    2c26:	20 e0       	ldi	r18, 0x00	; 0
    2c28:	30 e0       	ldi	r19, 0x00	; 0
    2c2a:	0e 94 6f 14 	call	0x28de	; 0x28de <getSetNextCluster>
    2c2e:	f6 2e       	mov	r15, r22
    2c30:	e7 2e       	mov	r14, r23
    2c32:	d8 2e       	mov	r13, r24
    2c34:	c9 2e       	mov	r12, r25
					getSetNextCluster (firstCluster, SET, 0);
    2c36:	c5 01       	movw	r24, r10
    2c38:	b4 01       	movw	r22, r8
    2c3a:	41 e0       	ldi	r20, 0x01	; 1
    2c3c:	00 e0       	ldi	r16, 0x00	; 0
    2c3e:	10 e0       	ldi	r17, 0x00	; 0
    2c40:	20 e0       	ldi	r18, 0x00	; 0
    2c42:	30 e0       	ldi	r19, 0x00	; 0
    2c44:	0e 94 6f 14 	call	0x28de	; 0x28de <getSetNextCluster>
    2c48:	8f 2d       	mov	r24, r15
    2c4a:	9e 2d       	mov	r25, r14
    2c4c:	ad 2d       	mov	r26, r13
    2c4e:	bc 2d       	mov	r27, r12
    2c50:	4c 01       	movw	r8, r24
    2c52:	5d 01       	movw	r10, r26
					if(nextCluster > 0x0ffffff6) 
    2c54:	b7 ef       	ldi	r27, 0xF7	; 247
    2c56:	8b 16       	cp	r8, r27
    2c58:	bf ef       	ldi	r27, 0xFF	; 255
    2c5a:	9b 06       	cpc	r9, r27
    2c5c:	bf ef       	ldi	r27, 0xFF	; 255
    2c5e:	ab 06       	cpc	r10, r27
    2c60:	bf e0       	ldi	r27, 0x0F	; 15
    2c62:	bb 06       	cpc	r11, r27
    2c64:	d8 f2       	brcs	.-74     	; 0x2c1c <findFiles+0x244>
					   {transmitString_F(PSTR("File deleted!"));return 0;}
    2c66:	83 e2       	ldi	r24, 0x23	; 35
    2c68:	9c e1       	ldi	r25, 0x1C	; 28
    2c6a:	85 c0       	rjmp	.+266    	; 0x2d76 <findFiles+0x39e>
			  }
            }
          }
          else  //when flag = GET_LIST
		  {
		     TX_NEWLINE;
    2c6c:	8d e0       	ldi	r24, 0x0D	; 13
    2c6e:	0e 94 a4 20 	call	0x4148	; 0x4148 <transmitByte>
    2c72:	8a e0       	ldi	r24, 0x0A	; 10
    2c74:	0e 94 a4 20 	call	0x4148	; 0x4148 <transmitByte>
    2c78:	1a 86       	std	Y+10, r1	; 0x0a
    2c7a:	19 86       	std	Y+9, r1	; 0x09
    2c7c:	0b c0       	rjmp	.+22     	; 0x2c94 <findFiles+0x2bc>
			 for(j=0; j<11; j++)
		     {
			   if(j == 8) transmitByte(' ');
    2c7e:	e9 85       	ldd	r30, Y+9	; 0x09
    2c80:	e7 30       	cpi	r30, 0x07	; 7
    2c82:	19 f4       	brne	.+6      	; 0x2c8a <findFiles+0x2b2>
    2c84:	80 e2       	ldi	r24, 0x20	; 32
    2c86:	0e 94 a4 20 	call	0x4148	; 0x4148 <transmitByte>
    2c8a:	89 85       	ldd	r24, Y+9	; 0x09
    2c8c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c8e:	01 96       	adiw	r24, 0x01	; 1
    2c90:	9a 87       	std	Y+10, r25	; 0x0a
    2c92:	89 87       	std	Y+9, r24	; 0x09
			   transmitByte (dir->name[j]);
    2c94:	e9 85       	ldd	r30, Y+9	; 0x09
    2c96:	fa 85       	ldd	r31, Y+10	; 0x0a
    2c98:	e0 0f       	add	r30, r16
    2c9a:	f1 1f       	adc	r31, r17
    2c9c:	80 81       	ld	r24, Z
    2c9e:	0e 94 a4 20 	call	0x4148	; 0x4148 <transmitByte>
            }
          }
          else  //when flag = GET_LIST
		  {
		     TX_NEWLINE;
			 for(j=0; j<11; j++)
    2ca2:	a9 85       	ldd	r26, Y+9	; 0x09
    2ca4:	ba 85       	ldd	r27, Y+10	; 0x0a
    2ca6:	1a 97       	sbiw	r26, 0x0a	; 10
    2ca8:	51 f7       	brne	.-44     	; 0x2c7e <findFiles+0x2a6>
		     {
			   if(j == 8) transmitByte(' ');
			   transmitByte (dir->name[j]);
			 }
		     transmitString_F (PSTR("   "));
    2caa:	8f e1       	ldi	r24, 0x1F	; 31
    2cac:	9c e1       	ldi	r25, 0x1C	; 28
    2cae:	0e 94 a8 20 	call	0x4150	; 0x4150 <transmitString_F>
		     if((dir->attrib != 0x10) && (dir->attrib != 0x08))
    2cb2:	87 01       	movw	r16, r14
    2cb4:	0a 52       	subi	r16, 0x2A	; 42
    2cb6:	1f 4f       	sbci	r17, 0xFF	; 255
    2cb8:	05 51       	subi	r16, 0x15	; 21
    2cba:	10 40       	sbci	r17, 0x00	; 0
    2cbc:	f8 01       	movw	r30, r16
    2cbe:	80 81       	ld	r24, Z
    2cc0:	0b 5e       	subi	r16, 0xEB	; 235
    2cc2:	1f 4f       	sbci	r17, 0xFF	; 255
    2cc4:	80 31       	cpi	r24, 0x10	; 16
    2cc6:	b9 f0       	breq	.+46     	; 0x2cf6 <findFiles+0x31e>
    2cc8:	88 30       	cpi	r24, 0x08	; 8
    2cca:	19 f4       	brne	.+6      	; 0x2cd2 <findFiles+0x2fa>
			     transmitString_F (PSTR("FILE" ));
		         transmitString_F (PSTR("   "));
			     displayMemory (LOW, dir->fileSize);
			 }
			 else
			   transmitString_F ((dir->attrib == 0x10)? PSTR("DIR") : PSTR("ROOT"));
    2ccc:	8d e0       	ldi	r24, 0x0D	; 13
    2cce:	9c e1       	ldi	r25, 0x1C	; 28
    2cd0:	14 c0       	rjmp	.+40     	; 0x2cfa <findFiles+0x322>
			   transmitByte (dir->name[j]);
			 }
		     transmitString_F (PSTR("   "));
		     if((dir->attrib != 0x10) && (dir->attrib != 0x08))
			 {
			     transmitString_F (PSTR("FILE" ));
    2cd2:	8a e1       	ldi	r24, 0x1A	; 26
    2cd4:	9c e1       	ldi	r25, 0x1C	; 28
    2cd6:	0e 94 a8 20 	call	0x4150	; 0x4150 <transmitString_F>
		         transmitString_F (PSTR("   "));
    2cda:	86 e1       	ldi	r24, 0x16	; 22
    2cdc:	9c e1       	ldi	r25, 0x1C	; 28
    2cde:	0e 94 a8 20 	call	0x4150	; 0x4150 <transmitString_F>
			     displayMemory (LOW, dir->fileSize);
    2ce2:	f8 01       	movw	r30, r16
    2ce4:	34 97       	sbiw	r30, 0x04	; 4
    2ce6:	40 81       	ld	r20, Z
    2ce8:	51 81       	ldd	r21, Z+1	; 0x01
    2cea:	62 81       	ldd	r22, Z+2	; 0x02
    2cec:	73 81       	ldd	r23, Z+3	; 0x03
    2cee:	80 e0       	ldi	r24, 0x00	; 0
    2cf0:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <displayMemory>
    2cf4:	04 c0       	rjmp	.+8      	; 0x2cfe <findFiles+0x326>
			 }
			 else
			   transmitString_F ((dir->attrib == 0x10)? PSTR("DIR") : PSTR("ROOT"));
    2cf6:	82 e1       	ldi	r24, 0x12	; 18
    2cf8:	9c e1       	ldi	r25, 0x1C	; 28
    2cfa:	0e 94 a8 20 	call	0x4150	; 0x4150 <transmitString_F>
    2cfe:	80 e2       	ldi	r24, 0x20	; 32
    2d00:	90 e0       	ldi	r25, 0x00	; 0
    2d02:	e8 0e       	add	r14, r24
    2d04:	f9 1e       	adc	r15, r25
    2d06:	a7 01       	movw	r20, r14
    2d08:	40 52       	subi	r20, 0x20	; 32
    2d0a:	50 40       	sbci	r21, 0x00	; 0
   for(sector = 0; sector < sectorPerCluster; sector++)
   {
     SD_readSingleBlock (firstSector + sector);
	

     for(i=0; i<bytesPerSector; i+=32)
    2d0c:	80 91 c6 00 	lds	r24, 0x00C6
    2d10:	90 91 c7 00 	lds	r25, 0x00C7
    2d14:	48 17       	cp	r20, r24
    2d16:	59 07       	cpc	r21, r25
    2d18:	08 f4       	brcc	.+2      	; 0x2d1c <findFiles+0x344>
    2d1a:	b7 ce       	rjmp	.-658    	; 0x2a8a <findFiles+0xb2>

while(1)
{
   firstSector = getFirstSector (cluster);

   for(sector = 0; sector < sectorPerCluster; sector++)
    2d1c:	08 94       	sec
    2d1e:	61 1c       	adc	r6, r1
    2d20:	71 1c       	adc	r7, r1
    2d22:	81 1c       	adc	r8, r1
    2d24:	91 1c       	adc	r9, r1
    2d26:	80 91 d6 02 	lds	r24, 0x02D6
    2d2a:	90 91 d7 02 	lds	r25, 0x02D7
    2d2e:	a0 e0       	ldi	r26, 0x00	; 0
    2d30:	b0 e0       	ldi	r27, 0x00	; 0
    2d32:	68 16       	cp	r6, r24
    2d34:	79 06       	cpc	r7, r25
    2d36:	8a 06       	cpc	r8, r26
    2d38:	9b 06       	cpc	r9, r27
    2d3a:	08 f4       	brcc	.+2      	; 0x2d3e <findFiles+0x366>
    2d3c:	94 ce       	rjmp	.-728    	; 0x2a66 <findFiles+0x8e>
		  }
       }
     }
   }

   cluster = (getSetNextCluster (cluster, GET, 0));
    2d3e:	c6 01       	movw	r24, r12
    2d40:	b5 01       	movw	r22, r10
    2d42:	40 e0       	ldi	r20, 0x00	; 0
    2d44:	00 e0       	ldi	r16, 0x00	; 0
    2d46:	10 e0       	ldi	r17, 0x00	; 0
    2d48:	20 e0       	ldi	r18, 0x00	; 0
    2d4a:	30 e0       	ldi	r19, 0x00	; 0
    2d4c:	0e 94 6f 14 	call	0x28de	; 0x28de <getSetNextCluster>
    2d50:	5b 01       	movw	r10, r22
    2d52:	6c 01       	movw	r12, r24

   if(cluster > 0x0ffffff6)
    2d54:	97 ef       	ldi	r25, 0xF7	; 247
    2d56:	a9 16       	cp	r10, r25
    2d58:	9f ef       	ldi	r25, 0xFF	; 255
    2d5a:	b9 06       	cpc	r11, r25
    2d5c:	9f ef       	ldi	r25, 0xFF	; 255
    2d5e:	c9 06       	cpc	r12, r25
    2d60:	9f e0       	ldi	r25, 0x0F	; 15
    2d62:	d9 06       	cpc	r13, r25
    2d64:	50 f4       	brcc	.+20     	; 0x2d7a <findFiles+0x3a2>
   	 return 0;
   if(cluster == 0) 
    2d66:	a1 14       	cp	r10, r1
    2d68:	b1 04       	cpc	r11, r1
    2d6a:	c1 04       	cpc	r12, r1
    2d6c:	d1 04       	cpc	r13, r1
    2d6e:	09 f0       	breq	.+2      	; 0x2d72 <findFiles+0x39a>
    2d70:	5a ce       	rjmp	.-844    	; 0x2a26 <findFiles+0x4e>
   {transmitString_F(PSTR("Error in getting cluster"));  return 0;}
    2d72:	84 ef       	ldi	r24, 0xF4	; 244
    2d74:	9b e1       	ldi	r25, 0x1B	; 27
    2d76:	0e 94 a8 20 	call	0x4150	; 0x4150 <transmitString_F>
    2d7a:	00 e0       	ldi	r16, 0x00	; 0
    2d7c:	10 e0       	ldi	r17, 0x00	; 0
 }
return 0;
}
    2d7e:	c8 01       	movw	r24, r16
    2d80:	2a 96       	adiw	r28, 0x0a	; 10
    2d82:	0f b6       	in	r0, 0x3f	; 63
    2d84:	f8 94       	cli
    2d86:	de bf       	out	0x3e, r29	; 62
    2d88:	0f be       	out	0x3f, r0	; 63
    2d8a:	cd bf       	out	0x3d, r28	; 61
    2d8c:	cf 91       	pop	r28
    2d8e:	df 91       	pop	r29
    2d90:	1f 91       	pop	r17
    2d92:	0f 91       	pop	r16
    2d94:	ff 90       	pop	r15
    2d96:	ef 90       	pop	r14
    2d98:	df 90       	pop	r13
    2d9a:	cf 90       	pop	r12
    2d9c:	bf 90       	pop	r11
    2d9e:	af 90       	pop	r10
    2da0:	9f 90       	pop	r9
    2da2:	8f 90       	pop	r8
    2da4:	7f 90       	pop	r7
    2da6:	6f 90       	pop	r6
    2da8:	5f 90       	pop	r5
    2daa:	4f 90       	pop	r4
    2dac:	3f 90       	pop	r3
    2dae:	2f 90       	pop	r2
    2db0:	08 95       	ret

00002db2 <deleteFile>:
//Function: to delete a specified file from the root directory
//Arguments: pointer to the file name
//return: none
//********************************************************************
void deleteFile (unsigned char *fileName)
{
    2db2:	cf 93       	push	r28
    2db4:	df 93       	push	r29
    2db6:	ec 01       	movw	r28, r24
  unsigned char error;

  error = convertFileName (fileName);
    2db8:	0e 94 5f 10 	call	0x20be	; 0x20be <convertFileName>
  if(error) return;
    2dbc:	88 23       	and	r24, r24
    2dbe:	21 f4       	brne	.+8      	; 0x2dc8 <deleteFile+0x16>

  findFiles (DELETE, fileName);
    2dc0:	82 e0       	ldi	r24, 0x02	; 2
    2dc2:	be 01       	movw	r22, r28
    2dc4:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <findFiles>
}
    2dc8:	df 91       	pop	r29
    2dca:	cf 91       	pop	r28
    2dcc:	08 95       	ret

00002dce <readFile>:
//return: 0, if normal operation or flag is READ
//	      1, if file is already existing and flag = VERIFY
//		  2, if file name is incompatible
//***************************************************************************
unsigned char readFile (unsigned char flag, unsigned char *fileName)
{
    2dce:	2f 92       	push	r2
    2dd0:	3f 92       	push	r3
    2dd2:	4f 92       	push	r4
    2dd4:	5f 92       	push	r5
    2dd6:	6f 92       	push	r6
    2dd8:	7f 92       	push	r7
    2dda:	8f 92       	push	r8
    2ddc:	9f 92       	push	r9
    2dde:	af 92       	push	r10
    2de0:	bf 92       	push	r11
    2de2:	cf 92       	push	r12
    2de4:	df 92       	push	r13
    2de6:	ef 92       	push	r14
    2de8:	ff 92       	push	r15
    2dea:	0f 93       	push	r16
    2dec:	1f 93       	push	r17
    2dee:	df 93       	push	r29
    2df0:	cf 93       	push	r28
    2df2:	00 d0       	rcall	.+0      	; 0x2df4 <readFile+0x26>
    2df4:	00 d0       	rcall	.+0      	; 0x2df6 <readFile+0x28>
    2df6:	cd b7       	in	r28, 0x3d	; 61
    2df8:	de b7       	in	r29, 0x3e	; 62
    2dfa:	e8 2e       	mov	r14, r24
    2dfc:	8b 01       	movw	r16, r22
struct dir_Structure *dir;
unsigned long cluster, byteCounter = 0, fileSize, firstSector;
unsigned int k;
unsigned char j, error;

error = convertFileName (fileName); //convert fileName into FAT format
    2dfe:	cb 01       	movw	r24, r22
    2e00:	0e 94 5f 10 	call	0x20be	; 0x20be <convertFileName>
if(error) return 2;
    2e04:	88 23       	and	r24, r24
    2e06:	11 f0       	breq	.+4      	; 0x2e0c <readFile+0x3e>
    2e08:	82 e0       	ldi	r24, 0x02	; 2
    2e0a:	9e c0       	rjmp	.+316    	; 0x2f48 <readFile+0x17a>

dir = findFiles (GET_FILE, fileName); //get the file location
    2e0c:	81 e0       	ldi	r24, 0x01	; 1
    2e0e:	b8 01       	movw	r22, r16
    2e10:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <findFiles>
    2e14:	9c 01       	movw	r18, r24
if(dir == 0) 
    2e16:	00 97       	sbiw	r24, 0x00	; 0
    2e18:	09 f4       	brne	.+2      	; 0x2e1c <readFile+0x4e>
    2e1a:	95 c0       	rjmp	.+298    	; 0x2f46 <readFile+0x178>
  return (0);

if(flag == VERIFY) return (1);	//specified file name is already existing
    2e1c:	81 e0       	ldi	r24, 0x01	; 1
    2e1e:	e8 16       	cp	r14, r24
    2e20:	09 f4       	brne	.+2      	; 0x2e24 <readFile+0x56>
    2e22:	92 c0       	rjmp	.+292    	; 0x2f48 <readFile+0x17a>

cluster = (((unsigned long) dir->firstClusterHI) << 16) | dir->firstClusterLO;
    2e24:	d9 01       	movw	r26, r18
    2e26:	54 96       	adiw	r26, 0x14	; 20
    2e28:	8d 91       	ld	r24, X+
    2e2a:	9c 91       	ld	r25, X
    2e2c:	55 97       	sbiw	r26, 0x15	; 21
    2e2e:	a0 e0       	ldi	r26, 0x00	; 0
    2e30:	b0 e0       	ldi	r27, 0x00	; 0
    2e32:	4c 01       	movw	r8, r24
    2e34:	77 24       	eor	r7, r7
    2e36:	66 24       	eor	r6, r6
    2e38:	f9 01       	movw	r30, r18
    2e3a:	82 8d       	ldd	r24, Z+26	; 0x1a
    2e3c:	93 8d       	ldd	r25, Z+27	; 0x1b
    2e3e:	a0 e0       	ldi	r26, 0x00	; 0
    2e40:	b0 e0       	ldi	r27, 0x00	; 0
    2e42:	68 2a       	or	r6, r24
    2e44:	79 2a       	or	r7, r25
    2e46:	8a 2a       	or	r8, r26
    2e48:	9b 2a       	or	r9, r27

fileSize = dir->fileSize;
    2e4a:	d9 01       	movw	r26, r18
    2e4c:	5c 96       	adiw	r26, 0x1c	; 28
    2e4e:	8d 91       	ld	r24, X+
    2e50:	9d 91       	ld	r25, X+
    2e52:	0d 90       	ld	r0, X+
    2e54:	bc 91       	ld	r27, X
    2e56:	a0 2d       	mov	r26, r0
    2e58:	89 83       	std	Y+1, r24	; 0x01
    2e5a:	9a 83       	std	Y+2, r25	; 0x02
    2e5c:	ab 83       	std	Y+3, r26	; 0x03
    2e5e:	bc 83       	std	Y+4, r27	; 0x04

TX_NEWLINE;
    2e60:	8d e0       	ldi	r24, 0x0D	; 13
    2e62:	0e 94 a4 20 	call	0x4148	; 0x4148 <transmitByte>
    2e66:	8a e0       	ldi	r24, 0x0A	; 10
    2e68:	0e 94 a4 20 	call	0x4148	; 0x4148 <transmitByte>
TX_NEWLINE;
    2e6c:	8d e0       	ldi	r24, 0x0D	; 13
    2e6e:	0e 94 a4 20 	call	0x4148	; 0x4148 <transmitByte>
    2e72:	8a e0       	ldi	r24, 0x0A	; 10
    2e74:	0e 94 a4 20 	call	0x4148	; 0x4148 <transmitByte>
    2e78:	22 24       	eor	r2, r2
    2e7a:	33 24       	eor	r3, r3
    2e7c:	21 01       	movw	r4, r2
//Arguments: cluster number for which first sector is to be found
//return: first sector address
//***************************************************************************
unsigned long getFirstSector(unsigned long clusterNumber)
{
  return (((clusterNumber - 2) * sectorPerCluster) + firstDataSector);
    2e7e:	20 91 d6 02 	lds	r18, 0x02D6
    2e82:	30 91 d7 02 	lds	r19, 0x02D7
    2e86:	e0 90 be 00 	lds	r14, 0x00BE
    2e8a:	f0 90 bf 00 	lds	r15, 0x00BF
    2e8e:	00 91 c0 00 	lds	r16, 0x00C0
    2e92:	10 91 c1 00 	lds	r17, 0x00C1
    2e96:	c4 01       	movw	r24, r8
    2e98:	b3 01       	movw	r22, r6
    2e9a:	62 50       	subi	r22, 0x02	; 2
    2e9c:	70 40       	sbci	r23, 0x00	; 0
    2e9e:	80 40       	sbci	r24, 0x00	; 0
    2ea0:	90 40       	sbci	r25, 0x00	; 0
    2ea2:	40 e0       	ldi	r20, 0x00	; 0
    2ea4:	50 e0       	ldi	r21, 0x00	; 0
    2ea6:	0e 94 28 21 	call	0x4250	; 0x4250 <__mulsi3>
    2eaa:	5b 01       	movw	r10, r22
    2eac:	6c 01       	movw	r12, r24
    2eae:	ae 0c       	add	r10, r14
    2eb0:	bf 1c       	adc	r11, r15
    2eb2:	c0 1e       	adc	r12, r16
    2eb4:	d1 1e       	adc	r13, r17
    2eb6:	10 e0       	ldi	r17, 0x00	; 0
    2eb8:	28 c0       	rjmp	.+80     	; 0x2f0a <readFile+0x13c>
{
  firstSector = getFirstSector (cluster);

  for(j=0; j<sectorPerCluster; j++)
  {
    SD_readSingleBlock(firstSector + j);
    2eba:	c6 01       	movw	r24, r12
    2ebc:	b5 01       	movw	r22, r10
    2ebe:	61 0f       	add	r22, r17
    2ec0:	71 1d       	adc	r23, r1
    2ec2:	81 1d       	adc	r24, r1
    2ec4:	91 1d       	adc	r25, r1
    2ec6:	0e 94 97 1f 	call	0x3f2e	; 0x3f2e <SD_readSingleBlock>
    2eca:	20 e0       	ldi	r18, 0x00	; 0
    2ecc:	30 e0       	ldi	r19, 0x00	; 0
    
	for(k=0; k<512; k++)
    {
     // transmitByte(buffer[k]);
	  // Sending to DAC
		PORTA = buffer[k];
    2ece:	f9 01       	movw	r30, r18
    2ed0:	ea 52       	subi	r30, 0x2A	; 42
    2ed2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ed4:	80 81       	ld	r24, Z
    2ed6:	8b bb       	out	0x1b, r24	; 27
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2ed8:	86 e4       	ldi	r24, 0x46	; 70
    2eda:	91 e0       	ldi	r25, 0x01	; 1
    2edc:	01 97       	sbiw	r24, 0x01	; 1
    2ede:	f1 f7       	brne	.-4      	; 0x2edc <readFile+0x10e>
	
	//	sample=(int)buffer[k];
	//	send_pwm(sample);
		_delay_ms(.163);

      if ((byteCounter++) >= fileSize ) return 0;
    2ee0:	89 81       	ldd	r24, Y+1	; 0x01
    2ee2:	9a 81       	ldd	r25, Y+2	; 0x02
    2ee4:	ab 81       	ldd	r26, Y+3	; 0x03
    2ee6:	bc 81       	ldd	r27, Y+4	; 0x04
    2ee8:	28 16       	cp	r2, r24
    2eea:	39 06       	cpc	r3, r25
    2eec:	4a 06       	cpc	r4, r26
    2eee:	5b 06       	cpc	r5, r27
    2ef0:	50 f5       	brcc	.+84     	; 0x2f46 <readFile+0x178>
    2ef2:	08 94       	sec
    2ef4:	21 1c       	adc	r2, r1
    2ef6:	31 1c       	adc	r3, r1
    2ef8:	41 1c       	adc	r4, r1
    2efa:	51 1c       	adc	r5, r1

  for(j=0; j<sectorPerCluster; j++)
  {
    SD_readSingleBlock(firstSector + j);
    
	for(k=0; k<512; k++)
    2efc:	2f 5f       	subi	r18, 0xFF	; 255
    2efe:	3f 4f       	sbci	r19, 0xFF	; 255
    2f00:	92 e0       	ldi	r25, 0x02	; 2
    2f02:	20 30       	cpi	r18, 0x00	; 0
    2f04:	39 07       	cpc	r19, r25
    2f06:	19 f7       	brne	.-58     	; 0x2ece <readFile+0x100>

while(1)
{
  firstSector = getFirstSector (cluster);

  for(j=0; j<sectorPerCluster; j++)
    2f08:	1f 5f       	subi	r17, 0xFF	; 255
    2f0a:	20 91 d6 02 	lds	r18, 0x02D6
    2f0e:	30 91 d7 02 	lds	r19, 0x02D7
    2f12:	81 2f       	mov	r24, r17
    2f14:	90 e0       	ldi	r25, 0x00	; 0
    2f16:	82 17       	cp	r24, r18
    2f18:	93 07       	cpc	r25, r19
    2f1a:	78 f2       	brcs	.-98     	; 0x2eba <readFile+0xec>
		_delay_ms(.163);

      if ((byteCounter++) >= fileSize ) return 0;
    }
  }
  cluster = getSetNextCluster (cluster, GET, 0);
    2f1c:	c4 01       	movw	r24, r8
    2f1e:	b3 01       	movw	r22, r6
    2f20:	40 e0       	ldi	r20, 0x00	; 0
    2f22:	00 e0       	ldi	r16, 0x00	; 0
    2f24:	10 e0       	ldi	r17, 0x00	; 0
    2f26:	20 e0       	ldi	r18, 0x00	; 0
    2f28:	30 e0       	ldi	r19, 0x00	; 0
    2f2a:	0e 94 6f 14 	call	0x28de	; 0x28de <getSetNextCluster>
    2f2e:	3b 01       	movw	r6, r22
    2f30:	4c 01       	movw	r8, r24
  if(cluster == 0) {transmitString_F(PSTR("Error in getting cluster")); return 0;}
    2f32:	61 15       	cp	r22, r1
    2f34:	71 05       	cpc	r23, r1
    2f36:	81 05       	cpc	r24, r1
    2f38:	91 05       	cpc	r25, r1
    2f3a:	09 f0       	breq	.+2      	; 0x2f3e <readFile+0x170>
    2f3c:	a0 cf       	rjmp	.-192    	; 0x2e7e <readFile+0xb0>
    2f3e:	8b ed       	ldi	r24, 0xDB	; 219
    2f40:	9b e1       	ldi	r25, 0x1B	; 27
    2f42:	0e 94 a8 20 	call	0x4150	; 0x4150 <transmitString_F>
    2f46:	80 e0       	ldi	r24, 0x00	; 0
}
return 0;
}
    2f48:	0f 90       	pop	r0
    2f4a:	0f 90       	pop	r0
    2f4c:	0f 90       	pop	r0
    2f4e:	0f 90       	pop	r0
    2f50:	cf 91       	pop	r28
    2f52:	df 91       	pop	r29
    2f54:	1f 91       	pop	r17
    2f56:	0f 91       	pop	r16
    2f58:	ff 90       	pop	r15
    2f5a:	ef 90       	pop	r14
    2f5c:	df 90       	pop	r13
    2f5e:	cf 90       	pop	r12
    2f60:	bf 90       	pop	r11
    2f62:	af 90       	pop	r10
    2f64:	9f 90       	pop	r9
    2f66:	8f 90       	pop	r8
    2f68:	7f 90       	pop	r7
    2f6a:	6f 90       	pop	r6
    2f6c:	5f 90       	pop	r5
    2f6e:	4f 90       	pop	r4
    2f70:	3f 90       	pop	r3
    2f72:	2f 90       	pop	r2
    2f74:	08 95       	ret

00002f76 <writeFile>:
//			file name does not exist; if the file already exists then append the data
//Arguments: pointer to the file name
//return: none
//************************************************************************************
void writeFile (unsigned char *fileName)
{
    2f76:	2f 92       	push	r2
    2f78:	3f 92       	push	r3
    2f7a:	4f 92       	push	r4
    2f7c:	5f 92       	push	r5
    2f7e:	6f 92       	push	r6
    2f80:	7f 92       	push	r7
    2f82:	8f 92       	push	r8
    2f84:	9f 92       	push	r9
    2f86:	af 92       	push	r10
    2f88:	bf 92       	push	r11
    2f8a:	cf 92       	push	r12
    2f8c:	df 92       	push	r13
    2f8e:	ef 92       	push	r14
    2f90:	ff 92       	push	r15
    2f92:	0f 93       	push	r16
    2f94:	1f 93       	push	r17
    2f96:	df 93       	push	r29
    2f98:	cf 93       	push	r28
    2f9a:	cd b7       	in	r28, 0x3d	; 61
    2f9c:	de b7       	in	r29, 0x3e	; 62
    2f9e:	27 97       	sbiw	r28, 0x07	; 7
    2fa0:	0f b6       	in	r0, 0x3f	; 63
    2fa2:	f8 94       	cli
    2fa4:	de bf       	out	0x3e, r29	; 62
    2fa6:	0f be       	out	0x3f, r0	; 63
    2fa8:	cd bf       	out	0x3d, r28	; 61
    2faa:	9f 83       	std	Y+7, r25	; 0x07
    2fac:	8e 83       	std	Y+6, r24	; 0x06
unsigned char j, data, error, fileCreatedFlag = 0, start = 0, appendFile = 0, sectorEndFlag = 0, sector;
unsigned int i, firstClusterHigh, firstClusterLow;
struct dir_Structure *dir;
unsigned long cluster, nextCluster, prevCluster, firstSector, clusterCount, extraMemory;

j = readFile (VERIFY, fileName);
    2fae:	81 e0       	ldi	r24, 0x01	; 1
    2fb0:	6e 81       	ldd	r22, Y+6	; 0x06
    2fb2:	7f 81       	ldd	r23, Y+7	; 0x07
    2fb4:	0e 94 e7 16 	call	0x2dce	; 0x2dce <readFile>

if(j == 1) 
    2fb8:	81 30       	cpi	r24, 0x01	; 1
    2fba:	09 f0       	breq	.+2      	; 0x2fbe <writeFile+0x48>
    2fbc:	57 c0       	rjmp	.+174    	; 0x306c <writeFile+0xf6>
{
  transmitString_F(PSTR("  File already existing, appending data..")); 
    2fbe:	8e e9       	ldi	r24, 0x9E	; 158
    2fc0:	9b e1       	ldi	r25, 0x1B	; 27
    2fc2:	0e 94 a8 20 	call	0x4150	; 0x4150 <transmitString_F>
  appendFile = 1;
  cluster = appendStartCluster;
    2fc6:	60 90 e3 02 	lds	r6, 0x02E3
    2fca:	70 90 e4 02 	lds	r7, 0x02E4
    2fce:	80 90 e5 02 	lds	r8, 0x02E5
    2fd2:	90 90 e6 02 	lds	r9, 0x02E6
    2fd6:	aa 24       	eor	r10, r10
    2fd8:	bb 24       	eor	r11, r11
    2fda:	65 01       	movw	r12, r10
  clusterCount=0;
  while(1)
  {
    nextCluster = getSetNextCluster (cluster, GET, 0);
    2fdc:	c4 01       	movw	r24, r8
    2fde:	b3 01       	movw	r22, r6
    2fe0:	40 e0       	ldi	r20, 0x00	; 0
    2fe2:	00 e0       	ldi	r16, 0x00	; 0
    2fe4:	10 e0       	ldi	r17, 0x00	; 0
    2fe6:	20 e0       	ldi	r18, 0x00	; 0
    2fe8:	30 e0       	ldi	r19, 0x00	; 0
    2fea:	0e 94 6f 14 	call	0x28de	; 0x28de <getSetNextCluster>
    if(nextCluster == EOF) break;
    2fee:	6f 3f       	cpi	r22, 0xFF	; 255
    2ff0:	2f ef       	ldi	r18, 0xFF	; 255
    2ff2:	72 07       	cpc	r23, r18
    2ff4:	2f ef       	ldi	r18, 0xFF	; 255
    2ff6:	82 07       	cpc	r24, r18
    2ff8:	2f ef       	ldi	r18, 0xFF	; 255
    2ffa:	92 07       	cpc	r25, r18
    2ffc:	41 f0       	breq	.+16     	; 0x300e <writeFile+0x98>
	cluster = nextCluster;
	clusterCount++;
    2ffe:	08 94       	sec
    3000:	a1 1c       	adc	r10, r1
    3002:	b1 1c       	adc	r11, r1
    3004:	c1 1c       	adc	r12, r1
    3006:	d1 1c       	adc	r13, r1
    3008:	3b 01       	movw	r6, r22
    300a:	4c 01       	movw	r8, r24
    300c:	e7 cf       	rjmp	.-50     	; 0x2fdc <writeFile+0x66>
  }

  sector = (fileSize - (clusterCount * sectorPerCluster * bytesPerSector)) / bytesPerSector; //last sector number of the last cluster of the file
    300e:	20 91 d6 02 	lds	r18, 0x02D6
    3012:	30 91 d7 02 	lds	r19, 0x02D7
    3016:	60 91 c6 00 	lds	r22, 0x00C6
    301a:	70 91 c7 00 	lds	r23, 0x00C7
    301e:	e0 90 c6 00 	lds	r14, 0x00C6
    3022:	f0 90 c7 00 	lds	r15, 0x00C7
    3026:	80 e0       	ldi	r24, 0x00	; 0
    3028:	90 e0       	ldi	r25, 0x00	; 0
    302a:	40 e0       	ldi	r20, 0x00	; 0
    302c:	50 e0       	ldi	r21, 0x00	; 0
    302e:	0e 94 28 21 	call	0x4250	; 0x4250 <__mulsi3>
    3032:	a6 01       	movw	r20, r12
    3034:	95 01       	movw	r18, r10
    3036:	0e 94 28 21 	call	0x4250	; 0x4250 <__mulsi3>
    303a:	9b 01       	movw	r18, r22
    303c:	ac 01       	movw	r20, r24
    303e:	60 91 c2 00 	lds	r22, 0x00C2
    3042:	70 91 c3 00 	lds	r23, 0x00C3
    3046:	80 91 c4 00 	lds	r24, 0x00C4
    304a:	90 91 c5 00 	lds	r25, 0x00C5
    304e:	62 1b       	sub	r22, r18
    3050:	73 0b       	sbc	r23, r19
    3052:	84 0b       	sbc	r24, r20
    3054:	95 0b       	sbc	r25, r21
    3056:	00 e0       	ldi	r16, 0x00	; 0
    3058:	10 e0       	ldi	r17, 0x00	; 0
    305a:	a8 01       	movw	r20, r16
    305c:	97 01       	movw	r18, r14
    305e:	0e 94 47 21 	call	0x428e	; 0x428e <__udivmodsi4>
    3062:	b2 2e       	mov	r11, r18
    3064:	21 e0       	ldi	r18, 0x01	; 1
    3066:	aa 24       	eor	r10, r10
    3068:	a3 94       	inc	r10
    306a:	58 c0       	rjmp	.+176    	; 0x311c <writeFile+0x1a6>
  start = 1;
//  appendFile();
//  return;
}
else if(j == 2) 
    306c:	82 30       	cpi	r24, 0x02	; 2
    306e:	09 f4       	brne	.+2      	; 0x3072 <writeFile+0xfc>
    3070:	23 c3       	rjmp	.+1606   	; 0x36b8 <writeFile+0x742>
   return; //invalid file name
else
{
  TX_NEWLINE;
    3072:	8d e0       	ldi	r24, 0x0D	; 13
    3074:	0e 94 a4 20 	call	0x4148	; 0x4148 <transmitByte>
    3078:	8a e0       	ldi	r24, 0x0A	; 10
    307a:	0e 94 a4 20 	call	0x4148	; 0x4148 <transmitByte>
  transmitString_F(PSTR(" Creating File.."));
    307e:	8d e8       	ldi	r24, 0x8D	; 141
    3080:	9b e1       	ldi	r25, 0x1B	; 27
    3082:	0e 94 a8 20 	call	0x4150	; 0x4150 <transmitString_F>

  cluster = getSetFreeCluster (NEXT_FREE, GET, 0);
    3086:	82 e0       	ldi	r24, 0x02	; 2
    3088:	60 e0       	ldi	r22, 0x00	; 0
    308a:	20 e0       	ldi	r18, 0x00	; 0
    308c:	30 e0       	ldi	r19, 0x00	; 0
    308e:	40 e0       	ldi	r20, 0x00	; 0
    3090:	50 e0       	ldi	r21, 0x00	; 0
    3092:	0e 94 71 11 	call	0x22e2	; 0x22e2 <getSetFreeCluster>
    3096:	9b 01       	movw	r18, r22
    3098:	ac 01       	movw	r20, r24
  if(cluster > totalClusters)
    309a:	80 91 c8 00 	lds	r24, 0x00C8
    309e:	90 91 c9 00 	lds	r25, 0x00C9
    30a2:	a0 91 ca 00 	lds	r26, 0x00CA
    30a6:	b0 91 cb 00 	lds	r27, 0x00CB
    30aa:	82 17       	cp	r24, r18
    30ac:	93 07       	cpc	r25, r19
    30ae:	a4 07       	cpc	r26, r20
    30b0:	b5 07       	cpc	r27, r21
    30b2:	40 f4       	brcc	.+16     	; 0x30c4 <writeFile+0x14e>
     cluster = rootCluster;
    30b4:	20 91 cc 00 	lds	r18, 0x00CC
    30b8:	30 91 cd 00 	lds	r19, 0x00CD
    30bc:	40 91 ce 00 	lds	r20, 0x00CE
    30c0:	50 91 cf 00 	lds	r21, 0x00CF

  cluster = searchNextFreeCluster(cluster);
    30c4:	ca 01       	movw	r24, r20
    30c6:	b9 01       	movw	r22, r18
    30c8:	0e 94 e7 10 	call	0x21ce	; 0x21ce <searchNextFreeCluster>
    30cc:	3b 01       	movw	r6, r22
    30ce:	4c 01       	movw	r8, r24
   if(cluster == 0)
    30d0:	61 15       	cp	r22, r1
    30d2:	71 05       	cpc	r23, r1
    30d4:	81 05       	cpc	r24, r1
    30d6:	91 05       	cpc	r25, r1
    30d8:	49 f4       	brne	.+18     	; 0x30ec <writeFile+0x176>
   {
      TX_NEWLINE;
    30da:	8d e0       	ldi	r24, 0x0D	; 13
    30dc:	0e 94 a4 20 	call	0x4148	; 0x4148 <transmitByte>
    30e0:	8a e0       	ldi	r24, 0x0A	; 10
    30e2:	0e 94 a4 20 	call	0x4148	; 0x4148 <transmitByte>
      transmitString_F(PSTR(" No free cluster!"));
    30e6:	8b e7       	ldi	r24, 0x7B	; 123
    30e8:	9b e1       	ldi	r25, 0x1B	; 27
    30ea:	e4 c2       	rjmp	.+1480   	; 0x36b4 <writeFile+0x73e>
	  return;
   }
  getSetNextCluster(cluster, SET, EOF);   //last cluster of the file, marked EOF
    30ec:	41 e0       	ldi	r20, 0x01	; 1
    30ee:	0f ef       	ldi	r16, 0xFF	; 255
    30f0:	1f ef       	ldi	r17, 0xFF	; 255
    30f2:	2f ef       	ldi	r18, 0xFF	; 255
    30f4:	3f ef       	ldi	r19, 0xFF	; 255
    30f6:	0e 94 6f 14 	call	0x28de	; 0x28de <getSetNextCluster>
   
  firstClusterHigh = (unsigned int) ((cluster & 0xffff0000) >> 16 );
    30fa:	c4 01       	movw	r24, r8
    30fc:	aa 27       	eor	r26, r26
    30fe:	bb 27       	eor	r27, r27
    3100:	9c 83       	std	Y+4, r25	; 0x04
    3102:	8b 83       	std	Y+3, r24	; 0x03
  firstClusterLow = (unsigned int) ( cluster & 0x0000ffff);
    3104:	7a 82       	std	Y+2, r7	; 0x02
    3106:	69 82       	std	Y+1, r6	; 0x01
  fileSize = 0;
    3108:	10 92 c2 00 	sts	0x00C2, r1
    310c:	10 92 c3 00 	sts	0x00C3, r1
    3110:	10 92 c4 00 	sts	0x00C4, r1
    3114:	10 92 c5 00 	sts	0x00C5, r1
    3118:	20 e0       	ldi	r18, 0x00	; 0
    311a:	aa 24       	eor	r10, r10
    311c:	1d 82       	std	Y+5, r1	; 0x05
while(1)
{
   if(start)
   {
      start = 0;
	  startBlock = getFirstSector (cluster) + sector;
    311e:	2b 2c       	mov	r2, r11
    3120:	33 24       	eor	r3, r3
    3122:	44 24       	eor	r4, r4
    3124:	55 24       	eor	r5, r5
    3126:	c4 01       	movw	r24, r8
    3128:	b3 01       	movw	r22, r6
    312a:	62 50       	subi	r22, 0x02	; 2
    312c:	70 40       	sbci	r23, 0x00	; 0
    312e:	80 40       	sbci	r24, 0x00	; 0
    3130:	90 40       	sbci	r25, 0x00	; 0



while(1)
{
   if(start)
    3132:	22 23       	and	r18, r18
    3134:	e9 f1       	breq	.+122    	; 0x31b0 <writeFile+0x23a>
//Arguments: cluster number for which first sector is to be found
//return: first sector address
//***************************************************************************
unsigned long getFirstSector(unsigned long clusterNumber)
{
  return (((clusterNumber - 2) * sectorPerCluster) + firstDataSector);
    3136:	20 91 d6 02 	lds	r18, 0x02D6
    313a:	30 91 d7 02 	lds	r19, 0x02D7
    313e:	e0 90 be 00 	lds	r14, 0x00BE
    3142:	f0 90 bf 00 	lds	r15, 0x00BF
    3146:	00 91 c0 00 	lds	r16, 0x00C0
    314a:	10 91 c1 00 	lds	r17, 0x00C1
while(1)
{
   if(start)
   {
      start = 0;
	  startBlock = getFirstSector (cluster) + sector;
    314e:	e2 0c       	add	r14, r2
    3150:	f3 1c       	adc	r15, r3
    3152:	04 1d       	adc	r16, r4
    3154:	15 1d       	adc	r17, r5
    3156:	40 e0       	ldi	r20, 0x00	; 0
    3158:	50 e0       	ldi	r21, 0x00	; 0
    315a:	0e 94 28 21 	call	0x4250	; 0x4250 <__mulsi3>
    315e:	e6 0e       	add	r14, r22
    3160:	f7 1e       	adc	r15, r23
    3162:	08 1f       	adc	r16, r24
    3164:	19 1f       	adc	r17, r25
    3166:	e0 92 d2 00 	sts	0x00D2, r14
    316a:	f0 92 d3 00 	sts	0x00D3, r15
    316e:	00 93 d4 00 	sts	0x00D4, r16
    3172:	10 93 d5 00 	sts	0x00D5, r17
	  SD_readSingleBlock (startBlock);
    3176:	60 91 d2 00 	lds	r22, 0x00D2
    317a:	70 91 d3 00 	lds	r23, 0x00D3
    317e:	80 91 d4 00 	lds	r24, 0x00D4
    3182:	90 91 d5 00 	lds	r25, 0x00D5
    3186:	0e 94 97 1f 	call	0x3f2e	; 0x3f2e <SD_readSingleBlock>
	  i = fileSize % bytesPerSector;
    318a:	20 91 c6 00 	lds	r18, 0x00C6
    318e:	30 91 c7 00 	lds	r19, 0x00C7
    3192:	40 e0       	ldi	r20, 0x00	; 0
    3194:	50 e0       	ldi	r21, 0x00	; 0
    3196:	60 91 c2 00 	lds	r22, 0x00C2
    319a:	70 91 c3 00 	lds	r23, 0x00C3
    319e:	80 91 c4 00 	lds	r24, 0x00C4
    31a2:	90 91 c5 00 	lds	r25, 0x00C5
    31a6:	0e 94 47 21 	call	0x428e	; 0x428e <__udivmodsi4>
    31aa:	8b 01       	movw	r16, r22
    31ac:	eb 2c       	mov	r14, r11
    31ae:	1f c0       	rjmp	.+62     	; 0x31ee <writeFile+0x278>
//Arguments: cluster number for which first sector is to be found
//return: first sector address
//***************************************************************************
unsigned long getFirstSector(unsigned long clusterNumber)
{
  return (((clusterNumber - 2) * sectorPerCluster) + firstDataSector);
    31b0:	20 91 d6 02 	lds	r18, 0x02D6
    31b4:	30 91 d7 02 	lds	r19, 0x02D7
    31b8:	e0 90 be 00 	lds	r14, 0x00BE
    31bc:	f0 90 bf 00 	lds	r15, 0x00BF
    31c0:	00 91 c0 00 	lds	r16, 0x00C0
    31c4:	10 91 c1 00 	lds	r17, 0x00C1
    31c8:	40 e0       	ldi	r20, 0x00	; 0
    31ca:	50 e0       	ldi	r21, 0x00	; 0
    31cc:	0e 94 28 21 	call	0x4250	; 0x4250 <__mulsi3>
    31d0:	e6 0e       	add	r14, r22
    31d2:	f7 1e       	adc	r15, r23
    31d4:	08 1f       	adc	r16, r24
    31d6:	19 1f       	adc	r17, r25
	  i = fileSize % bytesPerSector;
	  j = sector;
   }
   else
   {
      startBlock = getFirstSector (cluster);
    31d8:	e0 92 d2 00 	sts	0x00D2, r14
    31dc:	f0 92 d3 00 	sts	0x00D3, r15
    31e0:	00 93 d4 00 	sts	0x00D4, r16
    31e4:	10 93 d5 00 	sts	0x00D5, r17
    31e8:	ee 24       	eor	r14, r14
    31ea:	00 e0       	ldi	r16, 0x00	; 0
    31ec:	10 e0       	ldi	r17, 0x00	; 0
	  i=0;
	  j=0;
   }
   

   TX_NEWLINE;
    31ee:	8d e0       	ldi	r24, 0x0D	; 13
    31f0:	0e 94 a4 20 	call	0x4148	; 0x4148 <transmitByte>
    31f4:	8a e0       	ldi	r24, 0x0A	; 10
    31f6:	0e 94 a4 20 	call	0x4148	; 0x4148 <transmitByte>
   transmitString_F(PSTR(" Enter text (end with ~):"));
    31fa:	81 e6       	ldi	r24, 0x61	; 97
    31fc:	9b e1       	ldi	r25, 0x1B	; 27
    31fe:	0e 94 a8 20 	call	0x4150	; 0x4150 <transmitString_F>
   
   do
   {
     if(sectorEndFlag == 1) //special case when the last character in previous sector was '\r'
    3202:	8d 81       	ldd	r24, Y+5	; 0x05
    3204:	81 30       	cpi	r24, 0x01	; 1
    3206:	e9 f4       	brne	.+58     	; 0x3242 <writeFile+0x2cc>
	 {
	 	transmitByte ('\n');
    3208:	8a e0       	ldi	r24, 0x0A	; 10
    320a:	0e 94 a4 20 	call	0x4148	; 0x4148 <transmitByte>
        buffer[i++] = '\n'; //appending 'Line Feed (LF)' character
    320e:	f8 01       	movw	r30, r16
    3210:	ea 52       	subi	r30, 0x2A	; 42
    3212:	ff 4f       	sbci	r31, 0xFF	; 255
    3214:	8a e0       	ldi	r24, 0x0A	; 10
    3216:	80 83       	st	Z, r24
    3218:	0f 5f       	subi	r16, 0xFF	; 255
    321a:	1f 4f       	sbci	r17, 0xFF	; 255
		fileSize++;
    321c:	80 91 c2 00 	lds	r24, 0x00C2
    3220:	90 91 c3 00 	lds	r25, 0x00C3
    3224:	a0 91 c4 00 	lds	r26, 0x00C4
    3228:	b0 91 c5 00 	lds	r27, 0x00C5
    322c:	01 96       	adiw	r24, 0x01	; 1
    322e:	a1 1d       	adc	r26, r1
    3230:	b1 1d       	adc	r27, r1
    3232:	80 93 c2 00 	sts	0x00C2, r24
    3236:	90 93 c3 00 	sts	0x00C3, r25
    323a:	a0 93 c4 00 	sts	0x00C4, r26
    323e:	b0 93 c5 00 	sts	0x00C5, r27
	 }

	sectorEndFlag = 0;

	 data = receiveByte();
    3242:	0e 94 9f 20 	call	0x413e	; 0x413e <receiveByte>
    3246:	f8 2e       	mov	r15, r24
	 if(data == 0x08)	//'Back Space' key pressed
    3248:	98 e0       	ldi	r25, 0x08	; 8
    324a:	89 17       	cp	r24, r25
    324c:	d1 f4       	brne	.+52     	; 0x3282 <writeFile+0x30c>
	 { 
	   if(i != 0)
    324e:	01 15       	cp	r16, r1
    3250:	11 05       	cpc	r17, r1
    3252:	b9 f3       	breq	.-18     	; 0x3242 <writeFile+0x2cc>
	   { 
	     transmitByte(data);
    3254:	88 e0       	ldi	r24, 0x08	; 8
    3256:	0e 94 a4 20 	call	0x4148	; 0x4148 <transmitByte>
		 transmitByte(' '); 
    325a:	80 e2       	ldi	r24, 0x20	; 32
    325c:	0e 94 a4 20 	call	0x4148	; 0x4148 <transmitByte>
	     transmitByte(data); 
    3260:	88 e0       	ldi	r24, 0x08	; 8
    3262:	0e 94 a4 20 	call	0x4148	; 0x4148 <transmitByte>
	     i--; 
    3266:	01 50       	subi	r16, 0x01	; 1
    3268:	10 40       	sbci	r17, 0x00	; 0
		 fileSize--;
    326a:	80 91 c2 00 	lds	r24, 0x00C2
    326e:	90 91 c3 00 	lds	r25, 0x00C3
    3272:	a0 91 c4 00 	lds	r26, 0x00C4
    3276:	b0 91 c5 00 	lds	r27, 0x00C5
    327a:	01 97       	sbiw	r24, 0x01	; 1
    327c:	a1 09       	sbc	r26, r1
    327e:	b1 09       	sbc	r27, r1
    3280:	d8 cf       	rjmp	.-80     	; 0x3232 <writeFile+0x2bc>
	   } 
	   continue;     
	 }
	 transmitByte(data);
    3282:	0e 94 a4 20 	call	0x4148	; 0x4148 <transmitByte>
     buffer[i++] = data;
    3286:	f8 01       	movw	r30, r16
    3288:	ea 52       	subi	r30, 0x2A	; 42
    328a:	ff 4f       	sbci	r31, 0xFF	; 255
    328c:	f0 82       	st	Z, r15
    328e:	0f 5f       	subi	r16, 0xFF	; 255
    3290:	1f 4f       	sbci	r17, 0xFF	; 255
	 fileSize++;
    3292:	80 91 c2 00 	lds	r24, 0x00C2
    3296:	90 91 c3 00 	lds	r25, 0x00C3
    329a:	a0 91 c4 00 	lds	r26, 0x00C4
    329e:	b0 91 c5 00 	lds	r27, 0x00C5
    32a2:	01 96       	adiw	r24, 0x01	; 1
    32a4:	a1 1d       	adc	r26, r1
    32a6:	b1 1d       	adc	r27, r1
    32a8:	80 93 c2 00 	sts	0x00C2, r24
    32ac:	90 93 c3 00 	sts	0x00C3, r25
    32b0:	a0 93 c4 00 	sts	0x00C4, r26
    32b4:	b0 93 c5 00 	sts	0x00C5, r27
     if(data == '\r')  //'Carriege Return (CR)' character
    32b8:	ad e0       	ldi	r26, 0x0D	; 13
    32ba:	fa 16       	cp	r15, r26
    32bc:	21 f5       	brne	.+72     	; 0x3306 <writeFile+0x390>
     {
        if(i == 512)
    32be:	b2 e0       	ldi	r27, 0x02	; 2
    32c0:	00 30       	cpi	r16, 0x00	; 0
    32c2:	1b 07       	cpc	r17, r27
    32c4:	19 f4       	brne	.+6      	; 0x32cc <writeFile+0x356>
    32c6:	e1 e0       	ldi	r30, 0x01	; 1
    32c8:	ed 83       	std	Y+5, r30	; 0x05
    32ca:	24 c0       	rjmp	.+72     	; 0x3314 <writeFile+0x39e>
		   sectorEndFlag = 1;  //flag to indicate that the appended '\n' char should be put in the next sector
	    else
		{ 
		   transmitByte ('\n');
    32cc:	8a e0       	ldi	r24, 0x0A	; 10
    32ce:	0e 94 a4 20 	call	0x4148	; 0x4148 <transmitByte>
           buffer[i++] = '\n'; //appending 'Line Feed (LF)' character
    32d2:	f8 01       	movw	r30, r16
    32d4:	ea 52       	subi	r30, 0x2A	; 42
    32d6:	ff 4f       	sbci	r31, 0xFF	; 255
    32d8:	8a e0       	ldi	r24, 0x0A	; 10
    32da:	80 83       	st	Z, r24
    32dc:	0f 5f       	subi	r16, 0xFF	; 255
    32de:	1f 4f       	sbci	r17, 0xFF	; 255
		   fileSize++;
    32e0:	80 91 c2 00 	lds	r24, 0x00C2
    32e4:	90 91 c3 00 	lds	r25, 0x00C3
    32e8:	a0 91 c4 00 	lds	r26, 0x00C4
    32ec:	b0 91 c5 00 	lds	r27, 0x00C5
    32f0:	01 96       	adiw	r24, 0x01	; 1
    32f2:	a1 1d       	adc	r26, r1
    32f4:	b1 1d       	adc	r27, r1
    32f6:	80 93 c2 00 	sts	0x00C2, r24
    32fa:	90 93 c3 00 	sts	0x00C3, r25
    32fe:	a0 93 c4 00 	sts	0x00C4, r26
    3302:	b0 93 c5 00 	sts	0x00C5, r27
	    }
     }
	 
     if(i >= 512)   //though 'i' will never become greater than 512, it's kept here to avoid 
    3306:	f2 e0       	ldi	r31, 0x02	; 2
    3308:	00 30       	cpi	r16, 0x00	; 0
    330a:	1f 07       	cpc	r17, r31
    330c:	10 f4       	brcc	.+4      	; 0x3312 <writeFile+0x39c>
    330e:	1d 82       	std	Y+5, r1	; 0x05
    3310:	2a c0       	rjmp	.+84     	; 0x3366 <writeFile+0x3f0>
    3312:	1d 82       	std	Y+5, r1	; 0x05
	 {				//infinite loop in case it happens to be greater than 512 due to some data corruption
	   i=0;
	   error = SD_writeSingleBlock (startBlock);
    3314:	60 91 d2 00 	lds	r22, 0x00D2
    3318:	70 91 d3 00 	lds	r23, 0x00D3
    331c:	80 91 d4 00 	lds	r24, 0x00D4
    3320:	90 91 d5 00 	lds	r25, 0x00D5
    3324:	0e 94 49 1f 	call	0x3e92	; 0x3e92 <SD_writeSingleBlock>
       j++;
    3328:	e3 94       	inc	r14
	   if(j == sectorPerCluster) {j = 0; break;}
    332a:	20 91 d6 02 	lds	r18, 0x02D6
    332e:	30 91 d7 02 	lds	r19, 0x02D7
    3332:	8e 2d       	mov	r24, r14
    3334:	90 e0       	ldi	r25, 0x00	; 0
    3336:	82 17       	cp	r24, r18
    3338:	93 07       	cpc	r25, r19
    333a:	d1 f0       	breq	.+52     	; 0x3370 <writeFile+0x3fa>
	   startBlock++; 
    333c:	80 91 d2 00 	lds	r24, 0x00D2
    3340:	90 91 d3 00 	lds	r25, 0x00D3
    3344:	a0 91 d4 00 	lds	r26, 0x00D4
    3348:	b0 91 d5 00 	lds	r27, 0x00D5
    334c:	01 96       	adiw	r24, 0x01	; 1
    334e:	a1 1d       	adc	r26, r1
    3350:	b1 1d       	adc	r27, r1
    3352:	80 93 d2 00 	sts	0x00D2, r24
    3356:	90 93 d3 00 	sts	0x00D3, r25
    335a:	a0 93 d4 00 	sts	0x00D4, r26
    335e:	b0 93 d5 00 	sts	0x00D5, r27
    3362:	00 e0       	ldi	r16, 0x00	; 0
    3364:	10 e0       	ldi	r17, 0x00	; 0
     }
	}while (data != '~');
    3366:	2e e7       	ldi	r18, 0x7E	; 126
    3368:	f2 16       	cp	r15, r18
    336a:	09 f0       	breq	.+2      	; 0x336e <writeFile+0x3f8>
    336c:	4a cf       	rjmp	.-364    	; 0x3202 <writeFile+0x28c>
    336e:	05 c0       	rjmp	.+10     	; 0x337a <writeFile+0x404>

   if(data == '~') 
    3370:	8e e7       	ldi	r24, 0x7E	; 126
    3372:	f8 16       	cp	r15, r24
    3374:	b9 f5       	brne	.+110    	; 0x33e4 <writeFile+0x46e>
    3376:	00 e0       	ldi	r16, 0x00	; 0
    3378:	10 e0       	ldi	r17, 0x00	; 0
   {
      fileSize--;	//to remove the last entered '~' character
    337a:	80 91 c2 00 	lds	r24, 0x00C2
    337e:	90 91 c3 00 	lds	r25, 0x00C3
    3382:	a0 91 c4 00 	lds	r26, 0x00C4
    3386:	b0 91 c5 00 	lds	r27, 0x00C5
    338a:	01 97       	sbiw	r24, 0x01	; 1
    338c:	a1 09       	sbc	r26, r1
    338e:	b1 09       	sbc	r27, r1
    3390:	80 93 c2 00 	sts	0x00C2, r24
    3394:	90 93 c3 00 	sts	0x00C3, r25
    3398:	a0 93 c4 00 	sts	0x00C4, r26
    339c:	b0 93 c5 00 	sts	0x00C5, r27
	  i--;
    33a0:	b8 01       	movw	r22, r16
    33a2:	61 50       	subi	r22, 0x01	; 1
    33a4:	70 40       	sbci	r23, 0x00	; 0
    33a6:	06 c0       	rjmp	.+12     	; 0x33b4 <writeFile+0x43e>
	  for(;i<512;i++)  //fill the rest of the buffer with 0x00
        buffer[i]= 0x00;
    33a8:	fb 01       	movw	r30, r22
    33aa:	ea 52       	subi	r30, 0x2A	; 42
    33ac:	ff 4f       	sbci	r31, 0xFF	; 255
    33ae:	10 82       	st	Z, r1

   if(data == '~') 
   {
      fileSize--;	//to remove the last entered '~' character
	  i--;
	  for(;i<512;i++)  //fill the rest of the buffer with 0x00
    33b0:	6f 5f       	subi	r22, 0xFF	; 255
    33b2:	7f 4f       	sbci	r23, 0xFF	; 255
    33b4:	92 e0       	ldi	r25, 0x02	; 2
    33b6:	60 30       	cpi	r22, 0x00	; 0
    33b8:	79 07       	cpc	r23, r25
    33ba:	b0 f3       	brcs	.-20     	; 0x33a8 <writeFile+0x432>
        buffer[i]= 0x00;
   	  error = SD_writeSingleBlock (startBlock);
    33bc:	60 91 d2 00 	lds	r22, 0x00D2
    33c0:	70 91 d3 00 	lds	r23, 0x00D3
    33c4:	80 91 d4 00 	lds	r24, 0x00D4
    33c8:	90 91 d5 00 	lds	r25, 0x00D5
    33cc:	0e 94 49 1f 	call	0x3e92	; 0x3e92 <SD_writeSingleBlock>

   getSetNextCluster(prevCluster, SET, cluster);
   getSetNextCluster(cluster, SET, EOF);   //last cluster of the file, marked EOF
}        

getSetFreeCluster (NEXT_FREE, SET, cluster); //update FSinfo next free cluster entry
    33d0:	82 e0       	ldi	r24, 0x02	; 2
    33d2:	61 e0       	ldi	r22, 0x01	; 1
    33d4:	a4 01       	movw	r20, r8
    33d6:	93 01       	movw	r18, r6
    33d8:	0e 94 71 11 	call	0x22e2	; 0x22e2 <getSetFreeCluster>

if(appendFile)  //executes this loop if file is to be appended
    33dc:	aa 20       	and	r10, r10
    33de:	09 f4       	brne	.+2      	; 0x33e2 <writeFile+0x46c>
    33e0:	6f c0       	rjmp	.+222    	; 0x34c0 <writeFile+0x54a>
    33e2:	28 c0       	rjmp	.+80     	; 0x3434 <writeFile+0x4be>
      break;
   } 
	  
   prevCluster = cluster;

   cluster = searchNextFreeCluster(prevCluster); //look for a free cluster starting from the current cluster
    33e4:	c4 01       	movw	r24, r8
    33e6:	b3 01       	movw	r22, r6
    33e8:	0e 94 e7 10 	call	0x21ce	; 0x21ce <searchNextFreeCluster>
    33ec:	6b 01       	movw	r12, r22
    33ee:	7c 01       	movw	r14, r24

   if(cluster == 0)
    33f0:	61 15       	cp	r22, r1
    33f2:	71 05       	cpc	r23, r1
    33f4:	81 05       	cpc	r24, r1
    33f6:	91 05       	cpc	r25, r1
    33f8:	49 f4       	brne	.+18     	; 0x340c <writeFile+0x496>
   {
      TX_NEWLINE;
    33fa:	8d e0       	ldi	r24, 0x0D	; 13
    33fc:	0e 94 a4 20 	call	0x4148	; 0x4148 <transmitByte>
    3400:	8a e0       	ldi	r24, 0x0A	; 10
    3402:	0e 94 a4 20 	call	0x4148	; 0x4148 <transmitByte>
      transmitString_F(PSTR(" No free cluster!"));
    3406:	8f e4       	ldi	r24, 0x4F	; 79
    3408:	9b e1       	ldi	r25, 0x1B	; 27
    340a:	54 c1       	rjmp	.+680    	; 0x36b4 <writeFile+0x73e>
	  return;
   }

   getSetNextCluster(prevCluster, SET, cluster);
    340c:	c4 01       	movw	r24, r8
    340e:	b3 01       	movw	r22, r6
    3410:	41 e0       	ldi	r20, 0x01	; 1
    3412:	97 01       	movw	r18, r14
    3414:	86 01       	movw	r16, r12
    3416:	0e 94 6f 14 	call	0x28de	; 0x28de <getSetNextCluster>
   getSetNextCluster(cluster, SET, EOF);   //last cluster of the file, marked EOF
    341a:	c7 01       	movw	r24, r14
    341c:	b6 01       	movw	r22, r12
    341e:	41 e0       	ldi	r20, 0x01	; 1
    3420:	0f ef       	ldi	r16, 0xFF	; 255
    3422:	1f ef       	ldi	r17, 0xFF	; 255
    3424:	2f ef       	ldi	r18, 0xFF	; 255
    3426:	3f ef       	ldi	r19, 0xFF	; 255
    3428:	0e 94 6f 14 	call	0x28de	; 0x28de <getSetNextCluster>
    342c:	20 e0       	ldi	r18, 0x00	; 0
    342e:	36 01       	movw	r6, r12
    3430:	47 01       	movw	r8, r14
    3432:	79 ce       	rjmp	.-782    	; 0x3126 <writeFile+0x1b0>

getSetFreeCluster (NEXT_FREE, SET, cluster); //update FSinfo next free cluster entry

if(appendFile)  //executes this loop if file is to be appended
{
  SD_readSingleBlock (appendFileSector);    
    3434:	60 91 e9 02 	lds	r22, 0x02E9
    3438:	70 91 ea 02 	lds	r23, 0x02EA
    343c:	80 91 eb 02 	lds	r24, 0x02EB
    3440:	90 91 ec 02 	lds	r25, 0x02EC
    3444:	0e 94 97 1f 	call	0x3f2e	; 0x3f2e <SD_readSingleBlock>
  dir = (struct dir_Structure *) &buffer[appendFileLocation]; 
    3448:	e0 91 ba 00 	lds	r30, 0x00BA
    344c:	f0 91 bb 00 	lds	r31, 0x00BB
    3450:	ea 52       	subi	r30, 0x2A	; 42
    3452:	ff 4f       	sbci	r31, 0xFF	; 255
  extraMemory = fileSize - dir->fileSize;
    3454:	20 91 c2 00 	lds	r18, 0x00C2
    3458:	30 91 c3 00 	lds	r19, 0x00C3
    345c:	40 91 c4 00 	lds	r20, 0x00C4
    3460:	50 91 c5 00 	lds	r21, 0x00C5
    3464:	84 8d       	ldd	r24, Z+28	; 0x1c
    3466:	95 8d       	ldd	r25, Z+29	; 0x1d
    3468:	a6 8d       	ldd	r26, Z+30	; 0x1e
    346a:	b7 8d       	ldd	r27, Z+31	; 0x1f
    346c:	79 01       	movw	r14, r18
    346e:	8a 01       	movw	r16, r20
    3470:	e8 1a       	sub	r14, r24
    3472:	f9 0a       	sbc	r15, r25
    3474:	0a 0b       	sbc	r16, r26
    3476:	1b 0b       	sbc	r17, r27
  dir->fileSize = fileSize;
    3478:	24 8f       	std	Z+28, r18	; 0x1c
    347a:	35 8f       	std	Z+29, r19	; 0x1d
    347c:	46 8f       	std	Z+30, r20	; 0x1e
    347e:	57 8f       	std	Z+31, r21	; 0x1f
  SD_writeSingleBlock (appendFileSector);
    3480:	60 91 e9 02 	lds	r22, 0x02E9
    3484:	70 91 ea 02 	lds	r23, 0x02EA
    3488:	80 91 eb 02 	lds	r24, 0x02EB
    348c:	90 91 ec 02 	lds	r25, 0x02EC
    3490:	0e 94 49 1f 	call	0x3e92	; 0x3e92 <SD_writeSingleBlock>
  freeMemoryUpdate (REMOVE, extraMemory); //updating free memory count in FSinfo sector;
    3494:	81 e0       	ldi	r24, 0x01	; 1
    3496:	b8 01       	movw	r22, r16
    3498:	a7 01       	movw	r20, r14
    349a:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <freeMemoryUpdate>

  
  TX_NEWLINE;
    349e:	8d e0       	ldi	r24, 0x0D	; 13
    34a0:	0e 94 a4 20 	call	0x4148	; 0x4148 <transmitByte>
    34a4:	8a e0       	ldi	r24, 0x0A	; 10
    34a6:	0e 94 a4 20 	call	0x4148	; 0x4148 <transmitByte>
  transmitString_F(PSTR(" File appended!"));
    34aa:	8f e3       	ldi	r24, 0x3F	; 63
    34ac:	9b e1       	ldi	r25, 0x1B	; 27
    34ae:	0e 94 a8 20 	call	0x4150	; 0x4150 <transmitString_F>
  TX_NEWLINE;
    34b2:	8d e0       	ldi	r24, 0x0D	; 13
    34b4:	0e 94 a4 20 	call	0x4148	; 0x4148 <transmitByte>
    34b8:	8a e0       	ldi	r24, 0x0A	; 10
    34ba:	0e 94 a4 20 	call	0x4148	; 0x4148 <transmitByte>
    34be:	fc c0       	rjmp	.+504    	; 0x36b8 <writeFile+0x742>
  return;
}

//executes following portion when new file is created

prevCluster = rootCluster; //root cluster
    34c0:	80 90 cc 00 	lds	r8, 0x00CC
    34c4:	90 90 cd 00 	lds	r9, 0x00CD
    34c8:	a0 90 ce 00 	lds	r10, 0x00CE
    34cc:	b0 90 cf 00 	lds	r11, 0x00CF
    34d0:	22 24       	eor	r2, r2
//Arguments: cluster number for which first sector is to be found
//return: first sector address
//***************************************************************************
unsigned long getFirstSector(unsigned long clusterNumber)
{
  return (((clusterNumber - 2) * sectorPerCluster) + firstDataSector);
    34d2:	20 91 d6 02 	lds	r18, 0x02D6
    34d6:	30 91 d7 02 	lds	r19, 0x02D7
    34da:	e0 90 be 00 	lds	r14, 0x00BE
    34de:	f0 90 bf 00 	lds	r15, 0x00BF
    34e2:	00 91 c0 00 	lds	r16, 0x00C0
    34e6:	10 91 c1 00 	lds	r17, 0x00C1
    34ea:	c5 01       	movw	r24, r10
    34ec:	b4 01       	movw	r22, r8
    34ee:	62 50       	subi	r22, 0x02	; 2
    34f0:	70 40       	sbci	r23, 0x00	; 0
    34f2:	80 40       	sbci	r24, 0x00	; 0
    34f4:	90 40       	sbci	r25, 0x00	; 0
    34f6:	40 e0       	ldi	r20, 0x00	; 0
    34f8:	50 e0       	ldi	r21, 0x00	; 0
    34fa:	0e 94 28 21 	call	0x4250	; 0x4250 <__mulsi3>
    34fe:	2b 01       	movw	r4, r22
    3500:	3c 01       	movw	r6, r24
    3502:	4e 0c       	add	r4, r14
    3504:	5f 1c       	adc	r5, r15
    3506:	60 1e       	adc	r6, r16
    3508:	71 1e       	adc	r7, r17
    350a:	33 24       	eor	r3, r3
    350c:	8a c0       	rjmp	.+276    	; 0x3622 <writeFile+0x6ac>
{
   firstSector = getFirstSector (prevCluster);

   for(sector = 0; sector < sectorPerCluster; sector++)
   {
     SD_readSingleBlock (firstSector + sector);
    350e:	73 01       	movw	r14, r6
    3510:	62 01       	movw	r12, r4
    3512:	c3 0c       	add	r12, r3
    3514:	d1 1c       	adc	r13, r1
    3516:	e1 1c       	adc	r14, r1
    3518:	f1 1c       	adc	r15, r1
    351a:	c7 01       	movw	r24, r14
    351c:	b6 01       	movw	r22, r12
    351e:	0e 94 97 1f 	call	0x3f2e	; 0x3f2e <SD_readSingleBlock>
    3522:	00 e2       	ldi	r16, 0x20	; 32
    3524:	10 e0       	ldi	r17, 0x00	; 0
    3526:	72 c0       	rjmp	.+228    	; 0x360c <writeFile+0x696>
	

     for(i=0; i<bytesPerSector; i+=32)
    3528:	af 01       	movw	r20, r30
    352a:	4a 52       	subi	r20, 0x2A	; 42
    352c:	5f 4f       	sbci	r21, 0xFF	; 255
     {
	    dir = (struct dir_Structure *) &buffer[i];

		if(fileCreatedFlag)   //to mark last directory entry with 0x00 (empty) mark
    352e:	22 20       	and	r2, r2
    3530:	19 f0       	breq	.+6      	; 0x3538 <writeFile+0x5c2>
		 { 					  //indicating end of the directory file list
		   dir->name[0] = 0x00;
    3532:	da 01       	movw	r26, r20
    3534:	1c 92       	st	X, r1
    3536:	c0 c0       	rjmp	.+384    	; 0x36b8 <writeFile+0x742>
           return;
         }

        if((dir->name[0] == EMPTY) || (dir->name[0] == DELETED))  //looking for an empty slot to enter file info
    3538:	f8 01       	movw	r30, r16
    353a:	ea 54       	subi	r30, 0x4A	; 74
    353c:	ff 4f       	sbci	r31, 0xFF	; 255
    353e:	e0 81       	ld	r30, Z
    3540:	ee 23       	and	r30, r30
    3542:	19 f0       	breq	.+6      	; 0x354a <writeFile+0x5d4>
    3544:	e5 3e       	cpi	r30, 0xE5	; 229
    3546:	09 f0       	breq	.+2      	; 0x354a <writeFile+0x5d4>
    3548:	5f c0       	rjmp	.+190    	; 0x3608 <writeFile+0x692>
    354a:	20 e0       	ldi	r18, 0x00	; 0
    354c:	30 e0       	ldi	r19, 0x00	; 0
		{
		  for(j=0; j<11; j++)
  			dir->name[j] = fileName[j];
    354e:	ba 01       	movw	r22, r20
    3550:	62 0f       	add	r22, r18
    3552:	73 1f       	adc	r23, r19
    3554:	ae 81       	ldd	r26, Y+6	; 0x06
    3556:	bf 81       	ldd	r27, Y+7	; 0x07
    3558:	a2 0f       	add	r26, r18
    355a:	b3 1f       	adc	r27, r19
    355c:	8c 91       	ld	r24, X
    355e:	fb 01       	movw	r30, r22
    3560:	80 83       	st	Z, r24
    3562:	2f 5f       	subi	r18, 0xFF	; 255
    3564:	3f 4f       	sbci	r19, 0xFF	; 255
           return;
         }

        if((dir->name[0] == EMPTY) || (dir->name[0] == DELETED))  //looking for an empty slot to enter file info
		{
		  for(j=0; j<11; j++)
    3566:	2b 30       	cpi	r18, 0x0B	; 11
    3568:	31 05       	cpc	r19, r1
    356a:	89 f7       	brne	.-30     	; 0x354e <writeFile+0x5d8>
  			dir->name[j] = fileName[j];
		  dir->attrib = ATTR_ARCHIVE;	//settting file attribute as 'archive'
    356c:	f8 01       	movw	r30, r16
    356e:	ea 52       	subi	r30, 0x2A	; 42
    3570:	ff 4f       	sbci	r31, 0xFF	; 255
    3572:	75 97       	sbiw	r30, 0x15	; 21
    3574:	20 e2       	ldi	r18, 0x20	; 32
    3576:	21 93       	st	Z+, r18
		  dir->NTreserved = 0;			//always set to 0
    3578:	11 92       	st	Z+, r1
		  dir->timeTenth = 0;			//always set to 0
    357a:	11 92       	st	Z+, r1
		  dir->createTime = 0x9684;		//fixed time of creation
    357c:	84 e8       	ldi	r24, 0x84	; 132
    357e:	96 e9       	ldi	r25, 0x96	; 150
    3580:	81 93       	st	Z+, r24
    3582:	91 93       	st	Z+, r25
		  dir->createDate = 0x3a37;		//fixed date of creation
    3584:	a7 e3       	ldi	r26, 0x37	; 55
    3586:	ba e3       	ldi	r27, 0x3A	; 58
    3588:	a1 93       	st	Z+, r26
    358a:	b1 93       	st	Z+, r27
		  dir->lastAccessDate = 0x3a37;	//fixed date of last access
    358c:	b1 83       	std	Z+1, r27	; 0x01
    358e:	a0 83       	st	Z, r26
		  dir->writeTime = 0x9684;		//fixed time of last write
    3590:	34 96       	adiw	r30, 0x04	; 4
    3592:	81 93       	st	Z+, r24
    3594:	91 93       	st	Z+, r25
		  dir->writeDate = 0x3a37;		//fixed date of last write
    3596:	b1 83       	std	Z+1, r27	; 0x01
    3598:	a0 83       	st	Z, r26
		  dir->firstClusterHI = firstClusterHigh;
    359a:	34 97       	sbiw	r30, 0x04	; 4
    359c:	8b 81       	ldd	r24, Y+3	; 0x03
    359e:	9c 81       	ldd	r25, Y+4	; 0x04
    35a0:	91 83       	std	Z+1, r25	; 0x01
    35a2:	80 83       	st	Z, r24
		  dir->firstClusterLO = firstClusterLow;
    35a4:	36 96       	adiw	r30, 0x06	; 6
    35a6:	a9 81       	ldd	r26, Y+1	; 0x01
    35a8:	ba 81       	ldd	r27, Y+2	; 0x02
    35aa:	a1 93       	st	Z+, r26
    35ac:	b1 93       	st	Z+, r27
		  dir->fileSize = fileSize;
    35ae:	80 91 c2 00 	lds	r24, 0x00C2
    35b2:	90 91 c3 00 	lds	r25, 0x00C3
    35b6:	a0 91 c4 00 	lds	r26, 0x00C4
    35ba:	b0 91 c5 00 	lds	r27, 0x00C5
    35be:	80 83       	st	Z, r24
    35c0:	91 83       	std	Z+1, r25	; 0x01
    35c2:	a2 83       	std	Z+2, r26	; 0x02
    35c4:	b3 83       	std	Z+3, r27	; 0x03

		  SD_writeSingleBlock (firstSector + sector);
    35c6:	c7 01       	movw	r24, r14
    35c8:	b6 01       	movw	r22, r12
    35ca:	0e 94 49 1f 	call	0x3e92	; 0x3e92 <SD_writeSingleBlock>
		  fileCreatedFlag = 1;

		  TX_NEWLINE;
    35ce:	8d e0       	ldi	r24, 0x0D	; 13
    35d0:	0e 94 a4 20 	call	0x4148	; 0x4148 <transmitByte>
    35d4:	8a e0       	ldi	r24, 0x0A	; 10
    35d6:	0e 94 a4 20 	call	0x4148	; 0x4148 <transmitByte>
		  TX_NEWLINE;
    35da:	8d e0       	ldi	r24, 0x0D	; 13
    35dc:	0e 94 a4 20 	call	0x4148	; 0x4148 <transmitByte>
    35e0:	8a e0       	ldi	r24, 0x0A	; 10
    35e2:	0e 94 a4 20 	call	0x4148	; 0x4148 <transmitByte>
		  transmitString_F(PSTR(" File Created!"));
    35e6:	80 e3       	ldi	r24, 0x30	; 48
    35e8:	9b e1       	ldi	r25, 0x1B	; 27
    35ea:	0e 94 a8 20 	call	0x4150	; 0x4150 <transmitString_F>

		  freeMemoryUpdate (REMOVE, fileSize); //updating free memory count in FSinfo sector
    35ee:	40 91 c2 00 	lds	r20, 0x00C2
    35f2:	50 91 c3 00 	lds	r21, 0x00C3
    35f6:	60 91 c4 00 	lds	r22, 0x00C4
    35fa:	70 91 c5 00 	lds	r23, 0x00C5
    35fe:	81 e0       	ldi	r24, 0x01	; 1
    3600:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <freeMemoryUpdate>
    3604:	22 24       	eor	r2, r2
    3606:	23 94       	inc	r2
    3608:	00 5e       	subi	r16, 0xE0	; 224
    360a:	1f 4f       	sbci	r17, 0xFF	; 255
   for(sector = 0; sector < sectorPerCluster; sector++)
   {
     SD_readSingleBlock (firstSector + sector);
	

     for(i=0; i<bytesPerSector; i+=32)
    360c:	80 91 c6 00 	lds	r24, 0x00C6
    3610:	90 91 c7 00 	lds	r25, 0x00C7
    3614:	f8 01       	movw	r30, r16
    3616:	b0 97       	sbiw	r30, 0x20	; 32
    3618:	e8 17       	cp	r30, r24
    361a:	f9 07       	cpc	r31, r25
    361c:	08 f4       	brcc	.+2      	; 0x3620 <writeFile+0x6aa>
    361e:	84 cf       	rjmp	.-248    	; 0x3528 <writeFile+0x5b2>

while(1)
{
   firstSector = getFirstSector (prevCluster);

   for(sector = 0; sector < sectorPerCluster; sector++)
    3620:	33 94       	inc	r3
    3622:	20 91 d6 02 	lds	r18, 0x02D6
    3626:	30 91 d7 02 	lds	r19, 0x02D7
    362a:	83 2d       	mov	r24, r3
    362c:	90 e0       	ldi	r25, 0x00	; 0
    362e:	82 17       	cp	r24, r18
    3630:	93 07       	cpc	r25, r19
    3632:	08 f4       	brcc	.+2      	; 0x3636 <writeFile+0x6c0>
    3634:	6c cf       	rjmp	.-296    	; 0x350e <writeFile+0x598>
	     
        }
     }
   }

   cluster = getSetNextCluster (prevCluster, GET, 0);
    3636:	c5 01       	movw	r24, r10
    3638:	b4 01       	movw	r22, r8
    363a:	40 e0       	ldi	r20, 0x00	; 0
    363c:	00 e0       	ldi	r16, 0x00	; 0
    363e:	10 e0       	ldi	r17, 0x00	; 0
    3640:	20 e0       	ldi	r18, 0x00	; 0
    3642:	30 e0       	ldi	r19, 0x00	; 0
    3644:	0e 94 6f 14 	call	0x28de	; 0x28de <getSetNextCluster>
    3648:	6b 01       	movw	r12, r22
    364a:	7c 01       	movw	r14, r24

   if(cluster > 0x0ffffff6)
    364c:	67 3f       	cpi	r22, 0xF7	; 247
    364e:	bf ef       	ldi	r27, 0xFF	; 255
    3650:	7b 07       	cpc	r23, r27
    3652:	bf ef       	ldi	r27, 0xFF	; 255
    3654:	8b 07       	cpc	r24, r27
    3656:	bf e0       	ldi	r27, 0x0F	; 15
    3658:	9b 07       	cpc	r25, r27
    365a:	10 f1       	brcs	.+68     	; 0x36a0 <writeFile+0x72a>
   {
      if(cluster == EOF)   //this situation will come when total files in root is multiple of (32*sectorPerCluster)
    365c:	6f 3f       	cpi	r22, 0xFF	; 255
    365e:	ef ef       	ldi	r30, 0xFF	; 255
    3660:	7e 07       	cpc	r23, r30
    3662:	ef ef       	ldi	r30, 0xFF	; 255
    3664:	8e 07       	cpc	r24, r30
    3666:	ef ef       	ldi	r30, 0xFF	; 255
    3668:	9e 07       	cpc	r25, r30
    366a:	b9 f4       	brne	.+46     	; 0x369a <writeFile+0x724>
	  {  
		cluster = searchNextFreeCluster(prevCluster); //find next cluster for root directory entries
    366c:	c5 01       	movw	r24, r10
    366e:	b4 01       	movw	r22, r8
    3670:	0e 94 e7 10 	call	0x21ce	; 0x21ce <searchNextFreeCluster>
    3674:	6b 01       	movw	r12, r22
    3676:	7c 01       	movw	r14, r24
		getSetNextCluster(prevCluster, SET, cluster); //link the new cluster of root to the previous cluster
    3678:	c5 01       	movw	r24, r10
    367a:	b4 01       	movw	r22, r8
    367c:	41 e0       	ldi	r20, 0x01	; 1
    367e:	97 01       	movw	r18, r14
    3680:	86 01       	movw	r16, r12
    3682:	0e 94 6f 14 	call	0x28de	; 0x28de <getSetNextCluster>
		getSetNextCluster(cluster, SET, EOF);  //set the new cluster as end of the root directory
    3686:	c7 01       	movw	r24, r14
    3688:	b6 01       	movw	r22, r12
    368a:	41 e0       	ldi	r20, 0x01	; 1
    368c:	0f ef       	ldi	r16, 0xFF	; 255
    368e:	1f ef       	ldi	r17, 0xFF	; 255
    3690:	2f ef       	ldi	r18, 0xFF	; 255
    3692:	3f ef       	ldi	r19, 0xFF	; 255
    3694:	0e 94 6f 14 	call	0x28de	; 0x28de <getSetNextCluster>
    3698:	03 c0       	rjmp	.+6      	; 0x36a0 <writeFile+0x72a>
      } 

      else
      {	
	    transmitString_F(PSTR("End of Cluster Chain")); 
    369a:	8b e1       	ldi	r24, 0x1B	; 27
    369c:	9b e1       	ldi	r25, 0x1B	; 27
    369e:	0a c0       	rjmp	.+20     	; 0x36b4 <writeFile+0x73e>
	    return;
    36a0:	46 01       	movw	r8, r12
    36a2:	57 01       	movw	r10, r14
      }
   }
   if(cluster == 0) {transmitString_F(PSTR("Error in getting cluster")); return;}
    36a4:	c1 14       	cp	r12, r1
    36a6:	d1 04       	cpc	r13, r1
    36a8:	e1 04       	cpc	r14, r1
    36aa:	f1 04       	cpc	r15, r1
    36ac:	09 f0       	breq	.+2      	; 0x36b0 <writeFile+0x73a>
    36ae:	11 cf       	rjmp	.-478    	; 0x34d2 <writeFile+0x55c>
    36b0:	82 e0       	ldi	r24, 0x02	; 2
    36b2:	9b e1       	ldi	r25, 0x1B	; 27
    36b4:	0e 94 a8 20 	call	0x4150	; 0x4150 <transmitString_F>
   
   prevCluster = cluster;
 }
 
 return;
}
    36b8:	27 96       	adiw	r28, 0x07	; 7
    36ba:	0f b6       	in	r0, 0x3f	; 63
    36bc:	f8 94       	cli
    36be:	de bf       	out	0x3e, r29	; 62
    36c0:	0f be       	out	0x3f, r0	; 63
    36c2:	cd bf       	out	0x3d, r28	; 61
    36c4:	cf 91       	pop	r28
    36c6:	df 91       	pop	r29
    36c8:	1f 91       	pop	r17
    36ca:	0f 91       	pop	r16
    36cc:	ff 90       	pop	r15
    36ce:	ef 90       	pop	r14
    36d0:	df 90       	pop	r13
    36d2:	cf 90       	pop	r12
    36d4:	bf 90       	pop	r11
    36d6:	af 90       	pop	r10
    36d8:	9f 90       	pop	r9
    36da:	8f 90       	pop	r8
    36dc:	7f 90       	pop	r7
    36de:	6f 90       	pop	r6
    36e0:	5f 90       	pop	r5
    36e2:	4f 90       	pop	r4
    36e4:	3f 90       	pop	r3
    36e6:	2f 90       	pop	r2
    36e8:	08 95       	ret

000036ea <port_init>:



void port_init(void)
{
	PORTA = 0xFF;
    36ea:	8f ef       	ldi	r24, 0xFF	; 255
    36ec:	8b bb       	out	0x1b, r24	; 27
	DDRA  = 0xFF;	//DAC out
    36ee:	8a bb       	out	0x1a, r24	; 26

	PORTB = 0xEF;
    36f0:	8f ee       	ldi	r24, 0xEF	; 239
    36f2:	88 bb       	out	0x18, r24	; 24
	DDRB  = 0xBF; //MISO line i/p, rest o/p
    36f4:	8f eb       	ldi	r24, 0xBF	; 191
    36f6:	87 bb       	out	0x17, r24	; 23

	PORTC = 0x00;
    36f8:	15 ba       	out	0x15, r1	; 21
	DDRC  = 0x00;
    36fa:	14 ba       	out	0x14, r1	; 20

	PORTD = 0x00;
    36fc:	12 ba       	out	0x12, r1	; 18
	DDRD  = 0xFE;
    36fe:	8e ef       	ldi	r24, 0xFE	; 254
    3700:	81 bb       	out	0x11, r24	; 17
}
    3702:	08 95       	ret

00003704 <init_devices>:


//call this routine to initialize all peripherals
void init_devices(void)
{
 cli();  //all interrupts disabled
    3704:	f8 94       	cli
 port_init();
    3706:	0e 94 75 1b 	call	0x36ea	; 0x36ea <port_init>
 spi_init();
    370a:	0e 94 90 20 	call	0x4120	; 0x4120 <spi_init>
 uart0_init();
    370e:	0e 94 0c 21 	call	0x4218	; 0x4218 <uart0_init>
 init_pwm();
    3712:	0e 94 1c 21 	call	0x4238	; 0x4238 <init_pwm>

 MCUCR = 0x00;
    3716:	15 be       	out	0x35, r1	; 53
 GICR  = 0x00;
    3718:	1b be       	out	0x3b, r1	; 59
 TIMSK = 0x00; //timer interrupt sources
    371a:	19 be       	out	0x39, r1	; 57
 //all peripherals are now initialized
}
    371c:	08 95       	ret

0000371e <main>:

//*************************** MAIN *******************************//
int main(void)
{
    371e:	af 92       	push	r10
    3720:	bf 92       	push	r11
    3722:	cf 92       	push	r12
    3724:	df 92       	push	r13
    3726:	ef 92       	push	r14
    3728:	ff 92       	push	r15
    372a:	0f 93       	push	r16
    372c:	1f 93       	push	r17
    372e:	df 93       	push	r29
    3730:	cf 93       	push	r28
    3732:	cd b7       	in	r28, 0x3d	; 61
    3734:	de b7       	in	r29, 0x3e	; 62
    3736:	2e 97       	sbiw	r28, 0x0e	; 14
    3738:	0f b6       	in	r0, 0x3f	; 63
    373a:	f8 94       	cli
    373c:	de bf       	out	0x3e, r29	; 62
    373e:	0f be       	out	0x3f, r0	; 63
    3740:	cd bf       	out	0x3d, r28	; 61
    3742:	88 ee       	ldi	r24, 0xE8	; 232
    3744:	93 e0       	ldi	r25, 0x03	; 3
    3746:	28 ec       	ldi	r18, 0xC8	; 200
    3748:	30 e0       	ldi	r19, 0x00	; 0
    374a:	f9 01       	movw	r30, r18
    374c:	31 97       	sbiw	r30, 0x01	; 1
    374e:	f1 f7       	brne	.-4      	; 0x374c <main+0x2e>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3750:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3752:	d9 f7       	brne	.-10     	; 0x374a <main+0x2c>
unsigned int i;
unsigned char fileName[13];

_delay_ms(100);  //delay for VCC stabilization

init_devices();
    3754:	0e 94 82 1b 	call	0x3704	; 0x3704 <init_devices>

PORTD |= 0x04; //switching ON the LED (for testing purpose only)
    3758:	92 9a       	sbi	0x12, 2	; 18

TX_NEWLINE;
    375a:	8d e0       	ldi	r24, 0x0D	; 13
    375c:	0e 94 a4 20 	call	0x4148	; 0x4148 <transmitByte>
    3760:	8a e0       	ldi	r24, 0x0A	; 10
    3762:	0e 94 a4 20 	call	0x4148	; 0x4148 <transmitByte>
TX_NEWLINE;
    3766:	8d e0       	ldi	r24, 0x0D	; 13
    3768:	0e 94 a4 20 	call	0x4148	; 0x4148 <transmitByte>
    376c:	8a e0       	ldi	r24, 0x0A	; 10
    376e:	0e 94 a4 20 	call	0x4148	; 0x4148 <transmitByte>
transmitString_F (PSTR("*********************************************"));
    3772:	8a e3       	ldi	r24, 0x3A	; 58
    3774:	9f e1       	ldi	r25, 0x1F	; 31
    3776:	0e 94 a8 20 	call	0x4150	; 0x4150 <transmitString_F>
TX_NEWLINE;
    377a:	8d e0       	ldi	r24, 0x0D	; 13
    377c:	0e 94 a4 20 	call	0x4148	; 0x4148 <transmitByte>
    3780:	8a e0       	ldi	r24, 0x0A	; 10
    3782:	0e 94 a4 20 	call	0x4148	; 0x4148 <transmitByte>
transmitString_F (PSTR("    Sameer microSD Card Testing..  "));
    3786:	86 e1       	ldi	r24, 0x16	; 22
    3788:	9f e1       	ldi	r25, 0x1F	; 31
    378a:	0e 94 a8 20 	call	0x4150	; 0x4150 <transmitString_F>
TX_NEWLINE;
    378e:	8d e0       	ldi	r24, 0x0D	; 13
    3790:	0e 94 a4 20 	call	0x4148	; 0x4148 <transmitByte>
    3794:	8a e0       	ldi	r24, 0x0A	; 10
    3796:	0e 94 a4 20 	call	0x4148	; 0x4148 <transmitByte>
transmitString_F (PSTR("*********************************************"));
    379a:	88 ee       	ldi	r24, 0xE8	; 232
    379c:	9e e1       	ldi	r25, 0x1E	; 30
    379e:	0e 94 a8 20 	call	0x4150	; 0x4150 <transmitString_F>
TX_NEWLINE;
    37a2:	8d e0       	ldi	r24, 0x0D	; 13
    37a4:	0e 94 a4 20 	call	0x4148	; 0x4148 <transmitByte>
    37a8:	8a e0       	ldi	r24, 0x0A	; 10
    37aa:	0e 94 a4 20 	call	0x4148	; 0x4148 <transmitByte>

cardType = 0;
    37ae:	10 92 e7 02 	sts	0x02E7, r1

for (i=0; i<1; i++)
{
  error = SD_init();
    37b2:	0e 94 c8 1f 	call	0x3f90	; 0x3f90 <SD_init>
  if(!error) break;
    37b6:	88 23       	and	r24, r24
    37b8:	71 f0       	breq	.+28     	; 0x37d6 <main+0xb8>
}

if(error)
{
  if(error == 1) transmitString_F(PSTR("SD card not detected.."));
    37ba:	81 30       	cpi	r24, 0x01	; 1
    37bc:	29 f4       	brne	.+10     	; 0x37c8 <main+0xaa>
    37be:	81 ed       	ldi	r24, 0xD1	; 209
    37c0:	9e e1       	ldi	r25, 0x1E	; 30
    37c2:	0e 94 a8 20 	call	0x4150	; 0x4150 <transmitString_F>
    37c6:	06 c0       	rjmp	.+12     	; 0x37d4 <main+0xb6>
  if(error == 2) transmitString_F(PSTR("Card Initialization failed.."));
    37c8:	82 30       	cpi	r24, 0x02	; 2
    37ca:	21 f4       	brne	.+8      	; 0x37d4 <main+0xb6>
    37cc:	84 eb       	ldi	r24, 0xB4	; 180
    37ce:	9e e1       	ldi	r25, 0x1E	; 30
    37d0:	0e 94 a8 20 	call	0x4150	; 0x4150 <transmitString_F>
    37d4:	ff cf       	rjmp	.-2      	; 0x37d4 <main+0xb6>

		_delay_ms(.125);
}
*/

switch (cardType)
    37d6:	80 91 e7 02 	lds	r24, 0x02E7
    37da:	82 30       	cpi	r24, 0x02	; 2
    37dc:	39 f0       	breq	.+14     	; 0x37ec <main+0xce>
    37de:	83 30       	cpi	r24, 0x03	; 3
    37e0:	41 f0       	breq	.+16     	; 0x37f2 <main+0xd4>
    37e2:	81 30       	cpi	r24, 0x01	; 1
    37e4:	49 f4       	brne	.+18     	; 0x37f8 <main+0xda>
{
  case 1:transmitString_F(PSTR("Standard Capacity Card (Ver 1.x) Detected!"));
    37e6:	89 e8       	ldi	r24, 0x89	; 137
    37e8:	9e e1       	ldi	r25, 0x1E	; 30
    37ea:	08 c0       	rjmp	.+16     	; 0x37fc <main+0xde>
  		 break;
  case 2:transmitString_F(PSTR("High Capacity Card Detected!"));
    37ec:	8c e6       	ldi	r24, 0x6C	; 108
    37ee:	9e e1       	ldi	r25, 0x1E	; 30
    37f0:	05 c0       	rjmp	.+10     	; 0x37fc <main+0xde>
  		 break;
  case 3:transmitString_F(PSTR("Standard Capacity Card (Ver 2.x) Detected!"));
    37f2:	81 e4       	ldi	r24, 0x41	; 65
    37f4:	9e e1       	ldi	r25, 0x1E	; 30
    37f6:	02 c0       	rjmp	.+4      	; 0x37fc <main+0xde>
  		 break;
  default:transmitString_F(PSTR("Unknown SD Card Detected!"));
    37f8:	87 e2       	ldi	r24, 0x27	; 39
    37fa:	9e e1       	ldi	r25, 0x1E	; 30
    37fc:	0e 94 a8 20 	call	0x4150	; 0x4150 <transmitString_F>
  		 break; 
}


SPI_HIGH_SPEED;	//SCK - 4 MHz
    3800:	80 e5       	ldi	r24, 0x50	; 80
    3802:	8d b9       	out	0x0d, r24	; 13
    3804:	70 9a       	sbi	0x0e, 0	; 14
    3806:	80 ed       	ldi	r24, 0xD0	; 208
    3808:	97 e0       	ldi	r25, 0x07	; 7
    380a:	01 97       	sbiw	r24, 0x01	; 1
    380c:	f1 f7       	brne	.-4      	; 0x380a <main+0xec>
_delay_ms(1);   //some delay


FAT32_active = 1;
error = getBootSectorData (); //read boot sector and keep necessary data in global variables
    380e:	0e 94 89 13 	call	0x2712	; 0x2712 <getBootSectorData>
if(error) 	
    3812:	88 23       	and	r24, r24
    3814:	19 f4       	brne	.+6      	; 0x381c <main+0xfe>
    3816:	ee 24       	eor	r14, r14
    3818:	e3 94       	inc	r14
    381a:	0b c0       	rjmp	.+22     	; 0x3832 <main+0x114>
{
  TX_NEWLINE;
    381c:	8d e0       	ldi	r24, 0x0D	; 13
    381e:	0e 94 a4 20 	call	0x4148	; 0x4148 <transmitByte>
    3822:	8a e0       	ldi	r24, 0x0A	; 10
    3824:	0e 94 a4 20 	call	0x4148	; 0x4148 <transmitByte>
  transmitString_F (PSTR("FAT32 not found!"));  //FAT32 incompatible drive
    3828:	86 e1       	ldi	r24, 0x16	; 22
    382a:	9e e1       	ldi	r25, 0x1E	; 30
    382c:	0e 94 a8 20 	call	0x4150	; 0x4150 <transmitString_F>
    3830:	ee 24       	eor	r14, r14

case '6': 
case '7': 
case '8': TX_NEWLINE;
		  TX_NEWLINE;
          transmitString_F(PSTR("Enter file name: "));
    3832:	6e 01       	movw	r12, r28
    3834:	08 94       	sec
    3836:	c1 1c       	adc	r12, r1
    3838:	d1 1c       	adc	r13, r1
          for(i=0; i<13; i++)
    383a:	ee e0       	ldi	r30, 0x0E	; 14
    383c:	ae 2e       	mov	r10, r30
    383e:	b1 2c       	mov	r11, r1
    3840:	ac 0e       	add	r10, r28
    3842:	bd 1e       	adc	r11, r29
  FAT32_active = 0;
}

while(1)
{
TX_NEWLINE;
    3844:	8d e0       	ldi	r24, 0x0D	; 13
    3846:	0e 94 a4 20 	call	0x4148	; 0x4148 <transmitByte>
    384a:	8a e0       	ldi	r24, 0x0A	; 10
    384c:	0e 94 a4 20 	call	0x4148	; 0x4148 <transmitByte>
transmitString_F(PSTR("Press any key..."));
    3850:	85 e0       	ldi	r24, 0x05	; 5
    3852:	9e e1       	ldi	r25, 0x1E	; 30
    3854:	0e 94 a8 20 	call	0x4150	; 0x4150 <transmitString_F>
TX_NEWLINE;
    3858:	8d e0       	ldi	r24, 0x0D	; 13
    385a:	0e 94 a4 20 	call	0x4148	; 0x4148 <transmitByte>
    385e:	8a e0       	ldi	r24, 0x0A	; 10
    3860:	0e 94 a4 20 	call	0x4148	; 0x4148 <transmitByte>
option = receiveByte();
    3864:	0e 94 9f 20 	call	0x413e	; 0x413e <receiveByte>
TX_NEWLINE;
    3868:	8d e0       	ldi	r24, 0x0D	; 13
    386a:	0e 94 a4 20 	call	0x4148	; 0x4148 <transmitByte>
    386e:	8a e0       	ldi	r24, 0x0A	; 10
    3870:	0e 94 a4 20 	call	0x4148	; 0x4148 <transmitByte>
transmitString_F(PSTR("> 0 : Erase Blocks"));
    3874:	82 ef       	ldi	r24, 0xF2	; 242
    3876:	9d e1       	ldi	r25, 0x1D	; 29
    3878:	0e 94 a8 20 	call	0x4150	; 0x4150 <transmitString_F>
TX_NEWLINE;
    387c:	8d e0       	ldi	r24, 0x0D	; 13
    387e:	0e 94 a4 20 	call	0x4148	; 0x4148 <transmitByte>
    3882:	8a e0       	ldi	r24, 0x0A	; 10
    3884:	0e 94 a4 20 	call	0x4148	; 0x4148 <transmitByte>
transmitString_F(PSTR("> 1 : Write single Block"));
    3888:	89 ed       	ldi	r24, 0xD9	; 217
    388a:	9d e1       	ldi	r25, 0x1D	; 29
    388c:	0e 94 a8 20 	call	0x4150	; 0x4150 <transmitString_F>
TX_NEWLINE;
    3890:	8d e0       	ldi	r24, 0x0D	; 13
    3892:	0e 94 a4 20 	call	0x4148	; 0x4148 <transmitByte>
    3896:	8a e0       	ldi	r24, 0x0A	; 10
    3898:	0e 94 a4 20 	call	0x4148	; 0x4148 <transmitByte>
transmitString_F(PSTR("> 2 : Read single Block"));
    389c:	81 ec       	ldi	r24, 0xC1	; 193
    389e:	9d e1       	ldi	r25, 0x1D	; 29
    38a0:	0e 94 a8 20 	call	0x4150	; 0x4150 <transmitString_F>
TX_NEWLINE;
transmitString_F(PSTR("> 4 : Read multiple Blocks"));
#endif


TX_NEWLINE;
    38a4:	8d e0       	ldi	r24, 0x0D	; 13
    38a6:	0e 94 a4 20 	call	0x4148	; 0x4148 <transmitByte>
    38aa:	8a e0       	ldi	r24, 0x0A	; 10
    38ac:	0e 94 a4 20 	call	0x4148	; 0x4148 <transmitByte>
transmitString_F(PSTR("> 5 : Get file list"));
    38b0:	8d ea       	ldi	r24, 0xAD	; 173
    38b2:	9d e1       	ldi	r25, 0x1D	; 29
    38b4:	0e 94 a8 20 	call	0x4150	; 0x4150 <transmitString_F>
TX_NEWLINE;
    38b8:	8d e0       	ldi	r24, 0x0D	; 13
    38ba:	0e 94 a4 20 	call	0x4148	; 0x4148 <transmitByte>
    38be:	8a e0       	ldi	r24, 0x0A	; 10
    38c0:	0e 94 a4 20 	call	0x4148	; 0x4148 <transmitByte>
transmitString_F(PSTR("> 6 : Read File"));
    38c4:	8d e9       	ldi	r24, 0x9D	; 157
    38c6:	9d e1       	ldi	r25, 0x1D	; 29
    38c8:	0e 94 a8 20 	call	0x4150	; 0x4150 <transmitString_F>
TX_NEWLINE;
    38cc:	8d e0       	ldi	r24, 0x0D	; 13
    38ce:	0e 94 a4 20 	call	0x4148	; 0x4148 <transmitByte>
    38d2:	8a e0       	ldi	r24, 0x0A	; 10
    38d4:	0e 94 a4 20 	call	0x4148	; 0x4148 <transmitByte>
transmitString_F(PSTR("> 7 : Write File"));
    38d8:	8c e8       	ldi	r24, 0x8C	; 140
    38da:	9d e1       	ldi	r25, 0x1D	; 29
    38dc:	0e 94 a8 20 	call	0x4150	; 0x4150 <transmitString_F>
TX_NEWLINE;
    38e0:	8d e0       	ldi	r24, 0x0D	; 13
    38e2:	0e 94 a4 20 	call	0x4148	; 0x4148 <transmitByte>
    38e6:	8a e0       	ldi	r24, 0x0A	; 10
    38e8:	0e 94 a4 20 	call	0x4148	; 0x4148 <transmitByte>
transmitString_F(PSTR("> 8 : Delete File"));
    38ec:	8a e7       	ldi	r24, 0x7A	; 122
    38ee:	9d e1       	ldi	r25, 0x1D	; 29
    38f0:	0e 94 a8 20 	call	0x4150	; 0x4150 <transmitString_F>
TX_NEWLINE;
    38f4:	8d e0       	ldi	r24, 0x0D	; 13
    38f6:	0e 94 a4 20 	call	0x4148	; 0x4148 <transmitByte>
    38fa:	8a e0       	ldi	r24, 0x0A	; 10
    38fc:	0e 94 a4 20 	call	0x4148	; 0x4148 <transmitByte>
transmitString_F(PSTR("> 9 : Read SD Memory Capacity (Total/Free)"));
    3900:	8f e4       	ldi	r24, 0x4F	; 79
    3902:	9d e1       	ldi	r25, 0x1D	; 29
    3904:	0e 94 a8 20 	call	0x4150	; 0x4150 <transmitString_F>

TX_NEWLINE;
    3908:	8d e0       	ldi	r24, 0x0D	; 13
    390a:	0e 94 a4 20 	call	0x4148	; 0x4148 <transmitByte>
    390e:	8a e0       	ldi	r24, 0x0A	; 10
    3910:	0e 94 a4 20 	call	0x4148	; 0x4148 <transmitByte>
TX_NEWLINE;
    3914:	8d e0       	ldi	r24, 0x0D	; 13
    3916:	0e 94 a4 20 	call	0x4148	; 0x4148 <transmitByte>
    391a:	8a e0       	ldi	r24, 0x0A	; 10
    391c:	0e 94 a4 20 	call	0x4148	; 0x4148 <transmitByte>
transmitString_F(PSTR("> Select Option (0-9): "));
    3920:	87 e3       	ldi	r24, 0x37	; 55
    3922:	9d e1       	ldi	r25, 0x1D	; 29
    3924:	0e 94 a8 20 	call	0x4150	; 0x4150 <transmitString_F>

/*WARNING: If option 0, 1 or 3 is selected, the card may not be detected by PC/Laptop again,
as it disturbs the FAT format, and you may have to format it again with FAT32.
This options are given for learnig the raw data transfer to & from the SD Card*/

option = receiveByte();
    3928:	0e 94 9f 20 	call	0x413e	; 0x413e <receiveByte>
    392c:	f8 2e       	mov	r15, r24
transmitByte(option);
    392e:	0e 94 a4 20 	call	0x4148	; 0x4148 <transmitByte>

if(option >=0x35 && option <=0x39)  //options 5 to 9 disabled if FAT32 not found
    3932:	8f 2d       	mov	r24, r15
    3934:	85 53       	subi	r24, 0x35	; 53
    3936:	85 30       	cpi	r24, 0x05	; 5
    3938:	98 f4       	brcc	.+38     	; 0x3960 <main+0x242>
{
  if(!FAT32_active) 
    393a:	ee 20       	and	r14, r14
    393c:	89 f4       	brne	.+34     	; 0x3960 <main+0x242>
  {
    TX_NEWLINE;
    393e:	8d e0       	ldi	r24, 0x0D	; 13
    3940:	0e 94 a4 20 	call	0x4148	; 0x4148 <transmitByte>
    3944:	8a e0       	ldi	r24, 0x0A	; 10
    3946:	0e 94 a4 20 	call	0x4148	; 0x4148 <transmitByte>
    TX_NEWLINE;
    394a:	8d e0       	ldi	r24, 0x0D	; 13
    394c:	0e 94 a4 20 	call	0x4148	; 0x4148 <transmitByte>
    3950:	8a e0       	ldi	r24, 0x0A	; 10
    3952:	0e 94 a4 20 	call	0x4148	; 0x4148 <transmitByte>
	transmitString_F(PSTR("FAT32 options disabled!"));
    3956:	8f e1       	ldi	r24, 0x1F	; 31
    3958:	9d e1       	ldi	r25, 0x1D	; 29
    395a:	0e 94 a8 20 	call	0x4150	; 0x4150 <transmitString_F>
    395e:	72 cf       	rjmp	.-284    	; 0x3844 <main+0x126>
	continue;
  } 
}


if((option >= 0x30) && (option <=0x34)) //get starting block address for options 0 to 4
    3960:	8f 2d       	mov	r24, r15
    3962:	80 53       	subi	r24, 0x30	; 48
    3964:	85 30       	cpi	r24, 0x05	; 5
    3966:	08 f0       	brcs	.+2      	; 0x396a <main+0x24c>
    3968:	a2 c0       	rjmp	.+324    	; 0x3aae <main+0x390>
{
TX_NEWLINE;
    396a:	8d e0       	ldi	r24, 0x0D	; 13
    396c:	0e 94 a4 20 	call	0x4148	; 0x4148 <transmitByte>
    3970:	8a e0       	ldi	r24, 0x0A	; 10
    3972:	0e 94 a4 20 	call	0x4148	; 0x4148 <transmitByte>
TX_NEWLINE;
    3976:	8d e0       	ldi	r24, 0x0D	; 13
    3978:	0e 94 a4 20 	call	0x4148	; 0x4148 <transmitByte>
    397c:	8a e0       	ldi	r24, 0x0A	; 10
    397e:	0e 94 a4 20 	call	0x4148	; 0x4148 <transmitByte>
transmitString_F(PSTR("Enter the Block number (0000-9999):"));
    3982:	8b ef       	ldi	r24, 0xFB	; 251
    3984:	9c e1       	ldi	r25, 0x1C	; 28
    3986:	0e 94 a8 20 	call	0x4150	; 0x4150 <transmitString_F>
data = receiveByte(); transmitByte(data);
    398a:	0e 94 9f 20 	call	0x413e	; 0x413e <receiveByte>
    398e:	08 2f       	mov	r16, r24
    3990:	0e 94 a4 20 	call	0x4148	; 0x4148 <transmitByte>
startBlock = (data & 0x0f) * 1000;
    3994:	10 e0       	ldi	r17, 0x00	; 0
    3996:	0f 70       	andi	r16, 0x0F	; 15
    3998:	10 70       	andi	r17, 0x00	; 0
    399a:	88 ee       	ldi	r24, 0xE8	; 232
    399c:	93 e0       	ldi	r25, 0x03	; 3
    399e:	9c 01       	movw	r18, r24
    39a0:	02 9f       	mul	r16, r18
    39a2:	c0 01       	movw	r24, r0
    39a4:	03 9f       	mul	r16, r19
    39a6:	90 0d       	add	r25, r0
    39a8:	12 9f       	mul	r17, r18
    39aa:	90 0d       	add	r25, r0
    39ac:	11 24       	eor	r1, r1
    39ae:	aa 27       	eor	r26, r26
    39b0:	97 fd       	sbrc	r25, 7
    39b2:	a0 95       	com	r26
    39b4:	ba 2f       	mov	r27, r26
    39b6:	80 93 d2 00 	sts	0x00D2, r24
    39ba:	90 93 d3 00 	sts	0x00D3, r25
    39be:	a0 93 d4 00 	sts	0x00D4, r26
    39c2:	b0 93 d5 00 	sts	0x00D5, r27
data = receiveByte(); transmitByte(data);
    39c6:	0e 94 9f 20 	call	0x413e	; 0x413e <receiveByte>
    39ca:	08 2f       	mov	r16, r24
    39cc:	0e 94 a4 20 	call	0x4148	; 0x4148 <transmitByte>
startBlock += (data & 0x0f) * 100;
    39d0:	20 91 d2 00 	lds	r18, 0x00D2
    39d4:	30 91 d3 00 	lds	r19, 0x00D3
    39d8:	40 91 d4 00 	lds	r20, 0x00D4
    39dc:	50 91 d5 00 	lds	r21, 0x00D5
    39e0:	10 e0       	ldi	r17, 0x00	; 0
    39e2:	0f 70       	andi	r16, 0x0F	; 15
    39e4:	10 70       	andi	r17, 0x00	; 0
    39e6:	84 e6       	ldi	r24, 0x64	; 100
    39e8:	90 e0       	ldi	r25, 0x00	; 0
    39ea:	bc 01       	movw	r22, r24
    39ec:	06 9f       	mul	r16, r22
    39ee:	c0 01       	movw	r24, r0
    39f0:	07 9f       	mul	r16, r23
    39f2:	90 0d       	add	r25, r0
    39f4:	16 9f       	mul	r17, r22
    39f6:	90 0d       	add	r25, r0
    39f8:	11 24       	eor	r1, r1
    39fa:	aa 27       	eor	r26, r26
    39fc:	97 fd       	sbrc	r25, 7
    39fe:	a0 95       	com	r26
    3a00:	ba 2f       	mov	r27, r26
    3a02:	82 0f       	add	r24, r18
    3a04:	93 1f       	adc	r25, r19
    3a06:	a4 1f       	adc	r26, r20
    3a08:	b5 1f       	adc	r27, r21
    3a0a:	80 93 d2 00 	sts	0x00D2, r24
    3a0e:	90 93 d3 00 	sts	0x00D3, r25
    3a12:	a0 93 d4 00 	sts	0x00D4, r26
    3a16:	b0 93 d5 00 	sts	0x00D5, r27
data = receiveByte(); transmitByte(data);
    3a1a:	0e 94 9f 20 	call	0x413e	; 0x413e <receiveByte>
    3a1e:	08 2f       	mov	r16, r24
    3a20:	0e 94 a4 20 	call	0x4148	; 0x4148 <transmitByte>
startBlock += (data & 0x0f) * 10;
    3a24:	20 91 d2 00 	lds	r18, 0x00D2
    3a28:	30 91 d3 00 	lds	r19, 0x00D3
    3a2c:	40 91 d4 00 	lds	r20, 0x00D4
    3a30:	50 91 d5 00 	lds	r21, 0x00D5
    3a34:	10 e0       	ldi	r17, 0x00	; 0
    3a36:	0f 70       	andi	r16, 0x0F	; 15
    3a38:	10 70       	andi	r17, 0x00	; 0
    3a3a:	c8 01       	movw	r24, r16
    3a3c:	73 e0       	ldi	r23, 0x03	; 3
    3a3e:	88 0f       	add	r24, r24
    3a40:	99 1f       	adc	r25, r25
    3a42:	7a 95       	dec	r23
    3a44:	e1 f7       	brne	.-8      	; 0x3a3e <main+0x320>
    3a46:	00 0f       	add	r16, r16
    3a48:	11 1f       	adc	r17, r17
    3a4a:	80 0f       	add	r24, r16
    3a4c:	91 1f       	adc	r25, r17
    3a4e:	aa 27       	eor	r26, r26
    3a50:	97 fd       	sbrc	r25, 7
    3a52:	a0 95       	com	r26
    3a54:	ba 2f       	mov	r27, r26
    3a56:	82 0f       	add	r24, r18
    3a58:	93 1f       	adc	r25, r19
    3a5a:	a4 1f       	adc	r26, r20
    3a5c:	b5 1f       	adc	r27, r21
    3a5e:	80 93 d2 00 	sts	0x00D2, r24
    3a62:	90 93 d3 00 	sts	0x00D3, r25
    3a66:	a0 93 d4 00 	sts	0x00D4, r26
    3a6a:	b0 93 d5 00 	sts	0x00D5, r27
data = receiveByte(); transmitByte(data);
    3a6e:	0e 94 9f 20 	call	0x413e	; 0x413e <receiveByte>
    3a72:	18 2f       	mov	r17, r24
    3a74:	0e 94 a4 20 	call	0x4148	; 0x4148 <transmitByte>
startBlock += (data & 0x0f);
    3a78:	80 91 d2 00 	lds	r24, 0x00D2
    3a7c:	90 91 d3 00 	lds	r25, 0x00D3
    3a80:	a0 91 d4 00 	lds	r26, 0x00D4
    3a84:	b0 91 d5 00 	lds	r27, 0x00D5
    3a88:	1f 70       	andi	r17, 0x0F	; 15
    3a8a:	81 0f       	add	r24, r17
    3a8c:	91 1d       	adc	r25, r1
    3a8e:	a1 1d       	adc	r26, r1
    3a90:	b1 1d       	adc	r27, r1
    3a92:	80 93 d2 00 	sts	0x00D2, r24
    3a96:	90 93 d3 00 	sts	0x00D3, r25
    3a9a:	a0 93 d4 00 	sts	0x00D4, r26
    3a9e:	b0 93 d5 00 	sts	0x00D5, r27
TX_NEWLINE;
    3aa2:	8d e0       	ldi	r24, 0x0D	; 13
    3aa4:	0e 94 a4 20 	call	0x4148	; 0x4148 <transmitByte>
    3aa8:	8a e0       	ldi	r24, 0x0A	; 10
    3aaa:	0e 94 a4 20 	call	0x4148	; 0x4148 <transmitByte>
}

totalBlocks = 1;
    3aae:	81 e0       	ldi	r24, 0x01	; 1
    3ab0:	90 e0       	ldi	r25, 0x00	; 0
    3ab2:	a0 e0       	ldi	r26, 0x00	; 0
    3ab4:	b0 e0       	ldi	r27, 0x00	; 0
    3ab6:	80 93 dd 02 	sts	0x02DD, r24
    3aba:	90 93 de 02 	sts	0x02DE, r25
    3abe:	a0 93 df 02 	sts	0x02DF, r26
    3ac2:	b0 93 e0 02 	sts	0x02E0, r27
totalBlocks += (data & 0x0f);
TX_NEWLINE;
}
#endif

switch (option)
    3ac6:	75 e3       	ldi	r23, 0x35	; 53
    3ac8:	f7 16       	cp	r15, r23
    3aca:	09 f4       	brne	.+2      	; 0x3ace <main+0x3b0>
    3acc:	ba c0       	rjmp	.+372    	; 0x3c42 <main+0x524>
    3ace:	7f 15       	cp	r23, r15
    3ad0:	60 f0       	brcs	.+24     	; 0x3aea <main+0x3cc>
    3ad2:	81 e3       	ldi	r24, 0x31	; 49
    3ad4:	f8 16       	cp	r15, r24
    3ad6:	99 f1       	breq	.+102    	; 0x3b3e <main+0x420>
    3ad8:	22 e3       	ldi	r18, 0x32	; 50
    3ada:	f2 16       	cp	r15, r18
    3adc:	09 f4       	brne	.+2      	; 0x3ae0 <main+0x3c2>
    3ade:	7b c0       	rjmp	.+246    	; 0x3bd6 <main+0x4b8>
    3ae0:	30 e3       	ldi	r19, 0x30	; 48
    3ae2:	f3 16       	cp	r15, r19
    3ae4:	09 f0       	breq	.+2      	; 0x3ae8 <main+0x3ca>
    3ae6:	19 c1       	rjmp	.+562    	; 0x3d1a <main+0x5fc>
    3ae8:	09 c0       	rjmp	.+18     	; 0x3afc <main+0x3de>
    3aea:	68 e3       	ldi	r22, 0x38	; 56
    3aec:	6f 15       	cp	r22, r15
    3aee:	08 f0       	brcs	.+2      	; 0x3af2 <main+0x3d4>
    3af0:	b4 c0       	rjmp	.+360    	; 0x3c5a <main+0x53c>
    3af2:	79 e3       	ldi	r23, 0x39	; 57
    3af4:	f7 16       	cp	r15, r23
    3af6:	09 f0       	breq	.+2      	; 0x3afa <main+0x3dc>
    3af8:	10 c1       	rjmp	.+544    	; 0x3d1a <main+0x5fc>
    3afa:	0c c1       	rjmp	.+536    	; 0x3d14 <main+0x5f6>
{
case '0': //error = SD_erase (block, totalBlocks);
          error = SD_erase (startBlock, totalBlocks);
    3afc:	60 91 d2 00 	lds	r22, 0x00D2
    3b00:	70 91 d3 00 	lds	r23, 0x00D3
    3b04:	80 91 d4 00 	lds	r24, 0x00D4
    3b08:	90 91 d5 00 	lds	r25, 0x00D5
    3b0c:	20 91 dd 02 	lds	r18, 0x02DD
    3b10:	30 91 de 02 	lds	r19, 0x02DE
    3b14:	40 91 df 02 	lds	r20, 0x02DF
    3b18:	50 91 e0 02 	lds	r21, 0x02E0
    3b1c:	0e 94 16 1f 	call	0x3e2c	; 0x3e2c <SD_erase>
    3b20:	18 2f       	mov	r17, r24
          TX_NEWLINE;
    3b22:	8d e0       	ldi	r24, 0x0D	; 13
    3b24:	0e 94 a4 20 	call	0x4148	; 0x4148 <transmitByte>
    3b28:	8a e0       	ldi	r24, 0x0A	; 10
    3b2a:	0e 94 a4 20 	call	0x4148	; 0x4148 <transmitByte>
          if(error)
    3b2e:	11 23       	and	r17, r17
    3b30:	19 f0       	breq	.+6      	; 0x3b38 <main+0x41a>
              transmitString_F(PSTR("Erase failed.."));
    3b32:	8c ee       	ldi	r24, 0xEC	; 236
    3b34:	9c e1       	ldi	r25, 0x1C	; 28
    3b36:	49 c0       	rjmp	.+146    	; 0x3bca <main+0x4ac>
          else
              transmitString_F(PSTR("Erased!"));
    3b38:	84 ee       	ldi	r24, 0xE4	; 228
    3b3a:	9c e1       	ldi	r25, 0x1C	; 28
    3b3c:	46 c0       	rjmp	.+140    	; 0x3bca <main+0x4ac>
          break;

case '1': TX_NEWLINE;
    3b3e:	8d e0       	ldi	r24, 0x0D	; 13
    3b40:	0e 94 a4 20 	call	0x4148	; 0x4148 <transmitByte>
    3b44:	8a e0       	ldi	r24, 0x0A	; 10
    3b46:	0e 94 a4 20 	call	0x4148	; 0x4148 <transmitByte>
          transmitString_F(PSTR(" Enter text (End with ~):"));
    3b4a:	8a ec       	ldi	r24, 0xCA	; 202
    3b4c:	9c e1       	ldi	r25, 0x1C	; 28
    3b4e:	0e 94 a8 20 	call	0x4150	; 0x4150 <transmitString_F>
    3b52:	00 e0       	ldi	r16, 0x00	; 0
    3b54:	10 e0       	ldi	r17, 0x00	; 0
          i=0;
            do
            {
                data = receiveByte();
    3b56:	0e 94 9f 20 	call	0x413e	; 0x413e <receiveByte>
    3b5a:	f8 2e       	mov	r15, r24
                transmitByte(data);
    3b5c:	0e 94 a4 20 	call	0x4148	; 0x4148 <transmitByte>
                buffer[i++] = data;
    3b60:	f8 01       	movw	r30, r16
    3b62:	ea 52       	subi	r30, 0x2A	; 42
    3b64:	ff 4f       	sbci	r31, 0xFF	; 255
    3b66:	f0 82       	st	Z, r15
    3b68:	0f 5f       	subi	r16, 0xFF	; 255
    3b6a:	1f 4f       	sbci	r17, 0xFF	; 255
                if(data == 0x0d)
    3b6c:	8d e0       	ldi	r24, 0x0D	; 13
    3b6e:	f8 16       	cp	r15, r24
    3b70:	51 f4       	brne	.+20     	; 0x3b86 <main+0x468>
                {
                    transmitByte(0x0a);
    3b72:	8a e0       	ldi	r24, 0x0A	; 10
    3b74:	0e 94 a4 20 	call	0x4148	; 0x4148 <transmitByte>
                    buffer[i++] = 0x0a;
    3b78:	f8 01       	movw	r30, r16
    3b7a:	ea 52       	subi	r30, 0x2A	; 42
    3b7c:	ff 4f       	sbci	r31, 0xFF	; 255
    3b7e:	8a e0       	ldi	r24, 0x0A	; 10
    3b80:	80 83       	st	Z, r24
    3b82:	0f 5f       	subi	r16, 0xFF	; 255
    3b84:	1f 4f       	sbci	r17, 0xFF	; 255
                }
                if(i == 512) break;
    3b86:	22 e0       	ldi	r18, 0x02	; 2
    3b88:	00 30       	cpi	r16, 0x00	; 0
    3b8a:	12 07       	cpc	r17, r18
    3b8c:	19 f0       	breq	.+6      	; 0x3b94 <main+0x476>
            }while (data != '~');
    3b8e:	3e e7       	ldi	r19, 0x7E	; 126
    3b90:	f3 16       	cp	r15, r19
    3b92:	09 f7       	brne	.-62     	; 0x3b56 <main+0x438>

            error = SD_writeSingleBlock (startBlock);
    3b94:	60 91 d2 00 	lds	r22, 0x00D2
    3b98:	70 91 d3 00 	lds	r23, 0x00D3
    3b9c:	80 91 d4 00 	lds	r24, 0x00D4
    3ba0:	90 91 d5 00 	lds	r25, 0x00D5
    3ba4:	0e 94 49 1f 	call	0x3e92	; 0x3e92 <SD_writeSingleBlock>
    3ba8:	18 2f       	mov	r17, r24
            TX_NEWLINE;
    3baa:	8d e0       	ldi	r24, 0x0D	; 13
    3bac:	0e 94 a4 20 	call	0x4148	; 0x4148 <transmitByte>
    3bb0:	8a e0       	ldi	r24, 0x0A	; 10
    3bb2:	0e 94 a4 20 	call	0x4148	; 0x4148 <transmitByte>
            TX_NEWLINE;
    3bb6:	8d e0       	ldi	r24, 0x0D	; 13
    3bb8:	0e 94 a4 20 	call	0x4148	; 0x4148 <transmitByte>
    3bbc:	8a e0       	ldi	r24, 0x0A	; 10
    3bbe:	0e 94 a4 20 	call	0x4148	; 0x4148 <transmitByte>
            if(error)
    3bc2:	11 23       	and	r17, r17
    3bc4:	29 f0       	breq	.+10     	; 0x3bd0 <main+0x4b2>
                transmitString_F(PSTR("Write failed.."));
    3bc6:	8b eb       	ldi	r24, 0xBB	; 187
    3bc8:	9c e1       	ldi	r25, 0x1C	; 28
    3bca:	0e 94 a8 20 	call	0x4150	; 0x4150 <transmitString_F>
    3bce:	bb c0       	rjmp	.+374    	; 0x3d46 <main+0x628>
            else
                transmitString_F(PSTR("Write successful!"));
    3bd0:	89 ea       	ldi	r24, 0xA9	; 169
    3bd2:	9c e1       	ldi	r25, 0x1C	; 28
    3bd4:	fa cf       	rjmp	.-12     	; 0x3bca <main+0x4ac>
            break;

case '2': error = SD_readSingleBlock (startBlock);
    3bd6:	60 91 d2 00 	lds	r22, 0x00D2
    3bda:	70 91 d3 00 	lds	r23, 0x00D3
    3bde:	80 91 d4 00 	lds	r24, 0x00D4
    3be2:	90 91 d5 00 	lds	r25, 0x00D5
    3be6:	0e 94 97 1f 	call	0x3f2e	; 0x3f2e <SD_readSingleBlock>
    3bea:	18 2f       	mov	r17, r24
          TX_NEWLINE;
    3bec:	8d e0       	ldi	r24, 0x0D	; 13
    3bee:	0e 94 a4 20 	call	0x4148	; 0x4148 <transmitByte>
    3bf2:	8a e0       	ldi	r24, 0x0A	; 10
    3bf4:	0e 94 a4 20 	call	0x4148	; 0x4148 <transmitByte>
          if(error)
    3bf8:	11 23       	and	r17, r17
    3bfa:	19 f0       	breq	.+6      	; 0x3c02 <main+0x4e4>
            transmitString_F(PSTR("Read failed.."));
    3bfc:	8b e9       	ldi	r24, 0x9B	; 155
    3bfe:	9c e1       	ldi	r25, 0x1C	; 28
    3c00:	e4 cf       	rjmp	.-56     	; 0x3bca <main+0x4ac>
    3c02:	00 e0       	ldi	r16, 0x00	; 0
    3c04:	10 e0       	ldi	r17, 0x00	; 0
          else
          {
            for(i=0;i<512;i++)
            {
                if(buffer[i] == '~') break;
    3c06:	f8 01       	movw	r30, r16
    3c08:	ea 52       	subi	r30, 0x2A	; 42
    3c0a:	ff 4f       	sbci	r31, 0xFF	; 255
    3c0c:	80 81       	ld	r24, Z
    3c0e:	8e 37       	cpi	r24, 0x7E	; 126
    3c10:	49 f0       	breq	.+18     	; 0x3c24 <main+0x506>
                transmitByte(buffer[i]);
    3c12:	80 81       	ld	r24, Z
    3c14:	0e 94 a4 20 	call	0x4148	; 0x4148 <transmitByte>
          TX_NEWLINE;
          if(error)
            transmitString_F(PSTR("Read failed.."));
          else
          {
            for(i=0;i<512;i++)
    3c18:	0f 5f       	subi	r16, 0xFF	; 255
    3c1a:	1f 4f       	sbci	r17, 0xFF	; 255
    3c1c:	62 e0       	ldi	r22, 0x02	; 2
    3c1e:	00 30       	cpi	r16, 0x00	; 0
    3c20:	16 07       	cpc	r17, r22
    3c22:	89 f7       	brne	.-30     	; 0x3c06 <main+0x4e8>
            {
                if(buffer[i] == '~') break;
                transmitByte(buffer[i]);
            }
            TX_NEWLINE;
    3c24:	8d e0       	ldi	r24, 0x0D	; 13
    3c26:	0e 94 a4 20 	call	0x4148	; 0x4148 <transmitByte>
    3c2a:	8a e0       	ldi	r24, 0x0A	; 10
    3c2c:	0e 94 a4 20 	call	0x4148	; 0x4148 <transmitByte>
            TX_NEWLINE;
    3c30:	8d e0       	ldi	r24, 0x0D	; 13
    3c32:	0e 94 a4 20 	call	0x4148	; 0x4148 <transmitByte>
    3c36:	8a e0       	ldi	r24, 0x0A	; 10
    3c38:	0e 94 a4 20 	call	0x4148	; 0x4148 <transmitByte>
            transmitString_F(PSTR("Read successful!"));
    3c3c:	8a e8       	ldi	r24, 0x8A	; 138
    3c3e:	9c e1       	ldi	r25, 0x1C	; 28
    3c40:	c4 cf       	rjmp	.-120    	; 0x3bca <main+0x4ac>
          else
            transmitString_F(PSTR("Read successful!"));
          break;
#endif

case '5': TX_NEWLINE;
    3c42:	8d e0       	ldi	r24, 0x0D	; 13
    3c44:	0e 94 a4 20 	call	0x4148	; 0x4148 <transmitByte>
    3c48:	8a e0       	ldi	r24, 0x0A	; 10
    3c4a:	0e 94 a4 20 	call	0x4148	; 0x4148 <transmitByte>
  		  findFiles(GET_LIST,0);
    3c4e:	80 e0       	ldi	r24, 0x00	; 0
    3c50:	60 e0       	ldi	r22, 0x00	; 0
    3c52:	70 e0       	ldi	r23, 0x00	; 0
    3c54:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <findFiles>
    3c58:	76 c0       	rjmp	.+236    	; 0x3d46 <main+0x628>
          break;

case '6': 
case '7': 
case '8': TX_NEWLINE;
    3c5a:	8d e0       	ldi	r24, 0x0D	; 13
    3c5c:	0e 94 a4 20 	call	0x4148	; 0x4148 <transmitByte>
    3c60:	8a e0       	ldi	r24, 0x0A	; 10
    3c62:	0e 94 a4 20 	call	0x4148	; 0x4148 <transmitByte>
		  TX_NEWLINE;
    3c66:	8d e0       	ldi	r24, 0x0D	; 13
    3c68:	0e 94 a4 20 	call	0x4148	; 0x4148 <transmitByte>
    3c6c:	8a e0       	ldi	r24, 0x0A	; 10
    3c6e:	0e 94 a4 20 	call	0x4148	; 0x4148 <transmitByte>
          transmitString_F(PSTR("Enter file name: "));
    3c72:	88 e7       	ldi	r24, 0x78	; 120
    3c74:	9c e1       	ldi	r25, 0x1C	; 28
    3c76:	0e 94 a8 20 	call	0x4150	; 0x4150 <transmitString_F>
    3c7a:	f6 01       	movw	r30, r12
          for(i=0; i<13; i++)
			fileName[i] = 0x00;   //clearing any previously stored file name
    3c7c:	11 92       	st	Z+, r1
case '6': 
case '7': 
case '8': TX_NEWLINE;
		  TX_NEWLINE;
          transmitString_F(PSTR("Enter file name: "));
          for(i=0; i<13; i++)
    3c7e:	ea 15       	cp	r30, r10
    3c80:	fb 05       	cpc	r31, r11
    3c82:	e1 f7       	brne	.-8      	; 0x3c7c <main+0x55e>
    3c84:	00 e0       	ldi	r16, 0x00	; 0
    3c86:	10 e0       	ldi	r17, 0x00	; 0
			fileName[i] = 0x00;   //clearing any previously stored file name
          i=0;
          while(1)
          {
            data = receiveByte();
    3c88:	0e 94 9f 20 	call	0x413e	; 0x413e <receiveByte>
    3c8c:	98 2f       	mov	r25, r24
            if(data == 0x0d) break;  //'ENTER' key pressed
    3c8e:	8d 30       	cpi	r24, 0x0D	; 13
    3c90:	29 f1       	breq	.+74     	; 0x3cdc <main+0x5be>
			if(data == 0x08)	//'Back Space' key pressed
    3c92:	88 30       	cpi	r24, 0x08	; 8
    3c94:	79 f4       	brne	.+30     	; 0x3cb4 <main+0x596>
	 		{ 
	   			if(i != 0)
    3c96:	01 15       	cp	r16, r1
    3c98:	11 05       	cpc	r17, r1
    3c9a:	b1 f3       	breq	.-20     	; 0x3c88 <main+0x56a>
	   			{ 
	     			transmitByte(data);
    3c9c:	88 e0       	ldi	r24, 0x08	; 8
    3c9e:	0e 94 a4 20 	call	0x4148	; 0x4148 <transmitByte>
					transmitByte(' '); 
    3ca2:	80 e2       	ldi	r24, 0x20	; 32
    3ca4:	0e 94 a4 20 	call	0x4148	; 0x4148 <transmitByte>
	     			transmitByte(data); 
    3ca8:	88 e0       	ldi	r24, 0x08	; 8
    3caa:	0e 94 a4 20 	call	0x4148	; 0x4148 <transmitByte>
	     			i--; 
    3cae:	01 50       	subi	r16, 0x01	; 1
    3cb0:	10 40       	sbci	r17, 0x00	; 0
    3cb2:	ea cf       	rjmp	.-44     	; 0x3c88 <main+0x56a>
	   			} 
	   			continue;     
	 		}
			if(data <0x20 || data > 0x7e) continue;  //check for valid English text character
    3cb4:	80 52       	subi	r24, 0x20	; 32
    3cb6:	8f 35       	cpi	r24, 0x5F	; 95
    3cb8:	38 f7       	brcc	.-50     	; 0x3c88 <main+0x56a>
			transmitByte(data);
    3cba:	89 2f       	mov	r24, r25
    3cbc:	9e 87       	std	Y+14, r25	; 0x0e
    3cbe:	0e 94 a4 20 	call	0x4148	; 0x4148 <transmitByte>
            fileName[i++] = data;
    3cc2:	f6 01       	movw	r30, r12
    3cc4:	e0 0f       	add	r30, r16
    3cc6:	f1 1f       	adc	r31, r17
    3cc8:	9e 85       	ldd	r25, Y+14	; 0x0e
    3cca:	90 83       	st	Z, r25
    3ccc:	0f 5f       	subi	r16, 0xFF	; 255
    3cce:	1f 4f       	sbci	r17, 0xFF	; 255
            if(i==13){transmitString_F(PSTR(" file name too long..")); break;}
    3cd0:	0d 30       	cpi	r16, 0x0D	; 13
    3cd2:	11 05       	cpc	r17, r1
    3cd4:	c9 f6       	brne	.-78     	; 0x3c88 <main+0x56a>
    3cd6:	82 e6       	ldi	r24, 0x62	; 98
    3cd8:	9c e1       	ldi	r25, 0x1C	; 28
    3cda:	77 cf       	rjmp	.-274    	; 0x3bca <main+0x4ac>
          }
          if(i>12) break;
    3cdc:	0d 30       	cpi	r16, 0x0D	; 13
    3cde:	11 05       	cpc	r17, r1
    3ce0:	90 f5       	brcc	.+100    	; 0x3d46 <main+0x628>
       
	      TX_NEWLINE;
    3ce2:	8d e0       	ldi	r24, 0x0D	; 13
    3ce4:	0e 94 a4 20 	call	0x4148	; 0x4148 <transmitByte>
    3ce8:	8a e0       	ldi	r24, 0x0A	; 10
    3cea:	0e 94 a4 20 	call	0x4148	; 0x4148 <transmitByte>
		  if(option == '6')
    3cee:	76 e3       	ldi	r23, 0x36	; 54
    3cf0:	f7 16       	cp	r15, r23
    3cf2:	29 f4       	brne	.+10     	; 0x3cfe <main+0x5e0>
		     readFile( READ, fileName);
    3cf4:	80 e0       	ldi	r24, 0x00	; 0
    3cf6:	b6 01       	movw	r22, r12
    3cf8:	0e 94 e7 16 	call	0x2dce	; 0x2dce <readFile>
    3cfc:	24 c0       	rjmp	.+72     	; 0x3d46 <main+0x628>
		  if(option == '7')
    3cfe:	87 e3       	ldi	r24, 0x37	; 55
    3d00:	f8 16       	cp	r15, r24
    3d02:	21 f4       	brne	.+8      	; 0x3d0c <main+0x5ee>
		  	 writeFile(fileName);
    3d04:	c6 01       	movw	r24, r12
    3d06:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <writeFile>
    3d0a:	1d c0       	rjmp	.+58     	; 0x3d46 <main+0x628>
 		  if(option == '8')
		     deleteFile(fileName);
    3d0c:	c6 01       	movw	r24, r12
    3d0e:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <deleteFile>
    3d12:	19 c0       	rjmp	.+50     	; 0x3d46 <main+0x628>
          break;

case '9': memoryStatistics();
    3d14:	0e 94 59 12 	call	0x24b2	; 0x24b2 <memoryStatistics>
    3d18:	16 c0       	rjmp	.+44     	; 0x3d46 <main+0x628>
          break;

default: TX_NEWLINE;
    3d1a:	8d e0       	ldi	r24, 0x0D	; 13
    3d1c:	0e 94 a4 20 	call	0x4148	; 0x4148 <transmitByte>
    3d20:	8a e0       	ldi	r24, 0x0A	; 10
    3d22:	0e 94 a4 20 	call	0x4148	; 0x4148 <transmitByte>
         TX_NEWLINE;
    3d26:	8d e0       	ldi	r24, 0x0D	; 13
    3d28:	0e 94 a4 20 	call	0x4148	; 0x4148 <transmitByte>
    3d2c:	8a e0       	ldi	r24, 0x0A	; 10
    3d2e:	0e 94 a4 20 	call	0x4148	; 0x4148 <transmitByte>
         transmitString_F(PSTR(" Invalid option!"));
    3d32:	81 e5       	ldi	r24, 0x51	; 81
    3d34:	9c e1       	ldi	r25, 0x1C	; 28
    3d36:	0e 94 a8 20 	call	0x4150	; 0x4150 <transmitString_F>
         TX_NEWLINE;
    3d3a:	8d e0       	ldi	r24, 0x0D	; 13
    3d3c:	0e 94 a4 20 	call	0x4148	; 0x4148 <transmitByte>
    3d40:	8a e0       	ldi	r24, 0x0A	; 10
    3d42:	0e 94 a4 20 	call	0x4148	; 0x4148 <transmitByte>
}

TX_NEWLINE;
    3d46:	8d e0       	ldi	r24, 0x0D	; 13
    3d48:	0e 94 a4 20 	call	0x4148	; 0x4148 <transmitByte>
    3d4c:	8a e0       	ldi	r24, 0x0A	; 10
    3d4e:	0e 94 a4 20 	call	0x4148	; 0x4148 <transmitByte>
    3d52:	78 cd       	rjmp	.-1296   	; 0x3844 <main+0x126>

00003d54 <SD_sendCommand>:
//Arguments	: unsigned char (8-bit command value)
// 			  & unsigned long (32-bit command argument)
//return	: unsigned char; response byte
//******************************************************************
unsigned char SD_sendCommand(unsigned char cmd, unsigned long arg)
{
    3d54:	df 92       	push	r13
    3d56:	ef 92       	push	r14
    3d58:	ff 92       	push	r15
    3d5a:	0f 93       	push	r16
    3d5c:	1f 93       	push	r17
    3d5e:	d8 2e       	mov	r13, r24
    3d60:	7a 01       	movw	r14, r20
    3d62:	8b 01       	movw	r16, r22
//so, if it's SD card we need to convert block address into corresponding byte address by 
//multipying it with 512. which is equivalent to shifting it left 9 times
//following 'if' loop does that


if(SDHC_flag == 0)		
    3d64:	80 91 dc 02 	lds	r24, 0x02DC
    3d68:	88 23       	and	r24, r24
    3d6a:	b9 f4       	brne	.+46     	; 0x3d9a <SD_sendCommand+0x46>
if(cmd == READ_SINGLE_BLOCK     ||
    3d6c:	8d 2d       	mov	r24, r13
    3d6e:	81 51       	subi	r24, 0x11	; 17
    3d70:	82 30       	cpi	r24, 0x02	; 2
    3d72:	60 f0       	brcs	.+24     	; 0x3d8c <SD_sendCommand+0x38>
    3d74:	88 e1       	ldi	r24, 0x18	; 24
    3d76:	d8 16       	cp	r13, r24
    3d78:	49 f0       	breq	.+18     	; 0x3d8c <SD_sendCommand+0x38>
    3d7a:	89 e1       	ldi	r24, 0x19	; 25
    3d7c:	d8 16       	cp	r13, r24
    3d7e:	31 f0       	breq	.+12     	; 0x3d8c <SD_sendCommand+0x38>
    3d80:	80 e2       	ldi	r24, 0x20	; 32
    3d82:	d8 16       	cp	r13, r24
    3d84:	19 f0       	breq	.+6      	; 0x3d8c <SD_sendCommand+0x38>
    3d86:	81 e2       	ldi	r24, 0x21	; 33
    3d88:	d8 16       	cp	r13, r24
    3d8a:	39 f4       	brne	.+14     	; 0x3d9a <SD_sendCommand+0x46>
   cmd == WRITE_SINGLE_BLOCK    ||
   cmd == WRITE_MULTIPLE_BLOCKS ||
   cmd == ERASE_BLOCK_START_ADDR|| 
   cmd == ERASE_BLOCK_END_ADDR ) 
   {
     arg = arg << 9;
    3d8c:	39 e0       	ldi	r19, 0x09	; 9
    3d8e:	ee 0c       	add	r14, r14
    3d90:	ff 1c       	adc	r15, r15
    3d92:	00 1f       	adc	r16, r16
    3d94:	11 1f       	adc	r17, r17
    3d96:	3a 95       	dec	r19
    3d98:	d1 f7       	brne	.-12     	; 0x3d8e <SD_sendCommand+0x3a>
   }	   

SD_CS_ASSERT;
    3d9a:	c1 98       	cbi	0x18, 1	; 24

SPI_transmit(cmd | 0x40); //send command, first two bits always '01'
    3d9c:	8d 2d       	mov	r24, r13
    3d9e:	80 64       	ori	r24, 0x40	; 64
    3da0:	0e 94 94 20 	call	0x4128	; 0x4128 <SPI_transmit>
SPI_transmit(arg>>24);
    3da4:	81 2f       	mov	r24, r17
    3da6:	99 27       	eor	r25, r25
    3da8:	aa 27       	eor	r26, r26
    3daa:	bb 27       	eor	r27, r27
    3dac:	0e 94 94 20 	call	0x4128	; 0x4128 <SPI_transmit>
SPI_transmit(arg>>16);
    3db0:	c8 01       	movw	r24, r16
    3db2:	aa 27       	eor	r26, r26
    3db4:	bb 27       	eor	r27, r27
    3db6:	0e 94 94 20 	call	0x4128	; 0x4128 <SPI_transmit>
SPI_transmit(arg>>8);
    3dba:	bb 27       	eor	r27, r27
    3dbc:	a1 2f       	mov	r26, r17
    3dbe:	90 2f       	mov	r25, r16
    3dc0:	8f 2d       	mov	r24, r15
    3dc2:	0e 94 94 20 	call	0x4128	; 0x4128 <SPI_transmit>
SPI_transmit(arg);
    3dc6:	8e 2d       	mov	r24, r14
    3dc8:	0e 94 94 20 	call	0x4128	; 0x4128 <SPI_transmit>

if(cmd == SEND_IF_COND)	 //it is compulsory to send correct CRC for CMD8 (CRC=0x87) & CMD0 (CRC=0x95)
    3dcc:	88 e0       	ldi	r24, 0x08	; 8
    3dce:	d8 16       	cp	r13, r24
    3dd0:	11 f4       	brne	.+4      	; 0x3dd6 <SD_sendCommand+0x82>
  SPI_transmit(0x87);    //for remaining commands, CRC is ignored in SPI mode
    3dd2:	87 e8       	ldi	r24, 0x87	; 135
    3dd4:	01 c0       	rjmp	.+2      	; 0x3dd8 <SD_sendCommand+0x84>
else 
  SPI_transmit(0x95); 
    3dd6:	85 e9       	ldi	r24, 0x95	; 149
    3dd8:	0e 94 94 20 	call	0x4128	; 0x4128 <SPI_transmit>

while((response = SPI_receive()) == 0xff) //wait response
   if(retry++ > 0xfe) break; //time out error
    3ddc:	10 e0       	ldi	r17, 0x00	; 0
    3dde:	02 c0       	rjmp	.+4      	; 0x3de4 <SD_sendCommand+0x90>
SPI_transmit(arg);

if(cmd == SEND_IF_COND)	 //it is compulsory to send correct CRC for CMD8 (CRC=0x87) & CMD0 (CRC=0x95)
  SPI_transmit(0x87);    //for remaining commands, CRC is ignored in SPI mode
else 
  SPI_transmit(0x95); 
    3de0:	11 50       	subi	r17, 0x01	; 1

while((response = SPI_receive()) == 0xff) //wait response
   if(retry++ > 0xfe) break; //time out error
    3de2:	d1 f0       	breq	.+52     	; 0x3e18 <SD_sendCommand+0xc4>
if(cmd == SEND_IF_COND)	 //it is compulsory to send correct CRC for CMD8 (CRC=0x87) & CMD0 (CRC=0x95)
  SPI_transmit(0x87);    //for remaining commands, CRC is ignored in SPI mode
else 
  SPI_transmit(0x95); 

while((response = SPI_receive()) == 0xff) //wait response
    3de4:	0e 94 99 20 	call	0x4132	; 0x4132 <SPI_receive>
    3de8:	08 2f       	mov	r16, r24
    3dea:	8f 3f       	cpi	r24, 0xFF	; 255
    3dec:	c9 f3       	breq	.-14     	; 0x3de0 <SD_sendCommand+0x8c>
   if(retry++ > 0xfe) break; //time out error

if(response == 0x00 && cmd == 58)  //checking response of CMD58
    3dee:	88 23       	and	r24, r24
    3df0:	99 f4       	brne	.+38     	; 0x3e18 <SD_sendCommand+0xc4>
    3df2:	8a e3       	ldi	r24, 0x3A	; 58
    3df4:	d8 16       	cp	r13, r24
    3df6:	81 f4       	brne	.+32     	; 0x3e18 <SD_sendCommand+0xc4>
{
  status = SPI_receive() & 0x40;     //first byte of the OCR register (bit 31:24)
    3df8:	0e 94 99 20 	call	0x4132	; 0x4132 <SPI_receive>
  if(status == 0x40) SDHC_flag = 1;  //we need it to verify SDHC card
    3dfc:	86 ff       	sbrs	r24, 6
    3dfe:	04 c0       	rjmp	.+8      	; 0x3e08 <SD_sendCommand+0xb4>
    3e00:	81 e0       	ldi	r24, 0x01	; 1
    3e02:	80 93 dc 02 	sts	0x02DC, r24
    3e06:	02 c0       	rjmp	.+4      	; 0x3e0c <SD_sendCommand+0xb8>
  else SDHC_flag = 0;
    3e08:	10 92 dc 02 	sts	0x02DC, r1

  SPI_receive(); //remaining 3 bytes of the OCR register are ignored here
    3e0c:	0e 94 99 20 	call	0x4132	; 0x4132 <SPI_receive>
  SPI_receive(); //one can use these bytes to check power supply limits of SD
    3e10:	0e 94 99 20 	call	0x4132	; 0x4132 <SPI_receive>
  SPI_receive(); 
    3e14:	0e 94 99 20 	call	0x4132	; 0x4132 <SPI_receive>
}

SPI_receive(); //extra 8 CLK
    3e18:	0e 94 99 20 	call	0x4132	; 0x4132 <SPI_receive>
SD_CS_DEASSERT;
    3e1c:	c1 9a       	sbi	0x18, 1	; 24

return response; //return state
}
    3e1e:	80 2f       	mov	r24, r16
    3e20:	1f 91       	pop	r17
    3e22:	0f 91       	pop	r16
    3e24:	ff 90       	pop	r15
    3e26:	ef 90       	pop	r14
    3e28:	df 90       	pop	r13
    3e2a:	08 95       	ret

00003e2c <SD_erase>:
//Arguments	: none
//return	: unsigned char; will be 0 if no error,
// 			  otherwise the response byte will be sent
//*****************************************************************
unsigned char SD_erase (unsigned long startBlock, unsigned long totalBlocks)
{
    3e2c:	af 92       	push	r10
    3e2e:	bf 92       	push	r11
    3e30:	cf 92       	push	r12
    3e32:	df 92       	push	r13
    3e34:	ef 92       	push	r14
    3e36:	ff 92       	push	r15
    3e38:	0f 93       	push	r16
    3e3a:	1f 93       	push	r17
    3e3c:	7b 01       	movw	r14, r22
    3e3e:	8c 01       	movw	r16, r24
    3e40:	59 01       	movw	r10, r18
    3e42:	6a 01       	movw	r12, r20
unsigned char response;

response = SD_sendCommand(ERASE_BLOCK_START_ADDR, startBlock); //send starting block address
    3e44:	80 e2       	ldi	r24, 0x20	; 32
    3e46:	b8 01       	movw	r22, r16
    3e48:	a7 01       	movw	r20, r14
    3e4a:	0e 94 aa 1e 	call	0x3d54	; 0x3d54 <SD_sendCommand>
if(response != 0x00) //check for SD status: 0x00 - OK (No flags set)
    3e4e:	88 23       	and	r24, r24
    3e50:	b9 f4       	brne	.+46     	; 0x3e80 <SD_erase+0x54>
  return response;

response = SD_sendCommand(ERASE_BLOCK_END_ADDR,(startBlock + totalBlocks - 1)); //send end block address
    3e52:	08 94       	sec
    3e54:	e1 08       	sbc	r14, r1
    3e56:	f1 08       	sbc	r15, r1
    3e58:	01 09       	sbc	r16, r1
    3e5a:	11 09       	sbc	r17, r1
    3e5c:	ea 0c       	add	r14, r10
    3e5e:	fb 1c       	adc	r15, r11
    3e60:	0c 1d       	adc	r16, r12
    3e62:	1d 1d       	adc	r17, r13
    3e64:	81 e2       	ldi	r24, 0x21	; 33
    3e66:	b8 01       	movw	r22, r16
    3e68:	a7 01       	movw	r20, r14
    3e6a:	0e 94 aa 1e 	call	0x3d54	; 0x3d54 <SD_sendCommand>
if(response != 0x00)
    3e6e:	88 23       	and	r24, r24
    3e70:	39 f4       	brne	.+14     	; 0x3e80 <SD_erase+0x54>
  return response;

response = SD_sendCommand(ERASE_SELECTED_BLOCKS, 0); //erase all selected blocks
    3e72:	86 e2       	ldi	r24, 0x26	; 38
    3e74:	40 e0       	ldi	r20, 0x00	; 0
    3e76:	50 e0       	ldi	r21, 0x00	; 0
    3e78:	60 e0       	ldi	r22, 0x00	; 0
    3e7a:	70 e0       	ldi	r23, 0x00	; 0
    3e7c:	0e 94 aa 1e 	call	0x3d54	; 0x3d54 <SD_sendCommand>
if(response != 0x00)
  return response;

return 0; //normal return
}
    3e80:	1f 91       	pop	r17
    3e82:	0f 91       	pop	r16
    3e84:	ff 90       	pop	r15
    3e86:	ef 90       	pop	r14
    3e88:	df 90       	pop	r13
    3e8a:	cf 90       	pop	r12
    3e8c:	bf 90       	pop	r11
    3e8e:	af 90       	pop	r10
    3e90:	08 95       	ret

00003e92 <SD_writeSingleBlock>:
//Arguments	: none
//return	: unsigned char; will be 0 if no error,
// 			  otherwise the response byte will be sent
//******************************************************************
unsigned char SD_writeSingleBlock(unsigned long startBlock)
{
    3e92:	cf 93       	push	r28
    3e94:	df 93       	push	r29
    3e96:	ab 01       	movw	r20, r22
    3e98:	bc 01       	movw	r22, r24
unsigned char response;
unsigned int i, retry=0;

 response = SD_sendCommand(WRITE_SINGLE_BLOCK, startBlock); //write a Block command
    3e9a:	88 e1       	ldi	r24, 0x18	; 24
    3e9c:	0e 94 aa 1e 	call	0x3d54	; 0x3d54 <SD_sendCommand>
  
 if(response != 0x00) return response; //check for SD status: 0x00 - OK (No flags set)
    3ea0:	88 23       	and	r24, r24
    3ea2:	11 f0       	breq	.+4      	; 0x3ea8 <SD_writeSingleBlock+0x16>
    3ea4:	98 2f       	mov	r25, r24
    3ea6:	3f c0       	rjmp	.+126    	; 0x3f26 <SD_writeSingleBlock+0x94>

SD_CS_ASSERT;
    3ea8:	c1 98       	cbi	0x18, 1	; 24

SPI_transmit(0xfe);     //Send start block token 0xfe (0x11111110)
    3eaa:	8e ef       	ldi	r24, 0xFE	; 254
    3eac:	0e 94 94 20 	call	0x4128	; 0x4128 <SPI_transmit>
    3eb0:	c0 e0       	ldi	r28, 0x00	; 0
    3eb2:	d0 e0       	ldi	r29, 0x00	; 0

for(i=0; i<512; i++)    //send 512 bytes data
  SPI_transmit(buffer[i]);
    3eb4:	fe 01       	movw	r30, r28
    3eb6:	ea 52       	subi	r30, 0x2A	; 42
    3eb8:	ff 4f       	sbci	r31, 0xFF	; 255
    3eba:	80 81       	ld	r24, Z
    3ebc:	0e 94 94 20 	call	0x4128	; 0x4128 <SPI_transmit>

SD_CS_ASSERT;

SPI_transmit(0xfe);     //Send start block token 0xfe (0x11111110)

for(i=0; i<512; i++)    //send 512 bytes data
    3ec0:	21 96       	adiw	r28, 0x01	; 1
    3ec2:	82 e0       	ldi	r24, 0x02	; 2
    3ec4:	c0 30       	cpi	r28, 0x00	; 0
    3ec6:	d8 07       	cpc	r29, r24
    3ec8:	a9 f7       	brne	.-22     	; 0x3eb4 <SD_writeSingleBlock+0x22>
  SPI_transmit(buffer[i]);

SPI_transmit(0xff);     //transmit dummy CRC (16-bit), CRC is ignored here
    3eca:	8f ef       	ldi	r24, 0xFF	; 255
    3ecc:	0e 94 94 20 	call	0x4128	; 0x4128 <SPI_transmit>
SPI_transmit(0xff);
    3ed0:	8f ef       	ldi	r24, 0xFF	; 255
    3ed2:	0e 94 94 20 	call	0x4128	; 0x4128 <SPI_transmit>

response = SPI_receive();
    3ed6:	0e 94 99 20 	call	0x4132	; 0x4132 <SPI_receive>
    3eda:	98 2f       	mov	r25, r24

if( (response & 0x1f) != 0x05) //response= 0xXXX0AAA1 ; AAA='010' - data accepted
    3edc:	8f 71       	andi	r24, 0x1F	; 31
    3ede:	85 30       	cpi	r24, 0x05	; 5
    3ee0:	41 f0       	breq	.+16     	; 0x3ef2 <SD_writeSingleBlock+0x60>
{                              //AAA='101'-data rejected due to CRC error
  SD_CS_DEASSERT;              //AAA='110'-data rejected due to write error
    3ee2:	c1 9a       	sbi	0x18, 1	; 24
    3ee4:	20 c0       	rjmp	.+64     	; 0x3f26 <SD_writeSingleBlock+0x94>
  return response;
}

while(!SPI_receive()) //wait for SD card to complete writing and get idle
if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;}
    3ee6:	8f ef       	ldi	r24, 0xFF	; 255
    3ee8:	cf 3f       	cpi	r28, 0xFF	; 255
    3eea:	d8 07       	cpc	r29, r24
    3eec:	91 f0       	breq	.+36     	; 0x3f12 <SD_writeSingleBlock+0x80>
    3eee:	21 96       	adiw	r28, 0x01	; 1
    3ef0:	02 c0       	rjmp	.+4      	; 0x3ef6 <SD_writeSingleBlock+0x64>
    3ef2:	c0 e0       	ldi	r28, 0x00	; 0
    3ef4:	d0 e0       	ldi	r29, 0x00	; 0
{                              //AAA='101'-data rejected due to CRC error
  SD_CS_DEASSERT;              //AAA='110'-data rejected due to write error
  return response;
}

while(!SPI_receive()) //wait for SD card to complete writing and get idle
    3ef6:	0e 94 99 20 	call	0x4132	; 0x4132 <SPI_receive>
    3efa:	88 23       	and	r24, r24
    3efc:	a1 f3       	breq	.-24     	; 0x3ee6 <SD_writeSingleBlock+0x54>
if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;}

SD_CS_DEASSERT;
    3efe:	c1 9a       	sbi	0x18, 1	; 24
SPI_transmit(0xff);   //just spend 8 clock cycle delay before reasserting the CS line
    3f00:	8f ef       	ldi	r24, 0xFF	; 255
    3f02:	0e 94 94 20 	call	0x4128	; 0x4128 <SPI_transmit>
SD_CS_ASSERT;         //re-asserting the CS line to verify if card is still busy
    3f06:	c1 98       	cbi	0x18, 1	; 24
    3f08:	08 c0       	rjmp	.+16     	; 0x3f1a <SD_writeSingleBlock+0x88>

while(!SPI_receive()) //wait for SD card to complete writing and get idle
   if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;}
    3f0a:	8f ef       	ldi	r24, 0xFF	; 255
    3f0c:	cf 3f       	cpi	r28, 0xFF	; 255
    3f0e:	d8 07       	cpc	r29, r24
    3f10:	19 f4       	brne	.+6      	; 0x3f18 <SD_writeSingleBlock+0x86>
    3f12:	c1 9a       	sbi	0x18, 1	; 24
    3f14:	91 e0       	ldi	r25, 0x01	; 1
    3f16:	07 c0       	rjmp	.+14     	; 0x3f26 <SD_writeSingleBlock+0x94>
    3f18:	21 96       	adiw	r28, 0x01	; 1

SD_CS_DEASSERT;
SPI_transmit(0xff);   //just spend 8 clock cycle delay before reasserting the CS line
SD_CS_ASSERT;         //re-asserting the CS line to verify if card is still busy

while(!SPI_receive()) //wait for SD card to complete writing and get idle
    3f1a:	0e 94 99 20 	call	0x4132	; 0x4132 <SPI_receive>
    3f1e:	88 23       	and	r24, r24
    3f20:	a1 f3       	breq	.-24     	; 0x3f0a <SD_writeSingleBlock+0x78>
   if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;}
SD_CS_DEASSERT;
    3f22:	c1 9a       	sbi	0x18, 1	; 24
    3f24:	90 e0       	ldi	r25, 0x00	; 0

return 0;
}
    3f26:	89 2f       	mov	r24, r25
    3f28:	df 91       	pop	r29
    3f2a:	cf 91       	pop	r28
    3f2c:	08 95       	ret

00003f2e <SD_readSingleBlock>:
//Arguments	: none
//return	: unsigned char; will be 0 if no error,
// 			  otherwise the response byte will be sent
//******************************************************************
unsigned char SD_readSingleBlock(unsigned long startBlock)
{
    3f2e:	1f 93       	push	r17
    3f30:	cf 93       	push	r28
    3f32:	df 93       	push	r29
    3f34:	ab 01       	movw	r20, r22
    3f36:	bc 01       	movw	r22, r24
unsigned char response;
unsigned int i, retry=0;

 response = SD_sendCommand(READ_SINGLE_BLOCK, startBlock); //read a Block command
    3f38:	81 e1       	ldi	r24, 0x11	; 17
    3f3a:	0e 94 aa 1e 	call	0x3d54	; 0x3d54 <SD_sendCommand>
    3f3e:	18 2f       	mov	r17, r24
 
 if(response != 0x00) return response; //check for SD status: 0x00 - OK (No flags set)
    3f40:	88 23       	and	r24, r24
    3f42:	09 f5       	brne	.+66     	; 0x3f86 <SD_readSingleBlock+0x58>

SD_CS_ASSERT;
    3f44:	c1 98       	cbi	0x18, 1	; 24
    3f46:	c0 e0       	ldi	r28, 0x00	; 0
    3f48:	d0 e0       	ldi	r29, 0x00	; 0
    3f4a:	05 c0       	rjmp	.+10     	; 0x3f56 <SD_readSingleBlock+0x28>

retry = 0;
while(SPI_receive() != 0xfe) //wait for start block token 0xfe (0x11111110)
    3f4c:	21 97       	sbiw	r28, 0x01	; 1
  if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;} //return if time-out
    3f4e:	19 f4       	brne	.+6      	; 0x3f56 <SD_readSingleBlock+0x28>
    3f50:	c1 9a       	sbi	0x18, 1	; 24
    3f52:	11 e0       	ldi	r17, 0x01	; 1
    3f54:	18 c0       	rjmp	.+48     	; 0x3f86 <SD_readSingleBlock+0x58>
 if(response != 0x00) return response; //check for SD status: 0x00 - OK (No flags set)

SD_CS_ASSERT;

retry = 0;
while(SPI_receive() != 0xfe) //wait for start block token 0xfe (0x11111110)
    3f56:	0e 94 99 20 	call	0x4132	; 0x4132 <SPI_receive>
    3f5a:	8e 3f       	cpi	r24, 0xFE	; 254
    3f5c:	b9 f7       	brne	.-18     	; 0x3f4c <SD_readSingleBlock+0x1e>
    3f5e:	c0 e0       	ldi	r28, 0x00	; 0
    3f60:	d0 e0       	ldi	r29, 0x00	; 0
  if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;} //return if time-out

for(i=0; i<512; i++) //read 512 bytes
  buffer[i] = SPI_receive();
    3f62:	0e 94 99 20 	call	0x4132	; 0x4132 <SPI_receive>
    3f66:	fe 01       	movw	r30, r28
    3f68:	ea 52       	subi	r30, 0x2A	; 42
    3f6a:	ff 4f       	sbci	r31, 0xFF	; 255
    3f6c:	80 83       	st	Z, r24

retry = 0;
while(SPI_receive() != 0xfe) //wait for start block token 0xfe (0x11111110)
  if(retry++ > 0xfffe){SD_CS_DEASSERT; return 1;} //return if time-out

for(i=0; i<512; i++) //read 512 bytes
    3f6e:	21 96       	adiw	r28, 0x01	; 1
    3f70:	82 e0       	ldi	r24, 0x02	; 2
    3f72:	c0 30       	cpi	r28, 0x00	; 0
    3f74:	d8 07       	cpc	r29, r24
    3f76:	a9 f7       	brne	.-22     	; 0x3f62 <SD_readSingleBlock+0x34>
  buffer[i] = SPI_receive();

SPI_receive(); //receive incoming CRC (16-bit), CRC is ignored here
    3f78:	0e 94 99 20 	call	0x4132	; 0x4132 <SPI_receive>
SPI_receive();
    3f7c:	0e 94 99 20 	call	0x4132	; 0x4132 <SPI_receive>

SPI_receive(); //extra 8 clock pulses
    3f80:	0e 94 99 20 	call	0x4132	; 0x4132 <SPI_receive>
SD_CS_DEASSERT;
    3f84:	c1 9a       	sbi	0x18, 1	; 24

return 0;
}
    3f86:	81 2f       	mov	r24, r17
    3f88:	df 91       	pop	r29
    3f8a:	cf 91       	pop	r28
    3f8c:	1f 91       	pop	r17
    3f8e:	08 95       	ret

00003f90 <SD_init>:
//Arguments	: none
//return	: unsigned char; will be 0 if no error,
// 			  otherwise the response byte will be sent
//******************************************************************
unsigned char SD_init(void)
{
    3f90:	1f 93       	push	r17
    3f92:	cf 93       	push	r28
    3f94:	df 93       	push	r29
unsigned char i, response, SD_version;
unsigned int retry=0 ;

TX_NEWLINE;
    3f96:	8d e0       	ldi	r24, 0x0D	; 13
    3f98:	0e 94 a4 20 	call	0x4148	; 0x4148 <transmitByte>
    3f9c:	8a e0       	ldi	r24, 0x0A	; 10
    3f9e:	0e 94 a4 20 	call	0x4148	; 0x4148 <transmitByte>
printf("Initializing SDC");
    3fa2:	00 d0       	rcall	.+0      	; 0x3fa4 <SD_init+0x14>
    3fa4:	88 e7       	ldi	r24, 0x78	; 120
    3fa6:	90 e0       	ldi	r25, 0x00	; 0
    3fa8:	ad b7       	in	r26, 0x3d	; 61
    3faa:	be b7       	in	r27, 0x3e	; 62
    3fac:	12 96       	adiw	r26, 0x02	; 2
    3fae:	9c 93       	st	X, r25
    3fb0:	8e 93       	st	-X, r24
    3fb2:	11 97       	sbiw	r26, 0x01	; 1
    3fb4:	0e 94 b5 21 	call	0x436a	; 0x436a <printf>
    3fb8:	10 e0       	ldi	r17, 0x00	; 0
    3fba:	0f 90       	pop	r0
    3fbc:	0f 90       	pop	r0

 for(i=0;i<10;i++)
      SPI_transmit(0xff);   //80 clock pulses spent before sending the first command
    3fbe:	8f ef       	ldi	r24, 0xFF	; 255
    3fc0:	0e 94 94 20 	call	0x4128	; 0x4128 <SPI_transmit>
unsigned int retry=0 ;

TX_NEWLINE;
printf("Initializing SDC");

 for(i=0;i<10;i++)
    3fc4:	1f 5f       	subi	r17, 0xFF	; 255
    3fc6:	1a 30       	cpi	r17, 0x0A	; 10
    3fc8:	d1 f7       	brne	.-12     	; 0x3fbe <SD_init+0x2e>
      SPI_transmit(0xff);   //80 clock pulses spent before sending the first command

SD_CS_ASSERT;
    3fca:	c1 98       	cbi	0x18, 1	; 24
    3fcc:	c0 e0       	ldi	r28, 0x00	; 0
    3fce:	d0 e0       	ldi	r29, 0x00	; 0
do
{
  
   response = SD_sendCommand(GO_IDLE_STATE, 0); //send 'reset & go idle' command
    3fd0:	80 e0       	ldi	r24, 0x00	; 0
    3fd2:	40 e0       	ldi	r20, 0x00	; 0
    3fd4:	50 e0       	ldi	r21, 0x00	; 0
    3fd6:	60 e0       	ldi	r22, 0x00	; 0
    3fd8:	70 e0       	ldi	r23, 0x00	; 0
    3fda:	0e 94 aa 1e 	call	0x3d54	; 0x3d54 <SD_sendCommand>
   retry++;
    3fde:	21 96       	adiw	r28, 0x01	; 1
   if(retry>0x20) 
    3fe0:	c1 32       	cpi	r28, 0x21	; 33
    3fe2:	d1 05       	cpc	r29, r1
    3fe4:	11 f4       	brne	.+4      	; 0x3fea <SD_init+0x5a>
    3fe6:	81 e0       	ldi	r24, 0x01	; 1
    3fe8:	97 c0       	rjmp	.+302    	; 0x4118 <SD_init+0x188>
   	  return 1;   //time out, card not detected
   
} while(response != 0x01);
    3fea:	81 30       	cpi	r24, 0x01	; 1
    3fec:	89 f7       	brne	.-30     	; 0x3fd0 <SD_init+0x40>


TX_NEWLINE;
    3fee:	8d e0       	ldi	r24, 0x0D	; 13
    3ff0:	0e 94 a4 20 	call	0x4148	; 0x4148 <transmitByte>
    3ff4:	8a e0       	ldi	r24, 0x0A	; 10
    3ff6:	0e 94 a4 20 	call	0x4148	; 0x4148 <transmitByte>
printf("Initialized SDC");
    3ffa:	00 d0       	rcall	.+0      	; 0x3ffc <SD_init+0x6c>
    3ffc:	89 e8       	ldi	r24, 0x89	; 137
    3ffe:	90 e0       	ldi	r25, 0x00	; 0
    4000:	ed b7       	in	r30, 0x3d	; 61
    4002:	fe b7       	in	r31, 0x3e	; 62
    4004:	92 83       	std	Z+2, r25	; 0x02
    4006:	81 83       	std	Z+1, r24	; 0x01
    4008:	0e 94 b5 21 	call	0x436a	; 0x436a <printf>

SD_CS_DEASSERT;
    400c:	c1 9a       	sbi	0x18, 1	; 24
SPI_transmit (0xff);
    400e:	0f 90       	pop	r0
    4010:	0f 90       	pop	r0
    4012:	8f ef       	ldi	r24, 0xFF	; 255
    4014:	0e 94 94 20 	call	0x4128	; 0x4128 <SPI_transmit>
SPI_transmit (0xff);
    4018:	8f ef       	ldi	r24, 0xFF	; 255
    401a:	0e 94 94 20 	call	0x4128	; 0x4128 <SPI_transmit>
    401e:	c0 e0       	ldi	r28, 0x00	; 0
    4020:	d0 e0       	ldi	r29, 0x00	; 0

SD_version = 2; //default set to SD compliance with ver2.x; 
				//this may change after checking the next command
do
{
response = SD_sendCommand(SEND_IF_COND,0x000001AA); //Check power supply status, mendatory for SDHC card
    4022:	88 e0       	ldi	r24, 0x08	; 8
    4024:	4a ea       	ldi	r20, 0xAA	; 170
    4026:	51 e0       	ldi	r21, 0x01	; 1
    4028:	60 e0       	ldi	r22, 0x00	; 0
    402a:	70 e0       	ldi	r23, 0x00	; 0
    402c:	0e 94 aa 1e 	call	0x3d54	; 0x3d54 <SD_sendCommand>
retry++;
    4030:	21 96       	adiw	r28, 0x01	; 1
if(retry>0xfe) 
    4032:	cf 3f       	cpi	r28, 0xFF	; 255
    4034:	d1 05       	cpc	r29, r1
    4036:	59 f4       	brne	.+22     	; 0x404e <SD_init+0xbe>
   {
	  TX_NEWLINE;
    4038:	8d e0       	ldi	r24, 0x0D	; 13
    403a:	0e 94 a4 20 	call	0x4148	; 0x4148 <transmitByte>
    403e:	8a e0       	ldi	r24, 0x0A	; 10
    4040:	0e 94 a4 20 	call	0x4148	; 0x4148 <transmitByte>
	  SD_version = 1;
	  cardType = 1;
    4044:	81 e0       	ldi	r24, 0x01	; 1
    4046:	80 93 e7 02 	sts	0x02E7, r24
    404a:	11 e0       	ldi	r17, 0x01	; 1
    404c:	03 c0       	rjmp	.+6      	; 0x4054 <SD_init+0xc4>
	  break;
   } //time out

}while(response != 0x01);
    404e:	81 30       	cpi	r24, 0x01	; 1
    4050:	41 f7       	brne	.-48     	; 0x4022 <SD_init+0x92>
    4052:	12 e0       	ldi	r17, 0x02	; 2
    4054:	c0 e0       	ldi	r28, 0x00	; 0
    4056:	d0 e0       	ldi	r29, 0x00	; 0

retry = 0;

do
{
response = SD_sendCommand(APP_CMD,0); //CMD55, must be sent before sending any ACMD command
    4058:	87 e3       	ldi	r24, 0x37	; 55
    405a:	40 e0       	ldi	r20, 0x00	; 0
    405c:	50 e0       	ldi	r21, 0x00	; 0
    405e:	60 e0       	ldi	r22, 0x00	; 0
    4060:	70 e0       	ldi	r23, 0x00	; 0
    4062:	0e 94 aa 1e 	call	0x3d54	; 0x3d54 <SD_sendCommand>
response = SD_sendCommand(SD_SEND_OP_COND,0x40000000); //ACMD41
    4066:	89 e2       	ldi	r24, 0x29	; 41
    4068:	40 e0       	ldi	r20, 0x00	; 0
    406a:	50 e0       	ldi	r21, 0x00	; 0
    406c:	60 e0       	ldi	r22, 0x00	; 0
    406e:	70 e4       	ldi	r23, 0x40	; 64
    4070:	0e 94 aa 1e 	call	0x3d54	; 0x3d54 <SD_sendCommand>

retry++;
    4074:	21 96       	adiw	r28, 0x01	; 1
if(retry>0xfe) 
    4076:	cf 3f       	cpi	r28, 0xFF	; 255
    4078:	d1 05       	cpc	r29, r1
    407a:	41 f4       	brne	.+16     	; 0x408c <SD_init+0xfc>
   {
      TX_NEWLINE;
    407c:	8d e0       	ldi	r24, 0x0D	; 13
    407e:	0e 94 a4 20 	call	0x4148	; 0x4148 <transmitByte>
    4082:	8a e0       	ldi	r24, 0x0A	; 10
    4084:	0e 94 a4 20 	call	0x4148	; 0x4148 <transmitByte>
    4088:	82 e0       	ldi	r24, 0x02	; 2
    408a:	46 c0       	rjmp	.+140    	; 0x4118 <SD_init+0x188>
	  return 2;  //time out, card initialization failed
   } 

}while(response != 0x00);
    408c:	88 23       	and	r24, r24
    408e:	21 f7       	brne	.-56     	; 0x4058 <SD_init+0xc8>


retry = 0;
SDHC_flag = 0;
    4090:	10 92 dc 02 	sts	0x02DC, r1

if (SD_version == 2)
    4094:	12 30       	cpi	r17, 0x02	; 2
    4096:	09 f0       	breq	.+2      	; 0x409a <SD_init+0x10a>
    4098:	3f c0       	rjmp	.+126    	; 0x4118 <SD_init+0x188>
    409a:	c0 e0       	ldi	r28, 0x00	; 0
    409c:	d0 e0       	ldi	r29, 0x00	; 0
{ 
   do
   {
	 response = SD_sendCommand(READ_OCR,0);
    409e:	8a e3       	ldi	r24, 0x3A	; 58
    40a0:	40 e0       	ldi	r20, 0x00	; 0
    40a2:	50 e0       	ldi	r21, 0x00	; 0
    40a4:	60 e0       	ldi	r22, 0x00	; 0
    40a6:	70 e0       	ldi	r23, 0x00	; 0
    40a8:	0e 94 aa 1e 	call	0x3d54	; 0x3d54 <SD_sendCommand>
	 retry++;
    40ac:	21 96       	adiw	r28, 0x01	; 1
	 if(retry>0xfe) 
    40ae:	cf 3f       	cpi	r28, 0xFF	; 255
    40b0:	d1 05       	cpc	r29, r1
    40b2:	49 f4       	brne	.+18     	; 0x40c6 <SD_init+0x136>
     {
       TX_NEWLINE;
    40b4:	8d e0       	ldi	r24, 0x0D	; 13
    40b6:	0e 94 a4 20 	call	0x4148	; 0x4148 <transmitByte>
    40ba:	8a e0       	ldi	r24, 0x0A	; 10
    40bc:	0e 94 a4 20 	call	0x4148	; 0x4148 <transmitByte>
	   cardType = 0;
    40c0:	10 92 e7 02 	sts	0x02E7, r1
    40c4:	02 c0       	rjmp	.+4      	; 0x40ca <SD_init+0x13a>
	   break;
     } //time out

   }while(response != 0x00);
    40c6:	88 23       	and	r24, r24
    40c8:	51 f7       	brne	.-44     	; 0x409e <SD_init+0x10e>

   if(SDHC_flag == 1) cardType = 2;
    40ca:	80 91 dc 02 	lds	r24, 0x02DC
    40ce:	81 30       	cpi	r24, 0x01	; 1
    40d0:	11 f4       	brne	.+4      	; 0x40d6 <SD_init+0x146>
    40d2:	82 e0       	ldi	r24, 0x02	; 2
    40d4:	01 c0       	rjmp	.+2      	; 0x40d8 <SD_init+0x148>
   else cardType = 3;
    40d6:	83 e0       	ldi	r24, 0x03	; 3
    40d8:	80 93 e7 02 	sts	0x02E7, r24

   
	TX_NEWLINE;
    40dc:	8d e0       	ldi	r24, 0x0D	; 13
    40de:	0e 94 a4 20 	call	0x4148	; 0x4148 <transmitByte>
    40e2:	8a e0       	ldi	r24, 0x0A	; 10
    40e4:	0e 94 a4 20 	call	0x4148	; 0x4148 <transmitByte>
	printf("card Type = %c", cardType);
    40e8:	20 91 e7 02 	lds	r18, 0x02E7
    40ec:	00 d0       	rcall	.+0      	; 0x40ee <SD_init+0x15e>
    40ee:	00 d0       	rcall	.+0      	; 0x40f0 <SD_init+0x160>
    40f0:	ed b7       	in	r30, 0x3d	; 61
    40f2:	fe b7       	in	r31, 0x3e	; 62
    40f4:	31 96       	adiw	r30, 0x01	; 1
    40f6:	89 e9       	ldi	r24, 0x99	; 153
    40f8:	90 e0       	ldi	r25, 0x00	; 0
    40fa:	ad b7       	in	r26, 0x3d	; 61
    40fc:	be b7       	in	r27, 0x3e	; 62
    40fe:	12 96       	adiw	r26, 0x02	; 2
    4100:	9c 93       	st	X, r25
    4102:	8e 93       	st	-X, r24
    4104:	11 97       	sbiw	r26, 0x01	; 1
    4106:	22 83       	std	Z+2, r18	; 0x02
    4108:	13 82       	std	Z+3, r1	; 0x03
    410a:	0e 94 b5 21 	call	0x436a	; 0x436a <printf>
    410e:	80 e0       	ldi	r24, 0x00	; 0
    4110:	0f 90       	pop	r0
    4112:	0f 90       	pop	r0
    4114:	0f 90       	pop	r0
    4116:	0f 90       	pop	r0
//SD_sendCommand(CRC_ON_OFF, OFF); //disable CRC; deafault - CRC disabled in SPI mode
//SD_sendCommand(SET_BLOCK_LEN, 512); //set block size to 512; default size is 512


return 0; //successful return
}
    4118:	df 91       	pop	r29
    411a:	cf 91       	pop	r28
    411c:	1f 91       	pop	r17
    411e:	08 95       	ret

00004120 <spi_init>:

//SPI initialize for SD card
//clock rate: 125Khz
void spi_init(void)
{
SPCR = 0x52; //setup SPI: Master mode, MSB first, SCK phase low, SCK idle low
    4120:	82 e5       	ldi	r24, 0x52	; 82
    4122:	8d b9       	out	0x0d, r24	; 13
SPSR = 0x00;
    4124:	1e b8       	out	0x0e, r1	; 14
}
    4126:	08 95       	ret

00004128 <SPI_transmit>:

unsigned char SPI_transmit(unsigned char data)
{
// Start transmission
SPDR = data;
    4128:	8f b9       	out	0x0f, r24	; 15

// Wait for transmission complete
while(!(SPSR & (1<<SPIF)));
    412a:	77 9b       	sbis	0x0e, 7	; 14
    412c:	fe cf       	rjmp	.-4      	; 0x412a <SPI_transmit+0x2>
data = SPDR;
    412e:	8f b1       	in	r24, 0x0f	; 15

return(data);
}
    4130:	08 95       	ret

00004132 <SPI_receive>:
unsigned char SPI_receive(void)
{
unsigned char data;
// Wait for reception complete

SPDR = 0xff;
    4132:	8f ef       	ldi	r24, 0xFF	; 255
    4134:	8f b9       	out	0x0f, r24	; 15
while(!(SPSR & (1<<SPIF)));
    4136:	77 9b       	sbis	0x0e, 7	; 14
    4138:	fe cf       	rjmp	.-4      	; 0x4136 <SPI_receive+0x4>
data = SPDR;
    413a:	8f b1       	in	r24, 0x0f	; 15

// Return data register
return data;
}
    413c:	08 95       	ret

0000413e <receiveByte>:
//*************************************************
unsigned char receiveByte( void )
{
	unsigned char data, status;
	
	while(!(UCSRA & (1<<RXC))); 	// Wait for incomming data
    413e:	5f 9b       	sbis	0x0b, 7	; 11
    4140:	fe cf       	rjmp	.-4      	; 0x413e <receiveByte>
	
	status = UCSRA;
    4142:	8b b1       	in	r24, 0x0b	; 11
	data = UDR;
    4144:	8c b1       	in	r24, 0x0c	; 12
	
	return(data);
}
    4146:	08 95       	ret

00004148 <transmitByte>:
//***************************************************
//Function to transmit a single byte
//***************************************************
void transmitByte( unsigned char data )
{
	while ( !(UCSRA & (1<<UDRE)) )
    4148:	5d 9b       	sbis	0x0b, 5	; 11
    414a:	fe cf       	rjmp	.-4      	; 0x4148 <transmitByte>
		; 			                /* Wait for empty transmit buffer */
	UDR = data; 			        /* Start transmition */
    414c:	8c b9       	out	0x0c, r24	; 12
}
    414e:	08 95       	ret

00004150 <transmitString_F>:

//***************************************************
//Function to transmit a string in Flash
//***************************************************
void transmitString_F(char* string)
{
    4150:	fc 01       	movw	r30, r24
    4152:	04 c0       	rjmp	.+8      	; 0x415c <transmitString_F+0xc>
//***************************************************
//Function to transmit a single byte
//***************************************************
void transmitByte( unsigned char data )
{
	while ( !(UCSRA & (1<<UDRE)) )
    4154:	5d 9b       	sbis	0x0b, 5	; 11
    4156:	fe cf       	rjmp	.-4      	; 0x4154 <transmitString_F+0x4>
//Function to transmit a string in Flash
//***************************************************
void transmitString_F(char* string)
{
  while (pgm_read_byte(&(*string)))
   transmitByte(pgm_read_byte(&(*string++)));
    4158:	31 96       	adiw	r30, 0x01	; 1
//***************************************************
void transmitByte( unsigned char data )
{
	while ( !(UCSRA & (1<<UDRE)) )
		; 			                /* Wait for empty transmit buffer */
	UDR = data; 			        /* Start transmition */
    415a:	8c b9       	out	0x0c, r24	; 12
//***************************************************
//Function to transmit a string in Flash
//***************************************************
void transmitString_F(char* string)
{
  while (pgm_read_byte(&(*string)))
    415c:	84 91       	lpm	r24, Z+
    415e:	88 23       	and	r24, r24
    4160:	c9 f7       	brne	.-14     	; 0x4154 <transmitString_F+0x4>
   transmitByte(pgm_read_byte(&(*string++)));
}
    4162:	08 95       	ret

00004164 <transmitString>:

//***************************************************
//Function to transmit a string in RAM
//***************************************************
void transmitString(unsigned char* string)
{
    4164:	fc 01       	movw	r30, r24
    4166:	04 c0       	rjmp	.+8      	; 0x4170 <transmitString+0xc>
//***************************************************
//Function to transmit a single byte
//***************************************************
void transmitByte( unsigned char data )
{
	while ( !(UCSRA & (1<<UDRE)) )
    4168:	5d 9b       	sbis	0x0b, 5	; 11
    416a:	fe cf       	rjmp	.-4      	; 0x4168 <transmitString+0x4>
//Function to transmit a string in RAM
//***************************************************
void transmitString(unsigned char* string)
{
  while (*string)
   transmitByte(*string++);
    416c:	31 96       	adiw	r30, 0x01	; 1
//***************************************************
void transmitByte( unsigned char data )
{
	while ( !(UCSRA & (1<<UDRE)) )
		; 			                /* Wait for empty transmit buffer */
	UDR = data; 			        /* Start transmition */
    416e:	8c b9       	out	0x0c, r24	; 12
//***************************************************
//Function to transmit a string in RAM
//***************************************************
void transmitString(unsigned char* string)
{
  while (*string)
    4170:	80 81       	ld	r24, Z
    4172:	88 23       	and	r24, r24
    4174:	c9 f7       	brne	.-14     	; 0x4168 <transmitString+0x4>
   transmitByte(*string++);
}
    4176:	08 95       	ret

00004178 <transmitHex>:
//Function to transmit hex format data
//first argument indicates type: CHAR, INT or LONG
//Second argument is the data to be displayed
//***************************************************
void transmitHex( unsigned char dataType, unsigned long data )
{
    4178:	df 93       	push	r29
    417a:	cf 93       	push	r28
    417c:	cd b7       	in	r28, 0x3d	; 61
    417e:	de b7       	in	r29, 0x3e	; 62
    4180:	2b 97       	sbiw	r28, 0x0b	; 11
    4182:	0f b6       	in	r0, 0x3f	; 63
    4184:	f8 94       	cli
    4186:	de bf       	out	0x3e, r29	; 62
    4188:	0f be       	out	0x3f, r0	; 63
    418a:	cd bf       	out	0x3d, r28	; 61
unsigned char count, i, temp;
unsigned char dataString[] = "0x        ";

if (dataType == CHAR) count = 2;
if (dataType == INT) count = 4;
    418c:	81 30       	cpi	r24, 0x01	; 1
    418e:	11 f4       	brne	.+4      	; 0x4194 <transmitHex+0x1c>
    4190:	94 e0       	ldi	r25, 0x04	; 4
    4192:	05 c0       	rjmp	.+10     	; 0x419e <transmitHex+0x26>
if (dataType == LONG) count = 8;
    4194:	82 30       	cpi	r24, 0x02	; 2
    4196:	11 f4       	brne	.+4      	; 0x419c <transmitHex+0x24>
    4198:	98 e0       	ldi	r25, 0x08	; 8
    419a:	01 c0       	rjmp	.+2      	; 0x419e <transmitHex+0x26>
    419c:	92 e0       	ldi	r25, 0x02	; 2
//Second argument is the data to be displayed
//***************************************************
void transmitHex( unsigned char dataType, unsigned long data )
{
unsigned char count, i, temp;
unsigned char dataString[] = "0x        ";
    419e:	de 01       	movw	r26, r28
    41a0:	11 96       	adiw	r26, 0x01	; 1
    41a2:	e8 ea       	ldi	r30, 0xA8	; 168
    41a4:	f0 e0       	ldi	r31, 0x00	; 0
    41a6:	8b e0       	ldi	r24, 0x0B	; 11
    41a8:	01 90       	ld	r0, Z+
    41aa:	0d 92       	st	X+, r0
    41ac:	81 50       	subi	r24, 0x01	; 1
    41ae:	e1 f7       	brne	.-8      	; 0x41a8 <transmitHex+0x30>
    41b0:	9e 01       	movw	r18, r28
    41b2:	2e 5f       	subi	r18, 0xFE	; 254
    41b4:	3f 4f       	sbci	r19, 0xFF	; 255
if (dataType == INT) count = 4;
if (dataType == LONG) count = 8;

for(i=count; i>0; i--)
{
  temp = data % 16;
    41b6:	84 2f       	mov	r24, r20
    41b8:	8f 70       	andi	r24, 0x0F	; 15
    41ba:	e9 2f       	mov	r30, r25
    41bc:	f0 e0       	ldi	r31, 0x00	; 0
  if((temp>=0) && (temp<10)) dataString [i+1] = temp + 0x30;
    41be:	8a 30       	cpi	r24, 0x0A	; 10
    41c0:	20 f4       	brcc	.+8      	; 0x41ca <transmitHex+0x52>
    41c2:	e2 0f       	add	r30, r18
    41c4:	f3 1f       	adc	r31, r19
    41c6:	80 5d       	subi	r24, 0xD0	; 208
    41c8:	03 c0       	rjmp	.+6      	; 0x41d0 <transmitHex+0x58>
  else dataString [i+1] = (temp - 10) + 0x41;
    41ca:	e2 0f       	add	r30, r18
    41cc:	f3 1f       	adc	r31, r19
    41ce:	89 5c       	subi	r24, 0xC9	; 201
    41d0:	80 83       	st	Z, r24

if (dataType == CHAR) count = 2;
if (dataType == INT) count = 4;
if (dataType == LONG) count = 8;

for(i=count; i>0; i--)
    41d2:	91 50       	subi	r25, 0x01	; 1
    41d4:	41 f0       	breq	.+16     	; 0x41e6 <transmitHex+0x6e>
{
  temp = data % 16;
  if((temp>=0) && (temp<10)) dataString [i+1] = temp + 0x30;
  else dataString [i+1] = (temp - 10) + 0x41;

  data = data/16;
    41d6:	84 e0       	ldi	r24, 0x04	; 4
    41d8:	76 95       	lsr	r23
    41da:	67 95       	ror	r22
    41dc:	57 95       	ror	r21
    41de:	47 95       	ror	r20
    41e0:	8a 95       	dec	r24
    41e2:	d1 f7       	brne	.-12     	; 0x41d8 <transmitHex+0x60>
    41e4:	e8 cf       	rjmp	.-48     	; 0x41b6 <transmitHex+0x3e>
}

transmitString (dataString);
    41e6:	ce 01       	movw	r24, r28
    41e8:	01 96       	adiw	r24, 0x01	; 1
    41ea:	0e 94 b2 20 	call	0x4164	; 0x4164 <transmitString>
}
    41ee:	2b 96       	adiw	r28, 0x0b	; 11
    41f0:	0f b6       	in	r0, 0x3f	; 63
    41f2:	f8 94       	cli
    41f4:	de bf       	out	0x3e, r29	; 62
    41f6:	0f be       	out	0x3f, r0	; 63
    41f8:	cd bf       	out	0x3d, r28	; 61
    41fa:	cf 91       	pop	r28
    41fc:	df 91       	pop	r29
    41fe:	08 95       	ret

00004200 <xmit_uart>:

// UART transmit
int xmit_uart( char data, FILE *fd )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSRA & (1<<UDRE)) );
    4200:	5d 9b       	sbis	0x0b, 5	; 11
    4202:	fe cf       	rjmp	.-4      	; 0x4200 <xmit_uart>
	
	/* Put data into buffer, sends the data */
	UDR = data;
    4204:	8c b9       	out	0x0c, r24	; 12
	return 0;
};
    4206:	80 e0       	ldi	r24, 0x00	; 0
    4208:	90 e0       	ldi	r25, 0x00	; 0
    420a:	08 95       	ret

0000420c <rcv_uart>:
int rcv_uart( FILE *fp)
{
	/* Wait for data to be received */
	unsigned char data;

	while ( !(UCSRA & (1<<RXC)) );
    420c:	5f 9b       	sbis	0x0b, 7	; 11
    420e:	fe cf       	rjmp	.-4      	; 0x420c <rcv_uart>

	data = UDR;
    4210:	8c b1       	in	r24, 0x0c	; 12

	

	/* Get and return received data from buffer */
	return UDR;
    4212:	8c b1       	in	r24, 0x0c	; 12
};
    4214:	90 e0       	ldi	r25, 0x00	; 0
    4216:	08 95       	ret

00004218 <uart0_init>:
//char size: 8 bit
//parity: Disabled
//**************************************************
void uart0_init(void)
{
 UCSRB = 0x00; //disable while setting baud rate
    4218:	1a b8       	out	0x0a, r1	; 10
 UCSRA = 0x00;
    421a:	1b b8       	out	0x0b, r1	; 11
 UCSRC = (1 << URSEL) | 0x06;
    421c:	86 e8       	ldi	r24, 0x86	; 134
    421e:	80 bd       	out	0x20, r24	; 32
 UBRRL = 77; //set baud rate lo
    4220:	8d e4       	ldi	r24, 0x4D	; 77
    4222:	89 b9       	out	0x09, r24	; 9
 UBRRH = 0x00; //set baud rate hi
    4224:	10 bc       	out	0x20, r1	; 32
 UCSRB = 0x18;
    4226:	88 e1       	ldi	r24, 0x18	; 24
    4228:	8a b9       	out	0x0a, r24	; 10

	fdevopen(&xmit_uart, &rcv_uart); 
    422a:	80 e0       	ldi	r24, 0x00	; 0
    422c:	91 e2       	ldi	r25, 0x21	; 33
    422e:	66 e0       	ldi	r22, 0x06	; 6
    4230:	71 e2       	ldi	r23, 0x21	; 33
    4232:	0e 94 69 21 	call	0x42d2	; 0x42d2 <fdevopen>

}
    4236:	08 95       	ret

00004238 <init_pwm>:

	*/


	/* use OC1A pin as output */
    DDRD = _BV(PD5);
    4238:	80 e2       	ldi	r24, 0x20	; 32
    423a:	81 bb       	out	0x11, r24	; 17
    /*
    * clear OC1A on compare match
    * set OC1A at BOTTOM, non-inverting mode
    * Fast PWM, 8bit
    */
    TCCR1A = _BV(COM1A1) | _BV(WGM10);
    423c:	81 e8       	ldi	r24, 0x81	; 129
    423e:	8f bd       	out	0x2f, r24	; 47
    /*
    * Fast PWM, 8bit
    * Prescaler: clk/1 = 8MHz
    * PWM frequency = 8MHz / (255 + 1) = 31.25kHz
    */
    TCCR1B = _BV(WGM12) | _BV(CS10);
    4240:	89 e0       	ldi	r24, 0x09	; 9
    4242:	8e bd       	out	0x2e, r24	; 46
   
    /* set initial duty cycle to zero */
    OCR1A = 0;
    4244:	1b bc       	out	0x2b, r1	; 43
    4246:	1a bc       	out	0x2a, r1	; 42
   

};
    4248:	08 95       	ret

0000424a <send_pwm>:
//uint8_t
void send_pwm(int duty)
{
	// OCR0=duty;	//old

	OCR1A = duty;
    424a:	9b bd       	out	0x2b, r25	; 43
    424c:	8a bd       	out	0x2a, r24	; 42
};
    424e:	08 95       	ret

00004250 <__mulsi3>:
    4250:	62 9f       	mul	r22, r18
    4252:	d0 01       	movw	r26, r0
    4254:	73 9f       	mul	r23, r19
    4256:	f0 01       	movw	r30, r0
    4258:	82 9f       	mul	r24, r18
    425a:	e0 0d       	add	r30, r0
    425c:	f1 1d       	adc	r31, r1
    425e:	64 9f       	mul	r22, r20
    4260:	e0 0d       	add	r30, r0
    4262:	f1 1d       	adc	r31, r1
    4264:	92 9f       	mul	r25, r18
    4266:	f0 0d       	add	r31, r0
    4268:	83 9f       	mul	r24, r19
    426a:	f0 0d       	add	r31, r0
    426c:	74 9f       	mul	r23, r20
    426e:	f0 0d       	add	r31, r0
    4270:	65 9f       	mul	r22, r21
    4272:	f0 0d       	add	r31, r0
    4274:	99 27       	eor	r25, r25
    4276:	72 9f       	mul	r23, r18
    4278:	b0 0d       	add	r27, r0
    427a:	e1 1d       	adc	r30, r1
    427c:	f9 1f       	adc	r31, r25
    427e:	63 9f       	mul	r22, r19
    4280:	b0 0d       	add	r27, r0
    4282:	e1 1d       	adc	r30, r1
    4284:	f9 1f       	adc	r31, r25
    4286:	bd 01       	movw	r22, r26
    4288:	cf 01       	movw	r24, r30
    428a:	11 24       	eor	r1, r1
    428c:	08 95       	ret

0000428e <__udivmodsi4>:
    428e:	a1 e2       	ldi	r26, 0x21	; 33
    4290:	1a 2e       	mov	r1, r26
    4292:	aa 1b       	sub	r26, r26
    4294:	bb 1b       	sub	r27, r27
    4296:	fd 01       	movw	r30, r26
    4298:	0d c0       	rjmp	.+26     	; 0x42b4 <__udivmodsi4_ep>

0000429a <__udivmodsi4_loop>:
    429a:	aa 1f       	adc	r26, r26
    429c:	bb 1f       	adc	r27, r27
    429e:	ee 1f       	adc	r30, r30
    42a0:	ff 1f       	adc	r31, r31
    42a2:	a2 17       	cp	r26, r18
    42a4:	b3 07       	cpc	r27, r19
    42a6:	e4 07       	cpc	r30, r20
    42a8:	f5 07       	cpc	r31, r21
    42aa:	20 f0       	brcs	.+8      	; 0x42b4 <__udivmodsi4_ep>
    42ac:	a2 1b       	sub	r26, r18
    42ae:	b3 0b       	sbc	r27, r19
    42b0:	e4 0b       	sbc	r30, r20
    42b2:	f5 0b       	sbc	r31, r21

000042b4 <__udivmodsi4_ep>:
    42b4:	66 1f       	adc	r22, r22
    42b6:	77 1f       	adc	r23, r23
    42b8:	88 1f       	adc	r24, r24
    42ba:	99 1f       	adc	r25, r25
    42bc:	1a 94       	dec	r1
    42be:	69 f7       	brne	.-38     	; 0x429a <__udivmodsi4_loop>
    42c0:	60 95       	com	r22
    42c2:	70 95       	com	r23
    42c4:	80 95       	com	r24
    42c6:	90 95       	com	r25
    42c8:	9b 01       	movw	r18, r22
    42ca:	ac 01       	movw	r20, r24
    42cc:	bd 01       	movw	r22, r26
    42ce:	cf 01       	movw	r24, r30
    42d0:	08 95       	ret

000042d2 <fdevopen>:
    42d2:	0f 93       	push	r16
    42d4:	1f 93       	push	r17
    42d6:	cf 93       	push	r28
    42d8:	df 93       	push	r29
    42da:	8c 01       	movw	r16, r24
    42dc:	eb 01       	movw	r28, r22
    42de:	00 97       	sbiw	r24, 0x00	; 0
    42e0:	31 f4       	brne	.+12     	; 0x42ee <fdevopen+0x1c>
    42e2:	61 15       	cp	r22, r1
    42e4:	71 05       	cpc	r23, r1
    42e6:	19 f4       	brne	.+6      	; 0x42ee <fdevopen+0x1c>
    42e8:	20 e0       	ldi	r18, 0x00	; 0
    42ea:	30 e0       	ldi	r19, 0x00	; 0
    42ec:	38 c0       	rjmp	.+112    	; 0x435e <fdevopen+0x8c>
    42ee:	81 e0       	ldi	r24, 0x01	; 1
    42f0:	90 e0       	ldi	r25, 0x00	; 0
    42f2:	6e e0       	ldi	r22, 0x0E	; 14
    42f4:	70 e0       	ldi	r23, 0x00	; 0
    42f6:	0e 94 a7 23 	call	0x474e	; 0x474e <calloc>
    42fa:	fc 01       	movw	r30, r24
    42fc:	9c 01       	movw	r18, r24
    42fe:	00 97       	sbiw	r24, 0x00	; 0
    4300:	71 f1       	breq	.+92     	; 0x435e <fdevopen+0x8c>
    4302:	80 e8       	ldi	r24, 0x80	; 128
    4304:	83 83       	std	Z+3, r24	; 0x03
    4306:	20 97       	sbiw	r28, 0x00	; 0
    4308:	71 f0       	breq	.+28     	; 0x4326 <fdevopen+0x54>
    430a:	d3 87       	std	Z+11, r29	; 0x0b
    430c:	c2 87       	std	Z+10, r28	; 0x0a
    430e:	81 e8       	ldi	r24, 0x81	; 129
    4310:	83 83       	std	Z+3, r24	; 0x03
    4312:	80 91 ed 02 	lds	r24, 0x02ED
    4316:	90 91 ee 02 	lds	r25, 0x02EE
    431a:	89 2b       	or	r24, r25
    431c:	21 f4       	brne	.+8      	; 0x4326 <fdevopen+0x54>
    431e:	f0 93 ee 02 	sts	0x02EE, r31
    4322:	e0 93 ed 02 	sts	0x02ED, r30
    4326:	01 15       	cp	r16, r1
    4328:	11 05       	cpc	r17, r1
    432a:	c9 f0       	breq	.+50     	; 0x435e <fdevopen+0x8c>
    432c:	11 87       	std	Z+9, r17	; 0x09
    432e:	00 87       	std	Z+8, r16	; 0x08
    4330:	83 81       	ldd	r24, Z+3	; 0x03
    4332:	82 60       	ori	r24, 0x02	; 2
    4334:	83 83       	std	Z+3, r24	; 0x03
    4336:	80 91 ef 02 	lds	r24, 0x02EF
    433a:	90 91 f0 02 	lds	r25, 0x02F0
    433e:	89 2b       	or	r24, r25
    4340:	71 f4       	brne	.+28     	; 0x435e <fdevopen+0x8c>
    4342:	f0 93 f0 02 	sts	0x02F0, r31
    4346:	e0 93 ef 02 	sts	0x02EF, r30
    434a:	80 91 f1 02 	lds	r24, 0x02F1
    434e:	90 91 f2 02 	lds	r25, 0x02F2
    4352:	89 2b       	or	r24, r25
    4354:	21 f4       	brne	.+8      	; 0x435e <fdevopen+0x8c>
    4356:	f0 93 f2 02 	sts	0x02F2, r31
    435a:	e0 93 f1 02 	sts	0x02F1, r30
    435e:	c9 01       	movw	r24, r18
    4360:	df 91       	pop	r29
    4362:	cf 91       	pop	r28
    4364:	1f 91       	pop	r17
    4366:	0f 91       	pop	r16
    4368:	08 95       	ret

0000436a <printf>:
    436a:	a0 e0       	ldi	r26, 0x00	; 0
    436c:	b0 e0       	ldi	r27, 0x00	; 0
    436e:	eb eb       	ldi	r30, 0xBB	; 187
    4370:	f1 e2       	ldi	r31, 0x21	; 33
    4372:	0c 94 7f 25 	jmp	0x4afe	; 0x4afe <__prologue_saves__+0x20>
    4376:	fe 01       	movw	r30, r28
    4378:	35 96       	adiw	r30, 0x05	; 5
    437a:	61 91       	ld	r22, Z+
    437c:	71 91       	ld	r23, Z+
    437e:	80 91 ef 02 	lds	r24, 0x02EF
    4382:	90 91 f0 02 	lds	r25, 0x02F0
    4386:	af 01       	movw	r20, r30
    4388:	0e 94 ca 21 	call	0x4394	; 0x4394 <vfprintf>
    438c:	20 96       	adiw	r28, 0x00	; 0
    438e:	e2 e0       	ldi	r30, 0x02	; 2
    4390:	0c 94 9b 25 	jmp	0x4b36	; 0x4b36 <__epilogue_restores__+0x20>

00004394 <vfprintf>:
    4394:	ab e0       	ldi	r26, 0x0B	; 11
    4396:	b0 e0       	ldi	r27, 0x00	; 0
    4398:	e0 ed       	ldi	r30, 0xD0	; 208
    439a:	f1 e2       	ldi	r31, 0x21	; 33
    439c:	0c 94 6f 25 	jmp	0x4ade	; 0x4ade <__prologue_saves__>
    43a0:	3c 01       	movw	r6, r24
    43a2:	2b 01       	movw	r4, r22
    43a4:	5a 01       	movw	r10, r20
    43a6:	fc 01       	movw	r30, r24
    43a8:	17 82       	std	Z+7, r1	; 0x07
    43aa:	16 82       	std	Z+6, r1	; 0x06
    43ac:	83 81       	ldd	r24, Z+3	; 0x03
    43ae:	81 fd       	sbrc	r24, 1
    43b0:	03 c0       	rjmp	.+6      	; 0x43b8 <vfprintf+0x24>
    43b2:	6f ef       	ldi	r22, 0xFF	; 255
    43b4:	7f ef       	ldi	r23, 0xFF	; 255
    43b6:	c6 c1       	rjmp	.+908    	; 0x4744 <vfprintf+0x3b0>
    43b8:	9a e0       	ldi	r25, 0x0A	; 10
    43ba:	89 2e       	mov	r8, r25
    43bc:	1e 01       	movw	r2, r28
    43be:	08 94       	sec
    43c0:	21 1c       	adc	r2, r1
    43c2:	31 1c       	adc	r3, r1
    43c4:	f3 01       	movw	r30, r6
    43c6:	23 81       	ldd	r18, Z+3	; 0x03
    43c8:	f2 01       	movw	r30, r4
    43ca:	23 fd       	sbrc	r18, 3
    43cc:	85 91       	lpm	r24, Z+
    43ce:	23 ff       	sbrs	r18, 3
    43d0:	81 91       	ld	r24, Z+
    43d2:	2f 01       	movw	r4, r30
    43d4:	88 23       	and	r24, r24
    43d6:	09 f4       	brne	.+2      	; 0x43da <vfprintf+0x46>
    43d8:	b2 c1       	rjmp	.+868    	; 0x473e <vfprintf+0x3aa>
    43da:	85 32       	cpi	r24, 0x25	; 37
    43dc:	39 f4       	brne	.+14     	; 0x43ec <vfprintf+0x58>
    43de:	23 fd       	sbrc	r18, 3
    43e0:	85 91       	lpm	r24, Z+
    43e2:	23 ff       	sbrs	r18, 3
    43e4:	81 91       	ld	r24, Z+
    43e6:	2f 01       	movw	r4, r30
    43e8:	85 32       	cpi	r24, 0x25	; 37
    43ea:	29 f4       	brne	.+10     	; 0x43f6 <vfprintf+0x62>
    43ec:	90 e0       	ldi	r25, 0x00	; 0
    43ee:	b3 01       	movw	r22, r6
    43f0:	0e 94 e5 24 	call	0x49ca	; 0x49ca <fputc>
    43f4:	e7 cf       	rjmp	.-50     	; 0x43c4 <vfprintf+0x30>
    43f6:	98 2f       	mov	r25, r24
    43f8:	ff 24       	eor	r15, r15
    43fa:	ee 24       	eor	r14, r14
    43fc:	99 24       	eor	r9, r9
    43fe:	ff e1       	ldi	r31, 0x1F	; 31
    4400:	ff 15       	cp	r31, r15
    4402:	d0 f0       	brcs	.+52     	; 0x4438 <vfprintf+0xa4>
    4404:	9b 32       	cpi	r25, 0x2B	; 43
    4406:	69 f0       	breq	.+26     	; 0x4422 <vfprintf+0x8e>
    4408:	9c 32       	cpi	r25, 0x2C	; 44
    440a:	28 f4       	brcc	.+10     	; 0x4416 <vfprintf+0x82>
    440c:	90 32       	cpi	r25, 0x20	; 32
    440e:	59 f0       	breq	.+22     	; 0x4426 <vfprintf+0x92>
    4410:	93 32       	cpi	r25, 0x23	; 35
    4412:	91 f4       	brne	.+36     	; 0x4438 <vfprintf+0xa4>
    4414:	0e c0       	rjmp	.+28     	; 0x4432 <vfprintf+0x9e>
    4416:	9d 32       	cpi	r25, 0x2D	; 45
    4418:	49 f0       	breq	.+18     	; 0x442c <vfprintf+0x98>
    441a:	90 33       	cpi	r25, 0x30	; 48
    441c:	69 f4       	brne	.+26     	; 0x4438 <vfprintf+0xa4>
    441e:	41 e0       	ldi	r20, 0x01	; 1
    4420:	24 c0       	rjmp	.+72     	; 0x446a <vfprintf+0xd6>
    4422:	52 e0       	ldi	r21, 0x02	; 2
    4424:	f5 2a       	or	r15, r21
    4426:	84 e0       	ldi	r24, 0x04	; 4
    4428:	f8 2a       	or	r15, r24
    442a:	28 c0       	rjmp	.+80     	; 0x447c <vfprintf+0xe8>
    442c:	98 e0       	ldi	r25, 0x08	; 8
    442e:	f9 2a       	or	r15, r25
    4430:	25 c0       	rjmp	.+74     	; 0x447c <vfprintf+0xe8>
    4432:	e0 e1       	ldi	r30, 0x10	; 16
    4434:	fe 2a       	or	r15, r30
    4436:	22 c0       	rjmp	.+68     	; 0x447c <vfprintf+0xe8>
    4438:	f7 fc       	sbrc	r15, 7
    443a:	29 c0       	rjmp	.+82     	; 0x448e <vfprintf+0xfa>
    443c:	89 2f       	mov	r24, r25
    443e:	80 53       	subi	r24, 0x30	; 48
    4440:	8a 30       	cpi	r24, 0x0A	; 10
    4442:	70 f4       	brcc	.+28     	; 0x4460 <vfprintf+0xcc>
    4444:	f6 fe       	sbrs	r15, 6
    4446:	05 c0       	rjmp	.+10     	; 0x4452 <vfprintf+0xbe>
    4448:	98 9c       	mul	r9, r8
    444a:	90 2c       	mov	r9, r0
    444c:	11 24       	eor	r1, r1
    444e:	98 0e       	add	r9, r24
    4450:	15 c0       	rjmp	.+42     	; 0x447c <vfprintf+0xe8>
    4452:	e8 9c       	mul	r14, r8
    4454:	e0 2c       	mov	r14, r0
    4456:	11 24       	eor	r1, r1
    4458:	e8 0e       	add	r14, r24
    445a:	f0 e2       	ldi	r31, 0x20	; 32
    445c:	ff 2a       	or	r15, r31
    445e:	0e c0       	rjmp	.+28     	; 0x447c <vfprintf+0xe8>
    4460:	9e 32       	cpi	r25, 0x2E	; 46
    4462:	29 f4       	brne	.+10     	; 0x446e <vfprintf+0xda>
    4464:	f6 fc       	sbrc	r15, 6
    4466:	6b c1       	rjmp	.+726    	; 0x473e <vfprintf+0x3aa>
    4468:	40 e4       	ldi	r20, 0x40	; 64
    446a:	f4 2a       	or	r15, r20
    446c:	07 c0       	rjmp	.+14     	; 0x447c <vfprintf+0xe8>
    446e:	9c 36       	cpi	r25, 0x6C	; 108
    4470:	19 f4       	brne	.+6      	; 0x4478 <vfprintf+0xe4>
    4472:	50 e8       	ldi	r21, 0x80	; 128
    4474:	f5 2a       	or	r15, r21
    4476:	02 c0       	rjmp	.+4      	; 0x447c <vfprintf+0xe8>
    4478:	98 36       	cpi	r25, 0x68	; 104
    447a:	49 f4       	brne	.+18     	; 0x448e <vfprintf+0xfa>
    447c:	f2 01       	movw	r30, r4
    447e:	23 fd       	sbrc	r18, 3
    4480:	95 91       	lpm	r25, Z+
    4482:	23 ff       	sbrs	r18, 3
    4484:	91 91       	ld	r25, Z+
    4486:	2f 01       	movw	r4, r30
    4488:	99 23       	and	r25, r25
    448a:	09 f0       	breq	.+2      	; 0x448e <vfprintf+0xfa>
    448c:	b8 cf       	rjmp	.-144    	; 0x43fe <vfprintf+0x6a>
    448e:	89 2f       	mov	r24, r25
    4490:	85 54       	subi	r24, 0x45	; 69
    4492:	83 30       	cpi	r24, 0x03	; 3
    4494:	18 f0       	brcs	.+6      	; 0x449c <vfprintf+0x108>
    4496:	80 52       	subi	r24, 0x20	; 32
    4498:	83 30       	cpi	r24, 0x03	; 3
    449a:	38 f4       	brcc	.+14     	; 0x44aa <vfprintf+0x116>
    449c:	44 e0       	ldi	r20, 0x04	; 4
    449e:	50 e0       	ldi	r21, 0x00	; 0
    44a0:	a4 0e       	add	r10, r20
    44a2:	b5 1e       	adc	r11, r21
    44a4:	5f e3       	ldi	r21, 0x3F	; 63
    44a6:	59 83       	std	Y+1, r21	; 0x01
    44a8:	0f c0       	rjmp	.+30     	; 0x44c8 <vfprintf+0x134>
    44aa:	93 36       	cpi	r25, 0x63	; 99
    44ac:	31 f0       	breq	.+12     	; 0x44ba <vfprintf+0x126>
    44ae:	93 37       	cpi	r25, 0x73	; 115
    44b0:	79 f0       	breq	.+30     	; 0x44d0 <vfprintf+0x13c>
    44b2:	93 35       	cpi	r25, 0x53	; 83
    44b4:	09 f0       	breq	.+2      	; 0x44b8 <vfprintf+0x124>
    44b6:	56 c0       	rjmp	.+172    	; 0x4564 <vfprintf+0x1d0>
    44b8:	20 c0       	rjmp	.+64     	; 0x44fa <vfprintf+0x166>
    44ba:	f5 01       	movw	r30, r10
    44bc:	80 81       	ld	r24, Z
    44be:	89 83       	std	Y+1, r24	; 0x01
    44c0:	42 e0       	ldi	r20, 0x02	; 2
    44c2:	50 e0       	ldi	r21, 0x00	; 0
    44c4:	a4 0e       	add	r10, r20
    44c6:	b5 1e       	adc	r11, r21
    44c8:	61 01       	movw	r12, r2
    44ca:	01 e0       	ldi	r16, 0x01	; 1
    44cc:	10 e0       	ldi	r17, 0x00	; 0
    44ce:	12 c0       	rjmp	.+36     	; 0x44f4 <vfprintf+0x160>
    44d0:	f5 01       	movw	r30, r10
    44d2:	c0 80       	ld	r12, Z
    44d4:	d1 80       	ldd	r13, Z+1	; 0x01
    44d6:	f6 fc       	sbrc	r15, 6
    44d8:	03 c0       	rjmp	.+6      	; 0x44e0 <vfprintf+0x14c>
    44da:	6f ef       	ldi	r22, 0xFF	; 255
    44dc:	7f ef       	ldi	r23, 0xFF	; 255
    44de:	02 c0       	rjmp	.+4      	; 0x44e4 <vfprintf+0x150>
    44e0:	69 2d       	mov	r22, r9
    44e2:	70 e0       	ldi	r23, 0x00	; 0
    44e4:	42 e0       	ldi	r20, 0x02	; 2
    44e6:	50 e0       	ldi	r21, 0x00	; 0
    44e8:	a4 0e       	add	r10, r20
    44ea:	b5 1e       	adc	r11, r21
    44ec:	c6 01       	movw	r24, r12
    44ee:	0e 94 da 24 	call	0x49b4	; 0x49b4 <strnlen>
    44f2:	8c 01       	movw	r16, r24
    44f4:	5f e7       	ldi	r21, 0x7F	; 127
    44f6:	f5 22       	and	r15, r21
    44f8:	14 c0       	rjmp	.+40     	; 0x4522 <vfprintf+0x18e>
    44fa:	f5 01       	movw	r30, r10
    44fc:	c0 80       	ld	r12, Z
    44fe:	d1 80       	ldd	r13, Z+1	; 0x01
    4500:	f6 fc       	sbrc	r15, 6
    4502:	03 c0       	rjmp	.+6      	; 0x450a <vfprintf+0x176>
    4504:	6f ef       	ldi	r22, 0xFF	; 255
    4506:	7f ef       	ldi	r23, 0xFF	; 255
    4508:	02 c0       	rjmp	.+4      	; 0x450e <vfprintf+0x17a>
    450a:	69 2d       	mov	r22, r9
    450c:	70 e0       	ldi	r23, 0x00	; 0
    450e:	42 e0       	ldi	r20, 0x02	; 2
    4510:	50 e0       	ldi	r21, 0x00	; 0
    4512:	a4 0e       	add	r10, r20
    4514:	b5 1e       	adc	r11, r21
    4516:	c6 01       	movw	r24, r12
    4518:	0e 94 c8 24 	call	0x4990	; 0x4990 <strnlen_P>
    451c:	8c 01       	movw	r16, r24
    451e:	50 e8       	ldi	r21, 0x80	; 128
    4520:	f5 2a       	or	r15, r21
    4522:	f3 fe       	sbrs	r15, 3
    4524:	07 c0       	rjmp	.+14     	; 0x4534 <vfprintf+0x1a0>
    4526:	1a c0       	rjmp	.+52     	; 0x455c <vfprintf+0x1c8>
    4528:	80 e2       	ldi	r24, 0x20	; 32
    452a:	90 e0       	ldi	r25, 0x00	; 0
    452c:	b3 01       	movw	r22, r6
    452e:	0e 94 e5 24 	call	0x49ca	; 0x49ca <fputc>
    4532:	ea 94       	dec	r14
    4534:	8e 2d       	mov	r24, r14
    4536:	90 e0       	ldi	r25, 0x00	; 0
    4538:	08 17       	cp	r16, r24
    453a:	19 07       	cpc	r17, r25
    453c:	a8 f3       	brcs	.-22     	; 0x4528 <vfprintf+0x194>
    453e:	0e c0       	rjmp	.+28     	; 0x455c <vfprintf+0x1c8>
    4540:	f6 01       	movw	r30, r12
    4542:	f7 fc       	sbrc	r15, 7
    4544:	85 91       	lpm	r24, Z+
    4546:	f7 fe       	sbrs	r15, 7
    4548:	81 91       	ld	r24, Z+
    454a:	6f 01       	movw	r12, r30
    454c:	90 e0       	ldi	r25, 0x00	; 0
    454e:	b3 01       	movw	r22, r6
    4550:	0e 94 e5 24 	call	0x49ca	; 0x49ca <fputc>
    4554:	e1 10       	cpse	r14, r1
    4556:	ea 94       	dec	r14
    4558:	01 50       	subi	r16, 0x01	; 1
    455a:	10 40       	sbci	r17, 0x00	; 0
    455c:	01 15       	cp	r16, r1
    455e:	11 05       	cpc	r17, r1
    4560:	79 f7       	brne	.-34     	; 0x4540 <vfprintf+0x1ac>
    4562:	ea c0       	rjmp	.+468    	; 0x4738 <vfprintf+0x3a4>
    4564:	94 36       	cpi	r25, 0x64	; 100
    4566:	11 f0       	breq	.+4      	; 0x456c <vfprintf+0x1d8>
    4568:	99 36       	cpi	r25, 0x69	; 105
    456a:	69 f5       	brne	.+90     	; 0x45c6 <vfprintf+0x232>
    456c:	f7 fe       	sbrs	r15, 7
    456e:	08 c0       	rjmp	.+16     	; 0x4580 <vfprintf+0x1ec>
    4570:	f5 01       	movw	r30, r10
    4572:	20 81       	ld	r18, Z
    4574:	31 81       	ldd	r19, Z+1	; 0x01
    4576:	42 81       	ldd	r20, Z+2	; 0x02
    4578:	53 81       	ldd	r21, Z+3	; 0x03
    457a:	84 e0       	ldi	r24, 0x04	; 4
    457c:	90 e0       	ldi	r25, 0x00	; 0
    457e:	0a c0       	rjmp	.+20     	; 0x4594 <vfprintf+0x200>
    4580:	f5 01       	movw	r30, r10
    4582:	80 81       	ld	r24, Z
    4584:	91 81       	ldd	r25, Z+1	; 0x01
    4586:	9c 01       	movw	r18, r24
    4588:	44 27       	eor	r20, r20
    458a:	37 fd       	sbrc	r19, 7
    458c:	40 95       	com	r20
    458e:	54 2f       	mov	r21, r20
    4590:	82 e0       	ldi	r24, 0x02	; 2
    4592:	90 e0       	ldi	r25, 0x00	; 0
    4594:	a8 0e       	add	r10, r24
    4596:	b9 1e       	adc	r11, r25
    4598:	9f e6       	ldi	r25, 0x6F	; 111
    459a:	f9 22       	and	r15, r25
    459c:	57 ff       	sbrs	r21, 7
    459e:	09 c0       	rjmp	.+18     	; 0x45b2 <vfprintf+0x21e>
    45a0:	50 95       	com	r21
    45a2:	40 95       	com	r20
    45a4:	30 95       	com	r19
    45a6:	21 95       	neg	r18
    45a8:	3f 4f       	sbci	r19, 0xFF	; 255
    45aa:	4f 4f       	sbci	r20, 0xFF	; 255
    45ac:	5f 4f       	sbci	r21, 0xFF	; 255
    45ae:	e0 e8       	ldi	r30, 0x80	; 128
    45b0:	fe 2a       	or	r15, r30
    45b2:	ca 01       	movw	r24, r20
    45b4:	b9 01       	movw	r22, r18
    45b6:	a1 01       	movw	r20, r2
    45b8:	2a e0       	ldi	r18, 0x0A	; 10
    45ba:	30 e0       	ldi	r19, 0x00	; 0
    45bc:	0e 94 11 25 	call	0x4a22	; 0x4a22 <__ultoa_invert>
    45c0:	d8 2e       	mov	r13, r24
    45c2:	d2 18       	sub	r13, r2
    45c4:	40 c0       	rjmp	.+128    	; 0x4646 <vfprintf+0x2b2>
    45c6:	95 37       	cpi	r25, 0x75	; 117
    45c8:	29 f4       	brne	.+10     	; 0x45d4 <vfprintf+0x240>
    45ca:	1f 2d       	mov	r17, r15
    45cc:	1f 7e       	andi	r17, 0xEF	; 239
    45ce:	2a e0       	ldi	r18, 0x0A	; 10
    45d0:	30 e0       	ldi	r19, 0x00	; 0
    45d2:	1d c0       	rjmp	.+58     	; 0x460e <vfprintf+0x27a>
    45d4:	1f 2d       	mov	r17, r15
    45d6:	19 7f       	andi	r17, 0xF9	; 249
    45d8:	9f 36       	cpi	r25, 0x6F	; 111
    45da:	61 f0       	breq	.+24     	; 0x45f4 <vfprintf+0x260>
    45dc:	90 37       	cpi	r25, 0x70	; 112
    45de:	20 f4       	brcc	.+8      	; 0x45e8 <vfprintf+0x254>
    45e0:	98 35       	cpi	r25, 0x58	; 88
    45e2:	09 f0       	breq	.+2      	; 0x45e6 <vfprintf+0x252>
    45e4:	ac c0       	rjmp	.+344    	; 0x473e <vfprintf+0x3aa>
    45e6:	0f c0       	rjmp	.+30     	; 0x4606 <vfprintf+0x272>
    45e8:	90 37       	cpi	r25, 0x70	; 112
    45ea:	39 f0       	breq	.+14     	; 0x45fa <vfprintf+0x266>
    45ec:	98 37       	cpi	r25, 0x78	; 120
    45ee:	09 f0       	breq	.+2      	; 0x45f2 <vfprintf+0x25e>
    45f0:	a6 c0       	rjmp	.+332    	; 0x473e <vfprintf+0x3aa>
    45f2:	04 c0       	rjmp	.+8      	; 0x45fc <vfprintf+0x268>
    45f4:	28 e0       	ldi	r18, 0x08	; 8
    45f6:	30 e0       	ldi	r19, 0x00	; 0
    45f8:	0a c0       	rjmp	.+20     	; 0x460e <vfprintf+0x27a>
    45fa:	10 61       	ori	r17, 0x10	; 16
    45fc:	14 fd       	sbrc	r17, 4
    45fe:	14 60       	ori	r17, 0x04	; 4
    4600:	20 e1       	ldi	r18, 0x10	; 16
    4602:	30 e0       	ldi	r19, 0x00	; 0
    4604:	04 c0       	rjmp	.+8      	; 0x460e <vfprintf+0x27a>
    4606:	14 fd       	sbrc	r17, 4
    4608:	16 60       	ori	r17, 0x06	; 6
    460a:	20 e1       	ldi	r18, 0x10	; 16
    460c:	32 e0       	ldi	r19, 0x02	; 2
    460e:	17 ff       	sbrs	r17, 7
    4610:	08 c0       	rjmp	.+16     	; 0x4622 <vfprintf+0x28e>
    4612:	f5 01       	movw	r30, r10
    4614:	60 81       	ld	r22, Z
    4616:	71 81       	ldd	r23, Z+1	; 0x01
    4618:	82 81       	ldd	r24, Z+2	; 0x02
    461a:	93 81       	ldd	r25, Z+3	; 0x03
    461c:	44 e0       	ldi	r20, 0x04	; 4
    461e:	50 e0       	ldi	r21, 0x00	; 0
    4620:	08 c0       	rjmp	.+16     	; 0x4632 <vfprintf+0x29e>
    4622:	f5 01       	movw	r30, r10
    4624:	80 81       	ld	r24, Z
    4626:	91 81       	ldd	r25, Z+1	; 0x01
    4628:	bc 01       	movw	r22, r24
    462a:	80 e0       	ldi	r24, 0x00	; 0
    462c:	90 e0       	ldi	r25, 0x00	; 0
    462e:	42 e0       	ldi	r20, 0x02	; 2
    4630:	50 e0       	ldi	r21, 0x00	; 0
    4632:	a4 0e       	add	r10, r20
    4634:	b5 1e       	adc	r11, r21
    4636:	a1 01       	movw	r20, r2
    4638:	0e 94 11 25 	call	0x4a22	; 0x4a22 <__ultoa_invert>
    463c:	d8 2e       	mov	r13, r24
    463e:	d2 18       	sub	r13, r2
    4640:	8f e7       	ldi	r24, 0x7F	; 127
    4642:	f8 2e       	mov	r15, r24
    4644:	f1 22       	and	r15, r17
    4646:	f6 fe       	sbrs	r15, 6
    4648:	0b c0       	rjmp	.+22     	; 0x4660 <vfprintf+0x2cc>
    464a:	5e ef       	ldi	r21, 0xFE	; 254
    464c:	f5 22       	and	r15, r21
    464e:	d9 14       	cp	r13, r9
    4650:	38 f4       	brcc	.+14     	; 0x4660 <vfprintf+0x2cc>
    4652:	f4 fe       	sbrs	r15, 4
    4654:	07 c0       	rjmp	.+14     	; 0x4664 <vfprintf+0x2d0>
    4656:	f2 fc       	sbrc	r15, 2
    4658:	05 c0       	rjmp	.+10     	; 0x4664 <vfprintf+0x2d0>
    465a:	8f ee       	ldi	r24, 0xEF	; 239
    465c:	f8 22       	and	r15, r24
    465e:	02 c0       	rjmp	.+4      	; 0x4664 <vfprintf+0x2d0>
    4660:	1d 2d       	mov	r17, r13
    4662:	01 c0       	rjmp	.+2      	; 0x4666 <vfprintf+0x2d2>
    4664:	19 2d       	mov	r17, r9
    4666:	f4 fe       	sbrs	r15, 4
    4668:	0d c0       	rjmp	.+26     	; 0x4684 <vfprintf+0x2f0>
    466a:	fe 01       	movw	r30, r28
    466c:	ed 0d       	add	r30, r13
    466e:	f1 1d       	adc	r31, r1
    4670:	80 81       	ld	r24, Z
    4672:	80 33       	cpi	r24, 0x30	; 48
    4674:	19 f4       	brne	.+6      	; 0x467c <vfprintf+0x2e8>
    4676:	99 ee       	ldi	r25, 0xE9	; 233
    4678:	f9 22       	and	r15, r25
    467a:	08 c0       	rjmp	.+16     	; 0x468c <vfprintf+0x2f8>
    467c:	1f 5f       	subi	r17, 0xFF	; 255
    467e:	f2 fe       	sbrs	r15, 2
    4680:	05 c0       	rjmp	.+10     	; 0x468c <vfprintf+0x2f8>
    4682:	03 c0       	rjmp	.+6      	; 0x468a <vfprintf+0x2f6>
    4684:	8f 2d       	mov	r24, r15
    4686:	86 78       	andi	r24, 0x86	; 134
    4688:	09 f0       	breq	.+2      	; 0x468c <vfprintf+0x2f8>
    468a:	1f 5f       	subi	r17, 0xFF	; 255
    468c:	0f 2d       	mov	r16, r15
    468e:	f3 fc       	sbrc	r15, 3
    4690:	14 c0       	rjmp	.+40     	; 0x46ba <vfprintf+0x326>
    4692:	f0 fe       	sbrs	r15, 0
    4694:	0f c0       	rjmp	.+30     	; 0x46b4 <vfprintf+0x320>
    4696:	1e 15       	cp	r17, r14
    4698:	10 f0       	brcs	.+4      	; 0x469e <vfprintf+0x30a>
    469a:	9d 2c       	mov	r9, r13
    469c:	0b c0       	rjmp	.+22     	; 0x46b4 <vfprintf+0x320>
    469e:	9d 2c       	mov	r9, r13
    46a0:	9e 0c       	add	r9, r14
    46a2:	91 1a       	sub	r9, r17
    46a4:	1e 2d       	mov	r17, r14
    46a6:	06 c0       	rjmp	.+12     	; 0x46b4 <vfprintf+0x320>
    46a8:	80 e2       	ldi	r24, 0x20	; 32
    46aa:	90 e0       	ldi	r25, 0x00	; 0
    46ac:	b3 01       	movw	r22, r6
    46ae:	0e 94 e5 24 	call	0x49ca	; 0x49ca <fputc>
    46b2:	1f 5f       	subi	r17, 0xFF	; 255
    46b4:	1e 15       	cp	r17, r14
    46b6:	c0 f3       	brcs	.-16     	; 0x46a8 <vfprintf+0x314>
    46b8:	04 c0       	rjmp	.+8      	; 0x46c2 <vfprintf+0x32e>
    46ba:	1e 15       	cp	r17, r14
    46bc:	10 f4       	brcc	.+4      	; 0x46c2 <vfprintf+0x32e>
    46be:	e1 1a       	sub	r14, r17
    46c0:	01 c0       	rjmp	.+2      	; 0x46c4 <vfprintf+0x330>
    46c2:	ee 24       	eor	r14, r14
    46c4:	04 ff       	sbrs	r16, 4
    46c6:	0f c0       	rjmp	.+30     	; 0x46e6 <vfprintf+0x352>
    46c8:	80 e3       	ldi	r24, 0x30	; 48
    46ca:	90 e0       	ldi	r25, 0x00	; 0
    46cc:	b3 01       	movw	r22, r6
    46ce:	0e 94 e5 24 	call	0x49ca	; 0x49ca <fputc>
    46d2:	02 ff       	sbrs	r16, 2
    46d4:	1d c0       	rjmp	.+58     	; 0x4710 <vfprintf+0x37c>
    46d6:	01 fd       	sbrc	r16, 1
    46d8:	03 c0       	rjmp	.+6      	; 0x46e0 <vfprintf+0x34c>
    46da:	88 e7       	ldi	r24, 0x78	; 120
    46dc:	90 e0       	ldi	r25, 0x00	; 0
    46de:	0e c0       	rjmp	.+28     	; 0x46fc <vfprintf+0x368>
    46e0:	88 e5       	ldi	r24, 0x58	; 88
    46e2:	90 e0       	ldi	r25, 0x00	; 0
    46e4:	0b c0       	rjmp	.+22     	; 0x46fc <vfprintf+0x368>
    46e6:	80 2f       	mov	r24, r16
    46e8:	86 78       	andi	r24, 0x86	; 134
    46ea:	91 f0       	breq	.+36     	; 0x4710 <vfprintf+0x37c>
    46ec:	01 ff       	sbrs	r16, 1
    46ee:	02 c0       	rjmp	.+4      	; 0x46f4 <vfprintf+0x360>
    46f0:	8b e2       	ldi	r24, 0x2B	; 43
    46f2:	01 c0       	rjmp	.+2      	; 0x46f6 <vfprintf+0x362>
    46f4:	80 e2       	ldi	r24, 0x20	; 32
    46f6:	f7 fc       	sbrc	r15, 7
    46f8:	8d e2       	ldi	r24, 0x2D	; 45
    46fa:	90 e0       	ldi	r25, 0x00	; 0
    46fc:	b3 01       	movw	r22, r6
    46fe:	0e 94 e5 24 	call	0x49ca	; 0x49ca <fputc>
    4702:	06 c0       	rjmp	.+12     	; 0x4710 <vfprintf+0x37c>
    4704:	80 e3       	ldi	r24, 0x30	; 48
    4706:	90 e0       	ldi	r25, 0x00	; 0
    4708:	b3 01       	movw	r22, r6
    470a:	0e 94 e5 24 	call	0x49ca	; 0x49ca <fputc>
    470e:	9a 94       	dec	r9
    4710:	d9 14       	cp	r13, r9
    4712:	c0 f3       	brcs	.-16     	; 0x4704 <vfprintf+0x370>
    4714:	da 94       	dec	r13
    4716:	f1 01       	movw	r30, r2
    4718:	ed 0d       	add	r30, r13
    471a:	f1 1d       	adc	r31, r1
    471c:	80 81       	ld	r24, Z
    471e:	90 e0       	ldi	r25, 0x00	; 0
    4720:	b3 01       	movw	r22, r6
    4722:	0e 94 e5 24 	call	0x49ca	; 0x49ca <fputc>
    4726:	dd 20       	and	r13, r13
    4728:	a9 f7       	brne	.-22     	; 0x4714 <vfprintf+0x380>
    472a:	06 c0       	rjmp	.+12     	; 0x4738 <vfprintf+0x3a4>
    472c:	80 e2       	ldi	r24, 0x20	; 32
    472e:	90 e0       	ldi	r25, 0x00	; 0
    4730:	b3 01       	movw	r22, r6
    4732:	0e 94 e5 24 	call	0x49ca	; 0x49ca <fputc>
    4736:	ea 94       	dec	r14
    4738:	ee 20       	and	r14, r14
    473a:	c1 f7       	brne	.-16     	; 0x472c <vfprintf+0x398>
    473c:	43 ce       	rjmp	.-890    	; 0x43c4 <vfprintf+0x30>
    473e:	f3 01       	movw	r30, r6
    4740:	66 81       	ldd	r22, Z+6	; 0x06
    4742:	77 81       	ldd	r23, Z+7	; 0x07
    4744:	cb 01       	movw	r24, r22
    4746:	2b 96       	adiw	r28, 0x0b	; 11
    4748:	e2 e1       	ldi	r30, 0x12	; 18
    474a:	0c 94 8b 25 	jmp	0x4b16	; 0x4b16 <__epilogue_restores__>

0000474e <calloc>:
    474e:	0f 93       	push	r16
    4750:	1f 93       	push	r17
    4752:	cf 93       	push	r28
    4754:	df 93       	push	r29
    4756:	68 9f       	mul	r22, r24
    4758:	80 01       	movw	r16, r0
    475a:	69 9f       	mul	r22, r25
    475c:	10 0d       	add	r17, r0
    475e:	78 9f       	mul	r23, r24
    4760:	10 0d       	add	r17, r0
    4762:	11 24       	eor	r1, r1
    4764:	c8 01       	movw	r24, r16
    4766:	0e 94 c3 23 	call	0x4786	; 0x4786 <malloc>
    476a:	ec 01       	movw	r28, r24
    476c:	00 97       	sbiw	r24, 0x00	; 0
    476e:	29 f0       	breq	.+10     	; 0x477a <calloc+0x2c>
    4770:	60 e0       	ldi	r22, 0x00	; 0
    4772:	70 e0       	ldi	r23, 0x00	; 0
    4774:	a8 01       	movw	r20, r16
    4776:	0e 94 d3 24 	call	0x49a6	; 0x49a6 <memset>
    477a:	ce 01       	movw	r24, r28
    477c:	df 91       	pop	r29
    477e:	cf 91       	pop	r28
    4780:	1f 91       	pop	r17
    4782:	0f 91       	pop	r16
    4784:	08 95       	ret

00004786 <malloc>:
    4786:	cf 93       	push	r28
    4788:	df 93       	push	r29
    478a:	bc 01       	movw	r22, r24
    478c:	82 30       	cpi	r24, 0x02	; 2
    478e:	91 05       	cpc	r25, r1
    4790:	10 f4       	brcc	.+4      	; 0x4796 <malloc+0x10>
    4792:	62 e0       	ldi	r22, 0x02	; 2
    4794:	70 e0       	ldi	r23, 0x00	; 0
    4796:	a0 91 f5 02 	lds	r26, 0x02F5
    479a:	b0 91 f6 02 	lds	r27, 0x02F6
    479e:	ed 01       	movw	r28, r26
    47a0:	e0 e0       	ldi	r30, 0x00	; 0
    47a2:	f0 e0       	ldi	r31, 0x00	; 0
    47a4:	40 e0       	ldi	r20, 0x00	; 0
    47a6:	50 e0       	ldi	r21, 0x00	; 0
    47a8:	21 c0       	rjmp	.+66     	; 0x47ec <malloc+0x66>
    47aa:	88 81       	ld	r24, Y
    47ac:	99 81       	ldd	r25, Y+1	; 0x01
    47ae:	86 17       	cp	r24, r22
    47b0:	97 07       	cpc	r25, r23
    47b2:	69 f4       	brne	.+26     	; 0x47ce <malloc+0x48>
    47b4:	8a 81       	ldd	r24, Y+2	; 0x02
    47b6:	9b 81       	ldd	r25, Y+3	; 0x03
    47b8:	30 97       	sbiw	r30, 0x00	; 0
    47ba:	19 f0       	breq	.+6      	; 0x47c2 <malloc+0x3c>
    47bc:	93 83       	std	Z+3, r25	; 0x03
    47be:	82 83       	std	Z+2, r24	; 0x02
    47c0:	04 c0       	rjmp	.+8      	; 0x47ca <malloc+0x44>
    47c2:	90 93 f6 02 	sts	0x02F6, r25
    47c6:	80 93 f5 02 	sts	0x02F5, r24
    47ca:	fe 01       	movw	r30, r28
    47cc:	34 c0       	rjmp	.+104    	; 0x4836 <malloc+0xb0>
    47ce:	68 17       	cp	r22, r24
    47d0:	79 07       	cpc	r23, r25
    47d2:	38 f4       	brcc	.+14     	; 0x47e2 <malloc+0x5c>
    47d4:	41 15       	cp	r20, r1
    47d6:	51 05       	cpc	r21, r1
    47d8:	19 f0       	breq	.+6      	; 0x47e0 <malloc+0x5a>
    47da:	84 17       	cp	r24, r20
    47dc:	95 07       	cpc	r25, r21
    47de:	08 f4       	brcc	.+2      	; 0x47e2 <malloc+0x5c>
    47e0:	ac 01       	movw	r20, r24
    47e2:	fe 01       	movw	r30, r28
    47e4:	8a 81       	ldd	r24, Y+2	; 0x02
    47e6:	9b 81       	ldd	r25, Y+3	; 0x03
    47e8:	9c 01       	movw	r18, r24
    47ea:	e9 01       	movw	r28, r18
    47ec:	20 97       	sbiw	r28, 0x00	; 0
    47ee:	e9 f6       	brne	.-70     	; 0x47aa <malloc+0x24>
    47f0:	41 15       	cp	r20, r1
    47f2:	51 05       	cpc	r21, r1
    47f4:	a9 f1       	breq	.+106    	; 0x4860 <malloc+0xda>
    47f6:	ca 01       	movw	r24, r20
    47f8:	86 1b       	sub	r24, r22
    47fa:	97 0b       	sbc	r25, r23
    47fc:	04 97       	sbiw	r24, 0x04	; 4
    47fe:	08 f4       	brcc	.+2      	; 0x4802 <malloc+0x7c>
    4800:	ba 01       	movw	r22, r20
    4802:	e0 e0       	ldi	r30, 0x00	; 0
    4804:	f0 e0       	ldi	r31, 0x00	; 0
    4806:	2a c0       	rjmp	.+84     	; 0x485c <malloc+0xd6>
    4808:	8d 91       	ld	r24, X+
    480a:	9c 91       	ld	r25, X
    480c:	11 97       	sbiw	r26, 0x01	; 1
    480e:	84 17       	cp	r24, r20
    4810:	95 07       	cpc	r25, r21
    4812:	f9 f4       	brne	.+62     	; 0x4852 <malloc+0xcc>
    4814:	64 17       	cp	r22, r20
    4816:	75 07       	cpc	r23, r21
    4818:	81 f4       	brne	.+32     	; 0x483a <malloc+0xb4>
    481a:	12 96       	adiw	r26, 0x02	; 2
    481c:	8d 91       	ld	r24, X+
    481e:	9c 91       	ld	r25, X
    4820:	13 97       	sbiw	r26, 0x03	; 3
    4822:	30 97       	sbiw	r30, 0x00	; 0
    4824:	19 f0       	breq	.+6      	; 0x482c <malloc+0xa6>
    4826:	93 83       	std	Z+3, r25	; 0x03
    4828:	82 83       	std	Z+2, r24	; 0x02
    482a:	04 c0       	rjmp	.+8      	; 0x4834 <malloc+0xae>
    482c:	90 93 f6 02 	sts	0x02F6, r25
    4830:	80 93 f5 02 	sts	0x02F5, r24
    4834:	fd 01       	movw	r30, r26
    4836:	32 96       	adiw	r30, 0x02	; 2
    4838:	4f c0       	rjmp	.+158    	; 0x48d8 <malloc+0x152>
    483a:	ca 01       	movw	r24, r20
    483c:	86 1b       	sub	r24, r22
    483e:	97 0b       	sbc	r25, r23
    4840:	fd 01       	movw	r30, r26
    4842:	e8 0f       	add	r30, r24
    4844:	f9 1f       	adc	r31, r25
    4846:	61 93       	st	Z+, r22
    4848:	71 93       	st	Z+, r23
    484a:	02 97       	sbiw	r24, 0x02	; 2
    484c:	8d 93       	st	X+, r24
    484e:	9c 93       	st	X, r25
    4850:	43 c0       	rjmp	.+134    	; 0x48d8 <malloc+0x152>
    4852:	fd 01       	movw	r30, r26
    4854:	82 81       	ldd	r24, Z+2	; 0x02
    4856:	93 81       	ldd	r25, Z+3	; 0x03
    4858:	9c 01       	movw	r18, r24
    485a:	d9 01       	movw	r26, r18
    485c:	10 97       	sbiw	r26, 0x00	; 0
    485e:	a1 f6       	brne	.-88     	; 0x4808 <malloc+0x82>
    4860:	80 91 f3 02 	lds	r24, 0x02F3
    4864:	90 91 f4 02 	lds	r25, 0x02F4
    4868:	89 2b       	or	r24, r25
    486a:	41 f4       	brne	.+16     	; 0x487c <malloc+0xf6>
    486c:	80 91 b5 00 	lds	r24, 0x00B5
    4870:	90 91 b6 00 	lds	r25, 0x00B6
    4874:	90 93 f4 02 	sts	0x02F4, r25
    4878:	80 93 f3 02 	sts	0x02F3, r24
    487c:	40 91 b7 00 	lds	r20, 0x00B7
    4880:	50 91 b8 00 	lds	r21, 0x00B8
    4884:	41 15       	cp	r20, r1
    4886:	51 05       	cpc	r21, r1
    4888:	41 f4       	brne	.+16     	; 0x489a <malloc+0x114>
    488a:	4d b7       	in	r20, 0x3d	; 61
    488c:	5e b7       	in	r21, 0x3e	; 62
    488e:	80 91 b3 00 	lds	r24, 0x00B3
    4892:	90 91 b4 00 	lds	r25, 0x00B4
    4896:	48 1b       	sub	r20, r24
    4898:	59 0b       	sbc	r21, r25
    489a:	20 91 f3 02 	lds	r18, 0x02F3
    489e:	30 91 f4 02 	lds	r19, 0x02F4
    48a2:	24 17       	cp	r18, r20
    48a4:	35 07       	cpc	r19, r21
    48a6:	b0 f4       	brcc	.+44     	; 0x48d4 <malloc+0x14e>
    48a8:	ca 01       	movw	r24, r20
    48aa:	82 1b       	sub	r24, r18
    48ac:	93 0b       	sbc	r25, r19
    48ae:	86 17       	cp	r24, r22
    48b0:	97 07       	cpc	r25, r23
    48b2:	80 f0       	brcs	.+32     	; 0x48d4 <malloc+0x14e>
    48b4:	ab 01       	movw	r20, r22
    48b6:	4e 5f       	subi	r20, 0xFE	; 254
    48b8:	5f 4f       	sbci	r21, 0xFF	; 255
    48ba:	84 17       	cp	r24, r20
    48bc:	95 07       	cpc	r25, r21
    48be:	50 f0       	brcs	.+20     	; 0x48d4 <malloc+0x14e>
    48c0:	42 0f       	add	r20, r18
    48c2:	53 1f       	adc	r21, r19
    48c4:	50 93 f4 02 	sts	0x02F4, r21
    48c8:	40 93 f3 02 	sts	0x02F3, r20
    48cc:	f9 01       	movw	r30, r18
    48ce:	61 93       	st	Z+, r22
    48d0:	71 93       	st	Z+, r23
    48d2:	02 c0       	rjmp	.+4      	; 0x48d8 <malloc+0x152>
    48d4:	e0 e0       	ldi	r30, 0x00	; 0
    48d6:	f0 e0       	ldi	r31, 0x00	; 0
    48d8:	cf 01       	movw	r24, r30
    48da:	df 91       	pop	r29
    48dc:	cf 91       	pop	r28
    48de:	08 95       	ret

000048e0 <free>:
    48e0:	cf 93       	push	r28
    48e2:	df 93       	push	r29
    48e4:	00 97       	sbiw	r24, 0x00	; 0
    48e6:	09 f4       	brne	.+2      	; 0x48ea <free+0xa>
    48e8:	50 c0       	rjmp	.+160    	; 0x498a <free+0xaa>
    48ea:	ec 01       	movw	r28, r24
    48ec:	22 97       	sbiw	r28, 0x02	; 2
    48ee:	1b 82       	std	Y+3, r1	; 0x03
    48f0:	1a 82       	std	Y+2, r1	; 0x02
    48f2:	a0 91 f5 02 	lds	r26, 0x02F5
    48f6:	b0 91 f6 02 	lds	r27, 0x02F6
    48fa:	10 97       	sbiw	r26, 0x00	; 0
    48fc:	09 f1       	breq	.+66     	; 0x4940 <free+0x60>
    48fe:	40 e0       	ldi	r20, 0x00	; 0
    4900:	50 e0       	ldi	r21, 0x00	; 0
    4902:	ac 17       	cp	r26, r28
    4904:	bd 07       	cpc	r27, r29
    4906:	08 f1       	brcs	.+66     	; 0x494a <free+0x6a>
    4908:	bb 83       	std	Y+3, r27	; 0x03
    490a:	aa 83       	std	Y+2, r26	; 0x02
    490c:	fe 01       	movw	r30, r28
    490e:	21 91       	ld	r18, Z+
    4910:	31 91       	ld	r19, Z+
    4912:	e2 0f       	add	r30, r18
    4914:	f3 1f       	adc	r31, r19
    4916:	ae 17       	cp	r26, r30
    4918:	bf 07       	cpc	r27, r31
    491a:	79 f4       	brne	.+30     	; 0x493a <free+0x5a>
    491c:	8d 91       	ld	r24, X+
    491e:	9c 91       	ld	r25, X
    4920:	11 97       	sbiw	r26, 0x01	; 1
    4922:	28 0f       	add	r18, r24
    4924:	39 1f       	adc	r19, r25
    4926:	2e 5f       	subi	r18, 0xFE	; 254
    4928:	3f 4f       	sbci	r19, 0xFF	; 255
    492a:	39 83       	std	Y+1, r19	; 0x01
    492c:	28 83       	st	Y, r18
    492e:	12 96       	adiw	r26, 0x02	; 2
    4930:	8d 91       	ld	r24, X+
    4932:	9c 91       	ld	r25, X
    4934:	13 97       	sbiw	r26, 0x03	; 3
    4936:	9b 83       	std	Y+3, r25	; 0x03
    4938:	8a 83       	std	Y+2, r24	; 0x02
    493a:	41 15       	cp	r20, r1
    493c:	51 05       	cpc	r21, r1
    493e:	71 f4       	brne	.+28     	; 0x495c <free+0x7c>
    4940:	d0 93 f6 02 	sts	0x02F6, r29
    4944:	c0 93 f5 02 	sts	0x02F5, r28
    4948:	20 c0       	rjmp	.+64     	; 0x498a <free+0xaa>
    494a:	12 96       	adiw	r26, 0x02	; 2
    494c:	8d 91       	ld	r24, X+
    494e:	9c 91       	ld	r25, X
    4950:	13 97       	sbiw	r26, 0x03	; 3
    4952:	ad 01       	movw	r20, r26
    4954:	00 97       	sbiw	r24, 0x00	; 0
    4956:	11 f0       	breq	.+4      	; 0x495c <free+0x7c>
    4958:	dc 01       	movw	r26, r24
    495a:	d3 cf       	rjmp	.-90     	; 0x4902 <free+0x22>
    495c:	fa 01       	movw	r30, r20
    495e:	d3 83       	std	Z+3, r29	; 0x03
    4960:	c2 83       	std	Z+2, r28	; 0x02
    4962:	21 91       	ld	r18, Z+
    4964:	31 91       	ld	r19, Z+
    4966:	e2 0f       	add	r30, r18
    4968:	f3 1f       	adc	r31, r19
    496a:	ce 17       	cp	r28, r30
    496c:	df 07       	cpc	r29, r31
    496e:	69 f4       	brne	.+26     	; 0x498a <free+0xaa>
    4970:	88 81       	ld	r24, Y
    4972:	99 81       	ldd	r25, Y+1	; 0x01
    4974:	28 0f       	add	r18, r24
    4976:	39 1f       	adc	r19, r25
    4978:	2e 5f       	subi	r18, 0xFE	; 254
    497a:	3f 4f       	sbci	r19, 0xFF	; 255
    497c:	fa 01       	movw	r30, r20
    497e:	31 83       	std	Z+1, r19	; 0x01
    4980:	20 83       	st	Z, r18
    4982:	8a 81       	ldd	r24, Y+2	; 0x02
    4984:	9b 81       	ldd	r25, Y+3	; 0x03
    4986:	93 83       	std	Z+3, r25	; 0x03
    4988:	82 83       	std	Z+2, r24	; 0x02
    498a:	df 91       	pop	r29
    498c:	cf 91       	pop	r28
    498e:	08 95       	ret

00004990 <strnlen_P>:
    4990:	fc 01       	movw	r30, r24
    4992:	05 90       	lpm	r0, Z+
    4994:	61 50       	subi	r22, 0x01	; 1
    4996:	70 40       	sbci	r23, 0x00	; 0
    4998:	01 10       	cpse	r0, r1
    499a:	d8 f7       	brcc	.-10     	; 0x4992 <strnlen_P+0x2>
    499c:	80 95       	com	r24
    499e:	90 95       	com	r25
    49a0:	8e 0f       	add	r24, r30
    49a2:	9f 1f       	adc	r25, r31
    49a4:	08 95       	ret

000049a6 <memset>:
    49a6:	dc 01       	movw	r26, r24
    49a8:	01 c0       	rjmp	.+2      	; 0x49ac <memset+0x6>
    49aa:	6d 93       	st	X+, r22
    49ac:	41 50       	subi	r20, 0x01	; 1
    49ae:	50 40       	sbci	r21, 0x00	; 0
    49b0:	e0 f7       	brcc	.-8      	; 0x49aa <memset+0x4>
    49b2:	08 95       	ret

000049b4 <strnlen>:
    49b4:	fc 01       	movw	r30, r24
    49b6:	61 50       	subi	r22, 0x01	; 1
    49b8:	70 40       	sbci	r23, 0x00	; 0
    49ba:	01 90       	ld	r0, Z+
    49bc:	01 10       	cpse	r0, r1
    49be:	d8 f7       	brcc	.-10     	; 0x49b6 <strnlen+0x2>
    49c0:	80 95       	com	r24
    49c2:	90 95       	com	r25
    49c4:	8e 0f       	add	r24, r30
    49c6:	9f 1f       	adc	r25, r31
    49c8:	08 95       	ret

000049ca <fputc>:
    49ca:	0f 93       	push	r16
    49cc:	1f 93       	push	r17
    49ce:	cf 93       	push	r28
    49d0:	df 93       	push	r29
    49d2:	8c 01       	movw	r16, r24
    49d4:	eb 01       	movw	r28, r22
    49d6:	8b 81       	ldd	r24, Y+3	; 0x03
    49d8:	81 ff       	sbrs	r24, 1
    49da:	1b c0       	rjmp	.+54     	; 0x4a12 <fputc+0x48>
    49dc:	82 ff       	sbrs	r24, 2
    49de:	0d c0       	rjmp	.+26     	; 0x49fa <fputc+0x30>
    49e0:	2e 81       	ldd	r18, Y+6	; 0x06
    49e2:	3f 81       	ldd	r19, Y+7	; 0x07
    49e4:	8c 81       	ldd	r24, Y+4	; 0x04
    49e6:	9d 81       	ldd	r25, Y+5	; 0x05
    49e8:	28 17       	cp	r18, r24
    49ea:	39 07       	cpc	r19, r25
    49ec:	64 f4       	brge	.+24     	; 0x4a06 <fputc+0x3c>
    49ee:	e8 81       	ld	r30, Y
    49f0:	f9 81       	ldd	r31, Y+1	; 0x01
    49f2:	01 93       	st	Z+, r16
    49f4:	f9 83       	std	Y+1, r31	; 0x01
    49f6:	e8 83       	st	Y, r30
    49f8:	06 c0       	rjmp	.+12     	; 0x4a06 <fputc+0x3c>
    49fa:	e8 85       	ldd	r30, Y+8	; 0x08
    49fc:	f9 85       	ldd	r31, Y+9	; 0x09
    49fe:	80 2f       	mov	r24, r16
    4a00:	09 95       	icall
    4a02:	89 2b       	or	r24, r25
    4a04:	31 f4       	brne	.+12     	; 0x4a12 <fputc+0x48>
    4a06:	8e 81       	ldd	r24, Y+6	; 0x06
    4a08:	9f 81       	ldd	r25, Y+7	; 0x07
    4a0a:	01 96       	adiw	r24, 0x01	; 1
    4a0c:	9f 83       	std	Y+7, r25	; 0x07
    4a0e:	8e 83       	std	Y+6, r24	; 0x06
    4a10:	02 c0       	rjmp	.+4      	; 0x4a16 <fputc+0x4c>
    4a12:	0f ef       	ldi	r16, 0xFF	; 255
    4a14:	1f ef       	ldi	r17, 0xFF	; 255
    4a16:	c8 01       	movw	r24, r16
    4a18:	df 91       	pop	r29
    4a1a:	cf 91       	pop	r28
    4a1c:	1f 91       	pop	r17
    4a1e:	0f 91       	pop	r16
    4a20:	08 95       	ret

00004a22 <__ultoa_invert>:
    4a22:	fa 01       	movw	r30, r20
    4a24:	aa 27       	eor	r26, r26
    4a26:	28 30       	cpi	r18, 0x08	; 8
    4a28:	51 f1       	breq	.+84     	; 0x4a7e <__ultoa_invert+0x5c>
    4a2a:	20 31       	cpi	r18, 0x10	; 16
    4a2c:	81 f1       	breq	.+96     	; 0x4a8e <__ultoa_invert+0x6c>
    4a2e:	e8 94       	clt
    4a30:	6f 93       	push	r22
    4a32:	6e 7f       	andi	r22, 0xFE	; 254
    4a34:	6e 5f       	subi	r22, 0xFE	; 254
    4a36:	7f 4f       	sbci	r23, 0xFF	; 255
    4a38:	8f 4f       	sbci	r24, 0xFF	; 255
    4a3a:	9f 4f       	sbci	r25, 0xFF	; 255
    4a3c:	af 4f       	sbci	r26, 0xFF	; 255
    4a3e:	b1 e0       	ldi	r27, 0x01	; 1
    4a40:	3e d0       	rcall	.+124    	; 0x4abe <__ultoa_invert+0x9c>
    4a42:	b4 e0       	ldi	r27, 0x04	; 4
    4a44:	3c d0       	rcall	.+120    	; 0x4abe <__ultoa_invert+0x9c>
    4a46:	67 0f       	add	r22, r23
    4a48:	78 1f       	adc	r23, r24
    4a4a:	89 1f       	adc	r24, r25
    4a4c:	9a 1f       	adc	r25, r26
    4a4e:	a1 1d       	adc	r26, r1
    4a50:	68 0f       	add	r22, r24
    4a52:	79 1f       	adc	r23, r25
    4a54:	8a 1f       	adc	r24, r26
    4a56:	91 1d       	adc	r25, r1
    4a58:	a1 1d       	adc	r26, r1
    4a5a:	6a 0f       	add	r22, r26
    4a5c:	71 1d       	adc	r23, r1
    4a5e:	81 1d       	adc	r24, r1
    4a60:	91 1d       	adc	r25, r1
    4a62:	a1 1d       	adc	r26, r1
    4a64:	20 d0       	rcall	.+64     	; 0x4aa6 <__ultoa_invert+0x84>
    4a66:	09 f4       	brne	.+2      	; 0x4a6a <__ultoa_invert+0x48>
    4a68:	68 94       	set
    4a6a:	3f 91       	pop	r19
    4a6c:	2a e0       	ldi	r18, 0x0A	; 10
    4a6e:	26 9f       	mul	r18, r22
    4a70:	11 24       	eor	r1, r1
    4a72:	30 19       	sub	r19, r0
    4a74:	30 5d       	subi	r19, 0xD0	; 208
    4a76:	31 93       	st	Z+, r19
    4a78:	de f6       	brtc	.-74     	; 0x4a30 <__ultoa_invert+0xe>
    4a7a:	cf 01       	movw	r24, r30
    4a7c:	08 95       	ret
    4a7e:	46 2f       	mov	r20, r22
    4a80:	47 70       	andi	r20, 0x07	; 7
    4a82:	40 5d       	subi	r20, 0xD0	; 208
    4a84:	41 93       	st	Z+, r20
    4a86:	b3 e0       	ldi	r27, 0x03	; 3
    4a88:	0f d0       	rcall	.+30     	; 0x4aa8 <__ultoa_invert+0x86>
    4a8a:	c9 f7       	brne	.-14     	; 0x4a7e <__ultoa_invert+0x5c>
    4a8c:	f6 cf       	rjmp	.-20     	; 0x4a7a <__ultoa_invert+0x58>
    4a8e:	46 2f       	mov	r20, r22
    4a90:	4f 70       	andi	r20, 0x0F	; 15
    4a92:	40 5d       	subi	r20, 0xD0	; 208
    4a94:	4a 33       	cpi	r20, 0x3A	; 58
    4a96:	18 f0       	brcs	.+6      	; 0x4a9e <__ultoa_invert+0x7c>
    4a98:	49 5d       	subi	r20, 0xD9	; 217
    4a9a:	31 fd       	sbrc	r19, 1
    4a9c:	40 52       	subi	r20, 0x20	; 32
    4a9e:	41 93       	st	Z+, r20
    4aa0:	02 d0       	rcall	.+4      	; 0x4aa6 <__ultoa_invert+0x84>
    4aa2:	a9 f7       	brne	.-22     	; 0x4a8e <__ultoa_invert+0x6c>
    4aa4:	ea cf       	rjmp	.-44     	; 0x4a7a <__ultoa_invert+0x58>
    4aa6:	b4 e0       	ldi	r27, 0x04	; 4
    4aa8:	a6 95       	lsr	r26
    4aaa:	97 95       	ror	r25
    4aac:	87 95       	ror	r24
    4aae:	77 95       	ror	r23
    4ab0:	67 95       	ror	r22
    4ab2:	ba 95       	dec	r27
    4ab4:	c9 f7       	brne	.-14     	; 0x4aa8 <__ultoa_invert+0x86>
    4ab6:	00 97       	sbiw	r24, 0x00	; 0
    4ab8:	61 05       	cpc	r22, r1
    4aba:	71 05       	cpc	r23, r1
    4abc:	08 95       	ret
    4abe:	9b 01       	movw	r18, r22
    4ac0:	ac 01       	movw	r20, r24
    4ac2:	0a 2e       	mov	r0, r26
    4ac4:	06 94       	lsr	r0
    4ac6:	57 95       	ror	r21
    4ac8:	47 95       	ror	r20
    4aca:	37 95       	ror	r19
    4acc:	27 95       	ror	r18
    4ace:	ba 95       	dec	r27
    4ad0:	c9 f7       	brne	.-14     	; 0x4ac4 <__ultoa_invert+0xa2>
    4ad2:	62 0f       	add	r22, r18
    4ad4:	73 1f       	adc	r23, r19
    4ad6:	84 1f       	adc	r24, r20
    4ad8:	95 1f       	adc	r25, r21
    4ada:	a0 1d       	adc	r26, r0
    4adc:	08 95       	ret

00004ade <__prologue_saves__>:
    4ade:	2f 92       	push	r2
    4ae0:	3f 92       	push	r3
    4ae2:	4f 92       	push	r4
    4ae4:	5f 92       	push	r5
    4ae6:	6f 92       	push	r6
    4ae8:	7f 92       	push	r7
    4aea:	8f 92       	push	r8
    4aec:	9f 92       	push	r9
    4aee:	af 92       	push	r10
    4af0:	bf 92       	push	r11
    4af2:	cf 92       	push	r12
    4af4:	df 92       	push	r13
    4af6:	ef 92       	push	r14
    4af8:	ff 92       	push	r15
    4afa:	0f 93       	push	r16
    4afc:	1f 93       	push	r17
    4afe:	cf 93       	push	r28
    4b00:	df 93       	push	r29
    4b02:	cd b7       	in	r28, 0x3d	; 61
    4b04:	de b7       	in	r29, 0x3e	; 62
    4b06:	ca 1b       	sub	r28, r26
    4b08:	db 0b       	sbc	r29, r27
    4b0a:	0f b6       	in	r0, 0x3f	; 63
    4b0c:	f8 94       	cli
    4b0e:	de bf       	out	0x3e, r29	; 62
    4b10:	0f be       	out	0x3f, r0	; 63
    4b12:	cd bf       	out	0x3d, r28	; 61
    4b14:	09 94       	ijmp

00004b16 <__epilogue_restores__>:
    4b16:	2a 88       	ldd	r2, Y+18	; 0x12
    4b18:	39 88       	ldd	r3, Y+17	; 0x11
    4b1a:	48 88       	ldd	r4, Y+16	; 0x10
    4b1c:	5f 84       	ldd	r5, Y+15	; 0x0f
    4b1e:	6e 84       	ldd	r6, Y+14	; 0x0e
    4b20:	7d 84       	ldd	r7, Y+13	; 0x0d
    4b22:	8c 84       	ldd	r8, Y+12	; 0x0c
    4b24:	9b 84       	ldd	r9, Y+11	; 0x0b
    4b26:	aa 84       	ldd	r10, Y+10	; 0x0a
    4b28:	b9 84       	ldd	r11, Y+9	; 0x09
    4b2a:	c8 84       	ldd	r12, Y+8	; 0x08
    4b2c:	df 80       	ldd	r13, Y+7	; 0x07
    4b2e:	ee 80       	ldd	r14, Y+6	; 0x06
    4b30:	fd 80       	ldd	r15, Y+5	; 0x05
    4b32:	0c 81       	ldd	r16, Y+4	; 0x04
    4b34:	1b 81       	ldd	r17, Y+3	; 0x03
    4b36:	aa 81       	ldd	r26, Y+2	; 0x02
    4b38:	b9 81       	ldd	r27, Y+1	; 0x01
    4b3a:	ce 0f       	add	r28, r30
    4b3c:	d1 1d       	adc	r29, r1
    4b3e:	0f b6       	in	r0, 0x3f	; 63
    4b40:	f8 94       	cli
    4b42:	de bf       	out	0x3e, r29	; 62
    4b44:	0f be       	out	0x3f, r0	; 63
    4b46:	cd bf       	out	0x3d, r28	; 61
    4b48:	ed 01       	movw	r28, r26
    4b4a:	08 95       	ret

00004b4c <_exit>:
    4b4c:	f8 94       	cli

00004b4e <__stop_program>:
    4b4e:	ff cf       	rjmp	.-2      	; 0x4b4e <__stop_program>
